[tool.poetry]
name = "mephi-360"
version = "0.1.0"
description = "Student aid exchange bot for MEPhI"
authors = ["Dmitry Sidiuk <seajoyer@gmail.com>"]
license = "CC-BY-NC-SA-4.0"
readme = "README.org"
homepage = "https://github.com/seajoyer/mephi-360"
repository = "https://github.com/seajoyer/mephi-360"
keywords = ["telegram", "bot", "mephi", "mephi360", "student", "education", "mutual aid"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Communications :: Chat",
]
packages = [
    { include = "bot", from = "src" },
    { include = "models", from = "src" },
    { include = "utils", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.12"
python-telegram-bot = "^20.0"
sqlalchemy = "^2.0"
asyncpg = "^0.27"
bcrypt = "^4.0"
python-dotenv = "^1.0"
aiohttp = "^3.8"
beautifulsoup4 = "^4.12"
cryptography = "^42.0"
numpy = "^1.26"
matplotlib = "^3.8"
psycopg2 = "^2.9"
requests = "^2.31"
prometheus_client = "^0.17.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-asyncio = "^0.23"
pytest-cov = "^4.0"
pytest-mock = "^3.12"
black = "^24.1"
isort = "^5.13"
flake8 = "^7.0"
mypy = "^1.8"
pre-commit = "^3.5"
ruff = "^0.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/docs
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = ["docs"]

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # flake8-bandit
]
ignore = ["E203", "W503"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=src --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
