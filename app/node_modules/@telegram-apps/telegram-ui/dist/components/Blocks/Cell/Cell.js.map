{"version":3,"sources":["../../../../src/components/Blocks/Cell/Cell.tsx"],"sourcesContent":["'use client';\n\nimport { ElementType, forwardRef, ReactElement, ReactNode } from 'react';\nimport styles from './Cell.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { BadgeProps } from 'components/Blocks/Badge/Badge';\nimport { Tappable, TappableProps } from 'components/Service/Tappable/Tappable';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { useTypographyCellComponents } from './hooks/useTypographyCellComponents';\n\nexport interface CellProps extends Omit<TappableProps, 'Component'> {\n  /** Content displayed above the main content as a subheading */\n  subhead?: ReactNode;\n  /** Main content displayed as a header */\n  children?: ReactNode;\n  /** Content displayed alongside the header as a hint */\n  hint?: ReactNode;\n  /** A badge component to be displayed next to the header */\n  titleBadge?: ReactElement<BadgeProps>;\n  /** Content displayed below the header as a subtitle */\n  subtitle?: ReactNode;\n  /** Additional description displayed below the subtitle */\n  description?: ReactNode;\n  /** Content or elements to be displayed on the left side of the cell */\n  before?: ReactNode;\n  /** Content or elements to be displayed on the right side of the cell */\n  after?: ReactNode;\n  /** Custom component or HTML tag to be used as the root element of the cell, div by default */\n  Component?: ElementType;\n  /** Controls the hover state of the component externally, useful for keyboard navigation */\n  hovered?: boolean;\n  /** Allows for multiline content without truncation */\n  multiline?: boolean;\n}\n\n/**\n * `Cell` component acts as a flexible and interactive container for various types of content,\n * enabling the creation of complex list items, form fields, and more. It leverages the `Tappable`\n * component for interaction and is designed to be flexible and extensible.\n */\nexport const Cell = forwardRef(({\n  children,\n  titleBadge,\n  hint,\n  subhead,\n  subtitle,\n  description,\n  className,\n  before,\n  after,\n  Component,\n  hovered,\n  multiline,\n  ...restProps\n}: CellProps, ref) => {\n  const platform = usePlatform();\n  const { Title, Description } = useTypographyCellComponents();\n\n  const hasTitle = hasReactNode(children) || hasReactNode(hint) || hasReactNode(titleBadge);\n  return (\n    <Tappable\n      ref={ref}\n      Component={Component || 'div'}\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        hovered && styles['wrapper--hovered'],\n        multiline && styles['wrapper--multiline'],\n        className,\n      )}\n      {...restProps}\n    >\n      {hasReactNode(before) && <div className={styles.before}>{before}</div>}\n      <div className={styles.middle}>\n        {hasReactNode(subhead) && (\n          <Subheadline className={styles.subhead} level=\"2\" weight=\"3\">\n            {subhead}\n          </Subheadline>\n        )}\n        {hasTitle && (\n          <Title className={styles.head}>\n            {hasReactNode(children) && <span className={styles.title}>{children}</span>}\n            {hasReactNode(hint) && <span className={styles.hint}>{hint}</span>}\n            {hasReactNode(titleBadge) && titleBadge}\n          </Title>\n        )}\n        {hasReactNode(subtitle) && (\n          <Subheadline className={styles.subtitle} level=\"2\" weight=\"3\">\n            {subtitle}\n          </Subheadline>\n        )}\n        {hasReactNode(description) && (\n          <Description className={styles.description}>\n            {description}\n          </Description>\n        )}\n      </div>\n      {hasReactNode(after) && <div className={styles.after}>{after}</div>}\n    </Tappable>\n  );\n});\n"],"names":["forwardRef","classNames","hasReactNode","usePlatform","Tappable","Subheadline","useTypographyCellComponents","Cell","ref","children","titleBadge","hint","subhead","subtitle","description","className","before","after","Component","hovered","multiline","restProps","platform","Title","Description","hasTitle","div","level","weight","span"],"mappings":"AAAA;;;;;AAEA,SAAsBA,UAAU,QAAiC,QAAQ;AAGzE,SAASC,UAAU,QAAQ,8BAAqB;AAChD,SAASC,YAAY,QAAQ,8BAAqB;AAClD,SAASC,WAAW,QAAQ,6BAAoB;AAGhD,SAASC,QAAQ,QAAuB,kCAAuC;AAC/E,SAASC,WAAW,QAAQ,2CAAgD;AAC5E,SAASC,2BAA2B,QAAQ,sCAAsC;AA2BlF;;;;CAIC,GACD,OAAO,MAAMC,qBAAOP,WAAW,SAcjBQ;QAdkB,EAC9BC,QAAQ,EACRC,UAAU,EACVC,IAAI,EACJC,OAAO,EACPC,QAAQ,EACRC,WAAW,EACXC,SAAS,EACTC,MAAM,EACNC,KAAK,EACLC,SAAS,EACTC,OAAO,EACPC,SAAS,EAEC,WADPC;QAZHZ;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;;IAGA,MAAME,WAAWnB;IACjB,MAAM,EAAEoB,KAAK,EAAEC,WAAW,EAAE,GAAGlB;IAE/B,MAAMmB,WAAWvB,aAAaO,aAAaP,aAAaS,SAAST,aAAaQ;IAC9E,qBACE,MAACN;QACCI,KAAKA;QACLU,WAAWA,aAAa;QACxBH,WAAWd,oCAETqB,aAAa,kCACbH,oCACAC,sCACAL;OAEEM;;YAEHnB,aAAac,yBAAW,KAACU;gBAAIX,SAAS;0BAAkBC;;0BACzD,MAACU;gBAAIX,SAAS;;oBACXb,aAAaU,0BACZ,KAACP;wBAAYU,SAAS;wBAAkBY,OAAM;wBAAIC,QAAO;kCACtDhB;;oBAGJa,0BACC,MAACF;wBAAMR,SAAS;;4BACbb,aAAaO,2BAAa,KAACoB;gCAAKd,SAAS;0CAAiBN;;4BAC1DP,aAAaS,uBAAS,KAACkB;gCAAKd,SAAS;0CAAgBJ;;4BACrDT,aAAaQ,eAAeA;;;oBAGhCR,aAAaW,2BACZ,KAACR;wBAAYU,SAAS;wBAAmBY,OAAM;wBAAIC,QAAO;kCACvDf;;oBAGJX,aAAaY,8BACZ,KAACU;wBAAYT,SAAS;kCACnBD;;;;YAINZ,aAAae,wBAAU,KAACS;gBAAIX,SAAS;0BAAiBE;;;;AAG7D,GAAG"}