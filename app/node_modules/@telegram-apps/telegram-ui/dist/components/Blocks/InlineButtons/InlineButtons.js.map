{"version":3,"sources":["../../../../src/components/Blocks/InlineButtons/InlineButtons.tsx"],"sourcesContent":["'use client';\n\nimport { forwardRef, ForwardRefExoticComponent, HTMLAttributes, ReactElement, RefAttributes } from 'react';\nimport styles from './InlineButtons.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { useObjectMemo } from 'hooks/useObjectMemo';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { InlineButtonsItem, InlineButtonsItemProps } from './components/InlineButtonsItem/InlineButtonsItem';\nimport { InlineButtonsContext, InlineButtonsContextProps } from './InlineButtonsContext';\n\nexport interface InlineButtonsProps extends HTMLAttributes<HTMLDivElement> {\n  /** Dictates the styling mode for the inline buttons, affecting color and background. */\n  mode?: InlineButtonsContextProps['mode'];\n  /**\n   * Children should be `InlineButtons.Item` components. Each child will inherit the `mode`\n   * from this parent, ensuring consistent styling across all items.\n   */\n  children: ReactElement<InlineButtonsItemProps>[];\n}\n\ntype InlineButtonsWithComponents = ForwardRefExoticComponent<InlineButtonsProps & RefAttributes<HTMLDivElement>> & {\n  Item: typeof InlineButtonsItem;\n};\n\n/**\n * `InlineButtons` acts as a container for `InlineButtons.Item` components. This component\n * provides a unified context for styling and interaction, leveraging the `mode` to apply\n * consistent styling across all child components. It ensures visual consistency across different\n * platforms and supports custom styling modes.\n */\nexport const InlineButtons = forwardRef(({\n  mode,\n  className,\n  children,\n  ...restProps\n}: InlineButtonsProps, ref) => {\n  const platform = usePlatform();\n  const contextValue = useObjectMemo({ mode });\n\n  return (\n    <div\n      ref={ref}\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        className,\n      )}\n      {...restProps}\n    >\n      <InlineButtonsContext.Provider value={contextValue}>\n        {children}\n      </InlineButtonsContext.Provider>\n    </div>\n  );\n}) as InlineButtonsWithComponents;\n\nInlineButtons.Item = InlineButtonsItem;\n"],"names":["forwardRef","classNames","useObjectMemo","usePlatform","InlineButtonsItem","InlineButtonsContext","InlineButtons","ref","mode","className","children","restProps","platform","contextValue","div","Provider","value","Item"],"mappings":"AAAA;;;;;AAEA,SAASA,UAAU,QAAgF,QAAQ;AAG3G,SAASC,UAAU,QAAQ,8BAAqB;AAChD,SAASC,aAAa,QAAQ,+BAAsB;AACpD,SAASC,WAAW,QAAQ,6BAAoB;AAEhD,SAASC,iBAAiB,QAAgC,mDAAmD;AAC7G,SAASC,oBAAoB,QAAmC,yBAAyB;AAgBzF;;;;;CAKC,GACD,OAAO,MAAMC,8BAAgBN,WAAW,SAKjBO;QALkB,EACvCC,IAAI,EACJC,SAAS,EACTC,QAAQ,EAEW,WADhBC;QAHHH;QACAC;QACAC;;IAGA,MAAME,WAAWT;IACjB,MAAMU,eAAeX,cAAc;QAAEM;IAAK;IAE1C,qBACE,KAACM;QACCP,KAAKA;QACLE,WAAWR,oCAETW,aAAa,kCACbH;OAEEE;kBAEJ,cAAA,KAACN,qBAAqBU,QAAQ;YAACC,OAAOH;sBACnCH;;;AAIT,GAAkC;AAElCJ,cAAcW,IAAI,GAAGb"}