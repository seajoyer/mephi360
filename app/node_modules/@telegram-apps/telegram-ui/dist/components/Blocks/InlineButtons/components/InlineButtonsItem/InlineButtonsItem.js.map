{"version":3,"sources":["../../../../../../src/components/Blocks/InlineButtons/components/InlineButtonsItem/InlineButtonsItem.tsx"],"sourcesContent":["'use client';\n\nimport { ButtonHTMLAttributes, ReactNode, useContext } from 'react';\nimport styles from './InlineButtonsItem.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Tappable } from 'components/Service/Tappable/Tappable';\nimport { Caption } from 'components/Typography/Caption/Caption';\nimport { InlineButtonsContext, InlineButtonsContextProps } from '../../InlineButtonsContext';\n\nexport interface InlineButtonsItemProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  /** Text displayed inside the button. */\n  text?: string;\n  /** Optional mode for styling the button, with 'plain' as the default. */\n  mode?: InlineButtonsContextProps['mode'];\n  /** Typically an Icon, to be rendered inside the button. */\n  children?: ReactNode;\n}\n\nconst modeStyles = {\n  bezeled: styles['wrapper--bezeled'],\n  gray: styles['wrapper--gray'],\n};\n\n/**\n * `InlineButtons.Item` is designed for use within an InlineButtons container but can also serve as a standalone button\n * if used by itself. It supports displaying optional text and can inherit a styling mode from its parent InlineButtons\n * context or utilize a locally defined mode. This flexibility allows it to seamlessly integrate within various layouts\n * and designs, providing a consistent and adaptable interface element.\n */\nexport const InlineButtonsItem = ({\n  mode: propsMode = 'plain',\n  className,\n  text,\n  children,\n  ...restProps\n}: InlineButtonsItemProps) => {\n  const platform = usePlatform();\n  const { mode: inheritMode } = useContext(InlineButtonsContext);\n\n  const mode = inheritMode || propsMode;\n  return (\n    <Tappable\n      Component=\"button\"\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        mode !== 'plain' && modeStyles[mode],\n        className,\n      )}\n      {...restProps}\n    >\n      {children}\n      {hasReactNode(text) && <Caption className={styles.text} level=\"1\" weight=\"2\">{text}</Caption>}\n    </Tappable>\n  );\n};\n"],"names":["useContext","classNames","hasReactNode","usePlatform","Tappable","Caption","InlineButtonsContext","modeStyles","bezeled","gray","InlineButtonsItem","mode","propsMode","className","text","children","restProps","platform","inheritMode","Component","level","weight"],"mappings":"AAAA;;;;;AAEA,SAA0CA,UAAU,QAAQ,QAAQ;AAGpE,SAASC,UAAU,QAAQ,oCAAqB;AAChD,SAASC,YAAY,QAAQ,oCAAqB;AAClD,SAASC,WAAW,QAAQ,mCAAoB;AAEhD,SAASC,QAAQ,QAAQ,wCAAuC;AAChE,SAASC,OAAO,QAAQ,yCAAwC;AAChE,SAASC,oBAAoB,QAAmC,6BAA6B;AAW7F,MAAMC,aAAa;IACjBC,OAAO;IACPC,IAAI;AACN;AAEA;;;;;CAKC,GACD,OAAO,MAAMC,oBAAoB;QAAC,EAChCC,MAAMC,YAAY,OAAO,EACzBC,SAAS,EACTC,IAAI,EACJC,QAAQ,EAEe,WADpBC;QAJHL;QACAE;QACAC;QACAC;;IAGA,MAAME,WAAWd;IACjB,MAAM,EAAEQ,MAAMO,WAAW,EAAE,GAAGlB,WAAWM;IAEzC,MAAMK,OAAOO,eAAeN;IAC5B,qBACE,MAACR;QACCe,WAAU;QACVN,WAAWZ,oCAETgB,aAAa,kCACbN,SAAS,WAAWJ,UAAU,CAACI,KAAK,EACpCE;OAEEG;;YAEHD;YACAb,aAAaY,uBAAS,KAACT;gBAAQQ,SAAS;gBAAeO,OAAM;gBAAIC,QAAO;0BAAKP;;;;AAGpF,EAAE"}