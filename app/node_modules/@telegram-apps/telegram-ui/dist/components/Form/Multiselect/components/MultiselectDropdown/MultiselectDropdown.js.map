{"version":3,"sources":["../../../../../../src/components/Form/Multiselect/components/MultiselectDropdown/MultiselectDropdown.tsx"],"sourcesContent":["import { forwardRef, ForwardRefExoticComponent, Fragment, MouseEvent, RefAttributes, RefObject } from 'react';\nimport styles from './MultiselectDropdown.module.css';\n\nimport { Cell, CellProps } from 'components/Blocks/Cell/Cell';\nimport { MultiselectOption } from 'components/Form/Multiselect/types';\nimport { Popper } from 'components/Overlays/Popper/Popper';\nimport { isCreateNewOptionPreset, isEmptyOptionPreset } from '../../hooks/constants';\nimport { UseMultiselectProps } from '../../hooks/useMultiselect';\nimport { renderOptionDefault } from './constants';\n\nexport interface MultiselectDropdownProps extends Required<Pick<UseMultiselectProps, 'options' | 'value'>> {\n  /** Array of selected options. */\n  value: MultiselectOption[];\n  /** Reference to the target element the dropdown is associated with. */\n  targetRef: RefObject<HTMLElement>;\n  /** Accessibility ID for the dropdown. */\n  dropdownAriaId: string;\n  /** Currently focused option within the dropdown. */\n  focusedOption: MultiselectOption | null;\n  /** Function to register a DOM node with an option index. */\n  setOptionNode: (index: number, node: HTMLElement) => void;\n  /** Function to control the open state of the dropdown. */\n  setOpened: (opened: boolean) => void;\n  /** Index of the currently focused option. */\n  focusedOptionIndex: number | null;\n  /** Function to update the index of the focused option. */\n  setFocusedOptionIndex: (index: number) => void;\n  /** Function to add an option derived from the input value. */\n  addOptionFromInput: () => void;\n  /** Mouse leave event handler for the dropdown. */\n  onMouseLeave: (event: MouseEvent<HTMLDivElement>) => void;\n  /** Function to add a selected option. */\n  addOption: (option: MultiselectOption) => void;\n  /** Function to clear the input value. */\n  clearInput: () => void;\n  /** Custom render function for each option. Defaults to a basic implementation. */\n  renderOption?: ForwardRefExoticComponent<CellProps & RefAttributes<unknown>>;\n  /** Whether to close the dropdown after selecting an option. */\n  closeDropdownAfterSelect?: boolean;\n}\n\n/**\n * Renders the dropdown menu for the multiselect input, including all options and managing interactions such as selection, focus, and mouse events.\n * Utilizes the `Popper` component for positioning relative to the input field.\n */\nexport const MultiselectDropdown = forwardRef<HTMLDivElement, MultiselectDropdownProps>(({\n  dropdownAriaId,\n  options,\n  onMouseLeave,\n  targetRef,\n  addOptionFromInput,\n  setFocusedOptionIndex,\n  renderOption = renderOptionDefault,\n  focusedOption,\n  value,\n  setOptionNode,\n  setOpened,\n  closeDropdownAfterSelect,\n  addOption,\n  focusedOptionIndex,\n  clearInput,\n}, ref) => {\n\n  return (\n    <Popper\n      id={dropdownAriaId}\n      ref={ref}\n      targetRef={targetRef}\n      onMouseLeave={onMouseLeave}\n      autoUpdateOnTargetResize\n      role=\"listbox\"\n      placement=\"bottom\"\n      sameWidth\n      className={styles.wrapper}\n    >\n      {options.map((option, index) => {\n        if (isEmptyOptionPreset(option)) {\n          return (\n            <Cell key=\"empty\" readOnly className={styles.empty}>\n              {option.placeholder}\n            </Cell>\n          );\n        }\n\n        if (isCreateNewOptionPreset(option)) {\n          return (\n            <Cell\n              key=\"new-options\"\n              hovered={focusedOptionIndex === index}\n              onMouseDown={addOptionFromInput}\n              onMouseEnter={() => setFocusedOptionIndex(index)}\n            >\n              {option.actionText}\n            </Cell>\n          );\n        }\n\n        return (\n          <Fragment key={`${typeof option.value}-${option.label}`}>\n            {renderOption(\n              {\n                className: styles.option,\n                hovered: focusedOption\n                  ? option.value === focusedOption.value\n                  : false,\n                children: option.label,\n                selected: value.findIndex((selectedOption) => selectedOption.value === option.value) !== -1,\n                ref: (node: HTMLElement) => setOptionNode(index, node),\n                onMouseDown: (event: MouseEvent<HTMLDivElement>) => {\n                  if (event.defaultPrevented) {\n                    return;\n                  }\n\n                  closeDropdownAfterSelect && setOpened(false);\n                  addOption(option);\n                  clearInput();\n                },\n                onMouseEnter: () => setFocusedOptionIndex(index),\n              },\n            )}\n          </Fragment>\n        );\n      })}\n    </Popper>\n  );\n});\n"],"names":["forwardRef","Fragment","Cell","Popper","isCreateNewOptionPreset","isEmptyOptionPreset","renderOptionDefault","MultiselectDropdown","dropdownAriaId","options","onMouseLeave","targetRef","addOptionFromInput","setFocusedOptionIndex","renderOption","focusedOption","value","setOptionNode","setOpened","closeDropdownAfterSelect","addOption","focusedOptionIndex","clearInput","ref","id","autoUpdateOnTargetResize","role","placement","sameWidth","className","map","option","index","readOnly","placeholder","hovered","onMouseDown","onMouseEnter","actionText","children","label","selected","findIndex","selectedOption","node","event","defaultPrevented"],"mappings":";AAAA,SAASA,UAAU,EAA6BC,QAAQ,QAA8C,QAAQ;AAG9G,SAASC,IAAI,QAAmB,+BAA8B;AAE9D,SAASC,MAAM,QAAQ,qCAAoC;AAC3D,SAASC,uBAAuB,EAAEC,mBAAmB,QAAQ,wBAAwB;AAErF,SAASC,mBAAmB,QAAQ,cAAc;AAiClD;;;CAGC,GACD,OAAO,MAAMC,oCAAsBP,WAAqD,CAAC,EACvFQ,cAAc,EACdC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,kBAAkB,EAClBC,qBAAqB,EACrBC,eAAeR,mBAAmB,EAClCS,aAAa,EACbC,KAAK,EACLC,aAAa,EACbC,SAAS,EACTC,wBAAwB,EACxBC,SAAS,EACTC,kBAAkB,EAClBC,UAAU,EACX,EAAEC;IAED,qBACE,KAACpB;QACCqB,IAAIhB;QACJe,KAAKA;QACLZ,WAAWA;QACXD,cAAcA;QACde,wBAAwB;QACxBC,MAAK;QACLC,WAAU;QACVC,SAAS;QACTC,SAAS;kBAERpB,QAAQqB,GAAG,CAAC,CAACC,QAAQC;YACpB,IAAI3B,oBAAoB0B,SAAS;gBAC/B,qBACE,KAAC7B;oBAAiB+B,QAAQ;oBAACJ,SAAS;8BACjCE,OAAOG,WAAW;mBADX;YAId;YAEA,IAAI9B,wBAAwB2B,SAAS;gBACnC,qBACE,KAAC7B;oBAECiC,SAASd,uBAAuBW;oBAChCI,aAAaxB;oBACbyB,cAAc,IAAMxB,sBAAsBmB;8BAEzCD,OAAOO,UAAU;mBALd;YAQV;YAEA,qBACE,KAACrC;0BACEa,aACC;oBACEe,SAAS;oBACTM,SAASpB,gBACLgB,OAAOf,KAAK,KAAKD,cAAcC,KAAK,GACpC;oBACJuB,UAAUR,OAAOS,KAAK;oBACtBC,UAAUzB,MAAM0B,SAAS,CAAC,CAACC,iBAAmBA,eAAe3B,KAAK,KAAKe,OAAOf,KAAK,MAAM,CAAC;oBAC1FO,KAAK,CAACqB,OAAsB3B,cAAce,OAAOY;oBACjDR,aAAa,CAACS;wBACZ,IAAIA,MAAMC,gBAAgB,EAAE;4BAC1B;wBACF;wBAEA3B,4BAA4BD,UAAU;wBACtCE,UAAUW;wBACVT;oBACF;oBACAe,cAAc,IAAMxB,sBAAsBmB;gBAC5C;eApBW,CAAC,EAAE,OAAOD,OAAOf,KAAK,CAAC,CAAC,EAAEe,OAAOS,KAAK,CAAC,CAAC;QAwB3D;;AAGN,GAAG"}