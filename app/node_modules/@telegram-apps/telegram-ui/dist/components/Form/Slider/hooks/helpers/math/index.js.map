{"version":3,"sources":["../../../../../../../src/components/Form/Slider/hooks/helpers/math/index.ts"],"sourcesContent":["import { clamp } from 'helpers/math';\n\n/**\n * These functions are copied from material-ui\n * https://github.com/mui/material-ui/blob/v5.13.7/packages/mui-base/src/useSlider/useSlider.ts#L89-L105\n */\nexport const getDecimalPrecision = (num: number) => {\n  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.\n  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.\n  if (Math.abs(num) < 1) {\n    const parts = num.toExponential().split('e-');\n    const matissaDecimalPart = parts[0].split('.')[1];\n    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);\n  }\n\n  const decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n};\n\nexport const roundValueToStep = (value: number, step: number, min: number) => {\n  const nearest = Math.round((value - min) / step) * step + min;\n  return Number(nearest.toFixed(getDecimalPrecision(step)));\n};\n\nexport const roundedClampWithStep = (val: number, min: number, max: number, step?: number) => {\n  if (step == null || step <= 0) {\n    return clamp(val, min, max);\n  }\n\n  const roundedValue = roundValueToStep(val, step, min);\n  return clamp(roundedValue, min, max);\n};\n\nexport const scaleAndClampValue = (\n  value: number,\n  from: [number, number],\n  to: [number, number],\n  options: { step?: number } = {},\n) => {\n  const scaled = ((value - from[0]) / (from[1] - from[0])) * (to[1] - to[0]) + to[0];\n  return roundedClampWithStep(scaled, to[0], to[1], options.step);\n};\n\nexport const toPercent = (v: number, min: number, max: number) => ((v - min) / (max - min)) * 100;\n\nexport const offsetXToScaledValue = (\n  startX: number,\n  width: number,\n  min: number,\n  max: number,\n  step?: number,\n) => {\n  return scaleAndClampValue(startX, [0, width], [min, max], { step });\n};\n"],"names":["clamp","getDecimalPrecision","num","Math","abs","parts","toExponential","split","matissaDecimalPart","length","parseInt","decimalPart","toString","roundValueToStep","value","step","min","nearest","round","Number","toFixed","roundedClampWithStep","val","max","roundedValue","scaleAndClampValue","from","to","options","scaled","toPercent","v","offsetXToScaledValue","startX","width"],"mappings":"AAAA,SAASA,KAAK,QAAQ,iCAAe;AAErC;;;CAGC,GACD,OAAO,MAAMC,sBAAsB,CAACC;IAClC,0FAA0F;IAC1F,kGAAkG;IAClG,IAAIC,KAAKC,GAAG,CAACF,OAAO,GAAG;QACrB,MAAMG,QAAQH,IAAII,aAAa,GAAGC,KAAK,CAAC;QACxC,MAAMC,qBAAqBH,KAAK,CAAC,EAAE,CAACE,KAAK,CAAC,IAAI,CAAC,EAAE;QACjD,OAAO,AAACC,CAAAA,qBAAqBA,mBAAmBC,MAAM,GAAG,CAAA,IAAKC,SAASL,KAAK,CAAC,EAAE,EAAE;IACnF;IAEA,MAAMM,cAAcT,IAAIU,QAAQ,GAAGL,KAAK,CAAC,IAAI,CAAC,EAAE;IAChD,OAAOI,cAAcA,YAAYF,MAAM,GAAG;AAC5C,EAAE;AAEF,OAAO,MAAMI,mBAAmB,CAACC,OAAeC,MAAcC;IAC5D,MAAMC,UAAUd,KAAKe,KAAK,CAAC,AAACJ,CAAAA,QAAQE,GAAE,IAAKD,QAAQA,OAAOC;IAC1D,OAAOG,OAAOF,QAAQG,OAAO,CAACnB,oBAAoBc;AACpD,EAAE;AAEF,OAAO,MAAMM,uBAAuB,CAACC,KAAaN,KAAaO,KAAaR;IAC1E,IAAIA,QAAQ,QAAQA,QAAQ,GAAG;QAC7B,OAAOf,MAAMsB,KAAKN,KAAKO;IACzB;IAEA,MAAMC,eAAeX,iBAAiBS,KAAKP,MAAMC;IACjD,OAAOhB,MAAMwB,cAAcR,KAAKO;AAClC,EAAE;AAEF,OAAO,MAAME,qBAAqB,CAChCX,OACAY,MACAC,IACAC,UAA6B,CAAC,CAAC;IAE/B,MAAMC,SAAS,AAAEf,CAAAA,QAAQY,IAAI,CAAC,EAAE,AAAD,IAAMA,CAAAA,IAAI,CAAC,EAAE,GAAGA,IAAI,CAAC,EAAE,AAAD,IAAOC,CAAAA,EAAE,CAAC,EAAE,GAAGA,EAAE,CAAC,EAAE,AAAD,IAAKA,EAAE,CAAC,EAAE;IAClF,OAAON,qBAAqBQ,QAAQF,EAAE,CAAC,EAAE,EAAEA,EAAE,CAAC,EAAE,EAAEC,QAAQb,IAAI;AAChE,EAAE;AAEF,OAAO,MAAMe,YAAY,CAACC,GAAWf,KAAaO,MAAgB,AAAEQ,CAAAA,IAAIf,GAAE,IAAMO,CAAAA,MAAMP,GAAE,IAAM,IAAI;AAElG,OAAO,MAAMgB,uBAAuB,CAClCC,QACAC,OACAlB,KACAO,KACAR;IAEA,OAAOU,mBAAmBQ,QAAQ;QAAC;QAAGC;KAAM,EAAE;QAAClB;QAAKO;KAAI,EAAE;QAAER;IAAK;AACnE,EAAE"}