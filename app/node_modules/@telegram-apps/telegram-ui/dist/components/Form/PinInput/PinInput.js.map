{"version":3,"sources":["../../../../src/components/Form/PinInput/PinInput.tsx"],"sourcesContent":["import { forwardRef, HTMLAttributes, ReactNode } from 'react';\nimport styles from './PinInput.module.css';\n\nimport { Keys } from 'helpers/accessibility';\nimport { createChunks } from 'helpers/chunk';\nimport { classNames } from 'helpers/classNames';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Icon36Backspace } from 'icons/36/backspace';\n\nimport { PinInputButton } from 'components/Form/PinInput/components/PinInputButton/PinInputButton';\nimport { RootRenderer } from 'components/Service/RootRenderer/RootRenderer';\nimport { Headline } from 'components/Typography/Headline/Headline';\nimport { PinInputCell } from './components/PinInputCell/PinInputCell';\nimport { AVAILABLE_PINS, usePinInput } from './hooks/usePinInput';\n\nexport interface PinInputProps extends Omit<HTMLAttributes<HTMLElement>, 'onChange'> {\n  /** Text label displayed above the pin input cells. */\n  label?: string;\n  /** The number of pin input fields to display, with a minimum of 2. */\n  pinCount?: number;\n  /** The initial pin values to populate the input fields with. */\n  value?: number[];\n  /** Callback function triggered when the pin values change. */\n  onChange?: (value: number[]) => void;\n}\n\nconst PIN_MIN_COUNT = 2;\n\n/**\n * Renders a set of input fields for entering pin codes with a virtual keypad for value entry and deletion.\n */\nexport const PinInput = forwardRef<HTMLElement, PinInputProps>(({\n  label = 'Enter your pin',\n  pinCount = 4,\n  className,\n  value: valueProp = [],\n  onChange,\n  ...restProps\n}, ref) => {\n  const platform = usePlatform();\n  const normalizedPinCount = Math.max(PIN_MIN_COUNT, pinCount);\n\n  const {\n    handleClickValue,\n    handleClickBackspace,\n    setInputRefByIndex,\n    value,\n    handleButton,\n  } = usePinInput({\n    value: valueProp,\n    onChange,\n    pinCount: normalizedPinCount,\n  });\n\n  return (\n    <RootRenderer>\n      <section\n        ref={ref}\n        className={classNames(\n          styles.wrapper,\n          platform === 'ios' && styles['wrapper--ios'],\n          className,\n        )}\n        {...restProps}\n      >\n        <header className={styles.header}>\n          <Headline className={styles.title} weight=\"2\">{label}</Headline>\n          <div className={styles.cellsWrapper}>\n            {Array.from({ length: normalizedPinCount }).map((_, index) => (\n              <PinInputCell\n                /* We can't use useId here, because if pinCount changes in runtime, it will crash because amount of renders will be different */\n                /* eslint-disable-next-line react/no-array-index-key */\n                key={index}\n                ref={(labelRef) => setInputRefByIndex(index, labelRef)}\n                isTyped={index < value.length}\n                value={value[index] || ''}\n                onKeyDown={(event) => handleButton(index, event.key)}\n                autoFocus={index === 0}\n                tabIndex={-1}\n                readOnly\n              />\n            ))}\n          </div>\n        </header>\n        <div className={styles.buttonWrapper}>\n          {createChunks(AVAILABLE_PINS, 3).map((rows) => (\n            <div key={rows.toString()} className={styles.row}>\n              {rows.map((element) => {\n                let children: ReactNode = element;\n                let clickFunction = () => handleClickValue(Number(element));\n\n                if (element === Keys.BACKSPACE) {\n                  clickFunction = () => handleClickBackspace();\n                  children = <Icon36Backspace className={styles.backspaceIcon} />;\n                }\n\n                return (\n                  <PinInputButton key={element} onClick={clickFunction}>\n                    {children}\n                  </PinInputButton>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </section>\n    </RootRenderer>\n  );\n});\n"],"names":["forwardRef","Keys","createChunks","classNames","usePlatform","Icon36Backspace","PinInputButton","RootRenderer","Headline","PinInputCell","AVAILABLE_PINS","usePinInput","PIN_MIN_COUNT","PinInput","ref","label","pinCount","className","value","valueProp","onChange","restProps","platform","normalizedPinCount","Math","max","handleClickValue","handleClickBackspace","setInputRefByIndex","handleButton","section","header","weight","div","Array","from","length","map","_","index","labelRef","isTyped","onKeyDown","event","key","autoFocus","tabIndex","readOnly","rows","element","children","clickFunction","Number","BACKSPACE","onClick","toString"],"mappings":";;;;AAAA,SAASA,UAAU,QAAmC,QAAQ;AAG9D,SAASC,IAAI,QAAQ,iCAAwB;AAC7C,SAASC,YAAY,QAAQ,yBAAgB;AAC7C,SAASC,UAAU,QAAQ,8BAAqB;AAChD,SAASC,WAAW,QAAQ,6BAAoB;AAEhD,SAASC,eAAe,QAAQ,8BAAqB;AAErD,SAASC,cAAc,QAAQ,6CAAoE;AACnG,SAASC,YAAY,QAAQ,0CAA+C;AAC5E,SAASC,QAAQ,QAAQ,qCAA0C;AACnE,SAASC,YAAY,QAAQ,yCAAyC;AACtE,SAASC,cAAc,EAAEC,WAAW,QAAQ,sBAAsB;AAalE,MAAMC,gBAAgB;AAEtB;;CAEC,GACD,OAAO,MAAMC,yBAAWb,WAAuC,SAO5Dc;QAP6D,EAC9DC,QAAQ,gBAAgB,EACxBC,WAAW,CAAC,EACZC,SAAS,EACTC,OAAOC,YAAY,EAAE,EACrBC,QAAQ,EAET,WADIC;QALHN;QACAC;QACAC;QACAC;QACAE;;IAGA,MAAME,WAAWlB;IACjB,MAAMmB,qBAAqBC,KAAKC,GAAG,CAACb,eAAeI;IAEnD,MAAM,EACJU,gBAAgB,EAChBC,oBAAoB,EACpBC,kBAAkB,EAClBV,KAAK,EACLW,YAAY,EACb,GAAGlB,YAAY;QACdO,OAAOC;QACPC;QACAJ,UAAUO;IACZ;IAEA,qBACE,KAAChB;kBACC,cAAA,MAACuB;YACChB,KAAKA;YACLG,WAAWd,oCAETmB,aAAa,kCACbL;WAEEI;;8BAEJ,MAACU;oBAAOd,SAAS;;sCACf,KAACT;4BAASS,SAAS;4BAAgBe,QAAO;sCAAKjB;;sCAC/C,KAACkB;4BAAIhB,SAAS;sCACXiB,MAAMC,IAAI,CAAC;gCAAEC,QAAQb;4BAAmB,GAAGc,GAAG,CAAC,CAACC,GAAGC,sBAClD,KAAC9B;oCAICK,KAAK,CAAC0B,WAAaZ,mBAAmBW,OAAOC;oCAC7CC,SAASF,QAAQrB,MAAMkB,MAAM;oCAC7BlB,OAAOA,KAAK,CAACqB,MAAM,IAAI;oCACvBG,WAAW,CAACC,QAAUd,aAAaU,OAAOI,MAAMC,GAAG;oCACnDC,WAAWN,UAAU;oCACrBO,UAAU,CAAC;oCACXC,QAAQ;mCAPHR;;;;8BAYb,KAACN;oBAAIhB,SAAS;8BACXf,aAAaQ,gBAAgB,GAAG2B,GAAG,CAAC,CAACW,qBACpC,KAACf;4BAA0BhB,SAAS;sCACjC+B,KAAKX,GAAG,CAAC,CAACY;gCACT,IAAIC,WAAsBD;gCAC1B,IAAIE,gBAAgB,IAAMzB,iBAAiB0B,OAAOH;gCAElD,IAAIA,YAAYhD,KAAKoD,SAAS,EAAE;oCAC9BF,gBAAgB,IAAMxB;oCACtBuB,yBAAW,KAAC7C;wCAAgBY,SAAS;;gCACvC;gCAEA,qBACE,KAACX;oCAA6BgD,SAASH;8CACpCD;mCADkBD;4BAIzB;2BAfQD,KAAKO,QAAQ;;;;;AAsBnC,GAAG"}