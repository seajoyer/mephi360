{"version":3,"sources":["../../../../src/components/Form/ColorInput/ColorInput.tsx"],"sourcesContent":["'use client';\n\nimport { ChangeEvent, InputHTMLAttributes, useEffect, useState } from 'react';\nimport styles from './ColorInput.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { callMultiple } from 'helpers/function';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { FormInput, FormPublicProps } from 'components/Form/FormInput/FormInput';\nimport { VisuallyHidden } from 'components/Service/VisuallyHidden/VisuallyHidden';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { Text } from 'components/Typography/Text/Text';\n\nexport interface ColorInputProps extends Omit<FormPublicProps, 'after'>, InputHTMLAttributes<HTMLInputElement> {}\n\n/**\n * Renders a color picker input within a form structure, displaying the selected color value.\n * It adapts the text style based on the platform and supports additional properties like header and status.\n */\nexport const ColorInput = ({\n  header,\n  before,\n  status,\n  value: valueProp,\n  defaultValue,\n  className,\n  onChange: onChangeProp,\n  ...restProps\n}: ColorInputProps) => {\n  const platform = usePlatform();\n  const [value, setValue] = useState(valueProp || defaultValue || '#EFEFF4');\n\n  useEffect(() => {\n    if (!valueProp) {\n      return;\n    }\n\n    setValue(valueProp);\n  }, [valueProp]);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const TypographyComponent = platform === 'ios' ? Text : Subheadline;\n  return (\n    <FormInput\n      header={header}\n      before={before}\n      after={(\n        <div className={styles.circle}>\n          <VisuallyHidden\n            Component=\"input\"\n            type=\"color\"\n            value={value}\n            onChange={callMultiple(onChange, onChangeProp)}\n            {...restProps}\n          />\n          <div className={styles.circleColor} style={{ backgroundColor: String(value) }} />\n        </div>\n      )}\n      status={status}\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        className,\n      )}\n    >\n      <TypographyComponent caps className={styles.text}>\n        {value}\n      </TypographyComponent>\n    </FormInput>\n  );\n};\n\n"],"names":["useEffect","useState","classNames","callMultiple","usePlatform","FormInput","VisuallyHidden","Subheadline","Text","ColorInput","header","before","status","value","valueProp","defaultValue","className","onChange","onChangeProp","restProps","platform","setValue","e","target","TypographyComponent","after","div","Component","type","style","backgroundColor","String","caps"],"mappings":"AAAA;;;;AAEA,SAA2CA,SAAS,EAAEC,QAAQ,QAAQ,QAAQ;AAG9E,SAASC,UAAU,QAAQ,8BAAqB;AAChD,SAASC,YAAY,QAAQ,4BAAmB;AAChD,SAASC,WAAW,QAAQ,6BAAoB;AAEhD,SAASC,SAAS,QAAyB,yBAAsC;AACjF,SAASC,cAAc,QAAQ,8CAAmD;AAClF,SAASC,WAAW,QAAQ,2CAAgD;AAC5E,SAASC,IAAI,QAAQ,6BAAkC;AAIvD;;;CAGC,GACD,OAAO,MAAMC,aAAa;QAAC,EACzBC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,OAAOC,SAAS,EAChBC,YAAY,EACZC,SAAS,EACTC,UAAUC,YAAY,EAEN,WADbC;QAPHT;QACAC;QACAC;QACAC;QACAE;QACAC;QACAC;;IAGA,MAAMG,WAAWhB;IACjB,MAAM,CAACS,OAAOQ,SAAS,GAAGpB,SAASa,aAAaC,gBAAgB;IAEhEf,UAAU;QACR,IAAI,CAACc,WAAW;YACd;QACF;QAEAO,SAASP;IACX,GAAG;QAACA;KAAU;IAEd,MAAMG,WAAW,CAACK;QAChBD,SAASC,EAAEC,MAAM,CAACV,KAAK;IACzB;IAEA,MAAMW,sBAAsBJ,aAAa,QAAQZ,OAAOD;IACxD,qBACE,KAACF;QACCK,QAAQA;QACRC,QAAQA;QACRc,qBACE,MAACC;YAAIV,SAAS;;8BACZ,KAACV;oBACCqB,WAAU;oBACVC,MAAK;oBACLf,OAAOA;oBACPI,UAAUd,aAAac,UAAUC;mBAC7BC;8BAEN,KAACO;oBAAIV,SAAS;oBAAsBa,OAAO;wBAAEC,iBAAiBC,OAAOlB;oBAAO;;;;QAGhFD,QAAQA;QACRI,WAAWd,oCAETkB,aAAa,kCACbJ;kBAGF,cAAA,KAACQ;YAAoBQ,IAAI;YAAChB,SAAS;sBAChCH;;;AAIT,EAAE"}