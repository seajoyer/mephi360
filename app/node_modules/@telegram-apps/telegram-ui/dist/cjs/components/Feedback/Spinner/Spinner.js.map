{"version":3,"sources":["../../../../../src/components/Feedback/Spinner/Spinner.tsx"],"sourcesContent":["'use client';\n\nimport { HTMLAttributes } from 'react';\nimport styles from './Spinner.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { BaseSpinner } from './components/BaseSpinner/BaseSpinner';\nimport { IOSSpinner } from './components/IOSSpinner/IOSSpinner';\n\nexport interface SpinnerProps extends HTMLAttributes<HTMLDivElement> {\n  /** Determines the size of the spinner. Can be 'small' (s), 'medium' (m), or 'large' (l), with 'medium' being the default size. */\n  size: 's' | 'm' | 'l';\n}\n\nconst sizeStyles = {\n  s: styles['wrapper--s'],\n  m: styles['wrapper--m'],\n  l: styles['wrapper--l'],\n};\n\n/**\n * Provides a visual indicator for loading states across different platforms. It automatically selects\n * an appropriate spinner style based on the current platform, allowing for a consistent user experience.\n */\nexport const Spinner = ({\n  size = 'm',\n  className,\n}: SpinnerProps) => {\n  const platform = usePlatform();\n\n  const Component = platform === 'ios' ? IOSSpinner : BaseSpinner;\n  return (\n    <div\n      role=\"status\"\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        sizeStyles[size],\n        className,\n      )}\n    >\n      <Component size={size} />\n    </div>\n  );\n};\n"],"names":["Spinner","sizeStyles","s","m","l","size","className","platform","usePlatform","Component","IOSSpinner","BaseSpinner","div","role","classNames"],"mappings":"AAAA;;;;;+BA0BaA;;;eAAAA;;;;4BArBc;6BACC;6BAEA;4BACD;AAO3B,MAAMC,aAAa;IACjBC,CAAC;IACDC,CAAC;IACDC,CAAC;AACH;AAMO,MAAMJ,UAAU,CAAC,EACtBK,OAAO,GAAG,EACVC,SAAS,EACI;IACb,MAAMC,WAAWC,IAAAA,wBAAW;IAE5B,MAAMC,YAAYF,aAAa,QAAQG,sBAAU,GAAGC,wBAAW;IAC/D,qBACE,qBAACC;QACCC,MAAK;QACLP,WAAWQ,IAAAA,sBAAU,2BAEnBP,aAAa,kCACbN,UAAU,CAACI,KAAK,EAChBC;kBAGF,cAAA,qBAACG;YAAUJ,MAAMA;;;AAGvB"}