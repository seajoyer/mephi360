{"version":3,"sources":["../../../../../src/components/Form/Slider/Slider.tsx"],"sourcesContent":["'use client';\n\nimport { ChangeEvent, HTMLAttributes, ReactNode } from 'react';\nimport styles from './Slider.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Touch, type TouchEvent } from 'components/Service/Touch/Touch';\nimport { SliderSteps } from './components/SliderSteps/SliderSteps';\nimport { SliderThumb } from './components/SliderThumb/SliderThumb';\nimport { useSlider } from './hooks/useSlider';\n\nexport interface SliderBaseProps extends Omit<HTMLAttributes<HTMLDivElement>, 'value' | 'defaultValue' | 'onChange'> {\n  /** Minimum allowed value. Defaults to 0. */\n  min?: number;\n  /** Maximum allowed value. Defaults to 100. */\n  max?: number;\n  /** Step value for each movement. Defaults to 1. */\n  step?: number;\n  /** Indicates whether the slider is disabled. */\n  disabled?: boolean;\n  /** Content to be rendered before the slider. */\n  before?: ReactNode;\n  /** Content to be rendered after the slider. */\n  after?: ReactNode;\n  /** Provides a way to generate dynamic aria-label based on the slider's thumb index. */\n  getAriaLabel?: (index: number) => string;\n  /** Provides a way to customize the aria-valuetext for more flexible text representation based on the slider's value. */\n  getAriaValueText?: (value: number, index: number) => string;\n}\n\nexport interface SliderNoMultipleProps extends SliderBaseProps {\n  /** Enables single-thumb mode. */\n  multiple?: false;\n  /** The current value of the slider. */\n  value?: number;\n  /** Default value of the slider. */\n  defaultValue?: number;\n  /** Callback for when the slider value changes. */\n  onChange?: (value: number, event: TouchEvent | ChangeEvent) => void;\n}\n\nexport interface SliderMultipleProps extends SliderBaseProps {\n  /** Enables multiple-thumb mode for range selection. */\n  multiple: true;\n  /** The current value of the slider, expecting a tuple for start and end values. */\n  value?: [number, number];\n  /** Default value of the slider, expecting a tuple for start and end values. */\n  defaultValue?: [number, number];\n  /** Callback for when the slider value changes. */\n  onChange?: (value: [number, number], event: TouchEvent | ChangeEvent) => void;\n}\n\nexport type SliderProps = SliderNoMultipleProps | SliderMultipleProps;\n\n/**\n * Renders a slider input for selecting a value or range from a predefined interval. Supports single or multiple thumbs for range selection.\n * It leverages custom hooks for logic and state management and provides customization options for appearance and functionality.\n */\nexport const Slider = ({ className, disabled, before, after, ...restProps }: SliderProps) => {\n  const platform = usePlatform();\n\n  const {\n    steps,\n    multiple,\n    containerProps,\n    startValueInPercent,\n    endReversedValueInPercent,\n    thumbsContainerRef,\n    thumbStartInputRef,\n    thumbEndInputRef,\n    handlePointerStart,\n    handlePointerMove,\n    handlePointerEnd,\n    getInputProps,\n  } = useSlider(restProps);\n\n  return (\n    <div className={classNames(\n      styles.wrapper,\n      platform === 'ios' && styles['wrapper--ios'],\n      disabled && styles['wrapper--disabled'],\n      className,\n    )}>\n      {hasReactNode(before) && (\n        <div className={styles.before}>\n          {before}\n        </div>\n      )}\n      <Touch\n        {...containerProps}\n        className={styles.slider}\n        onStart={disabled ? undefined : handlePointerStart}\n        onMove={disabled ? undefined : handlePointerMove}\n        onEnd={disabled ? undefined : handlePointerEnd}\n      >\n        <div className={styles.track}>\n          {steps !== undefined && <SliderSteps steps={steps} />}\n        </div>\n        <div\n          className={styles.trackFilled}\n          style={multiple\n            ? { left: `${startValueInPercent}%`, right: `${100 - endReversedValueInPercent}%` }\n            : { width: `${startValueInPercent}%` }\n          }\n        />\n        <div ref={thumbsContainerRef} className={styles.thumbs}>\n          <SliderThumb\n            data-type=\"start\"\n            ref={thumbStartInputRef}\n            style={{\n              left: `${startValueInPercent}%`,\n              zIndex: multiple && startValueInPercent >= 50 ? 3 : undefined,\n            }}\n            inputProps={getInputProps(false)}\n          />\n          {multiple && (\n            <SliderThumb\n              data-type=\"end\"\n              ref={thumbEndInputRef}\n              style={{ left: `${endReversedValueInPercent}%` }}\n              inputProps={getInputProps(true)}\n            />\n          )}\n        </div>\n      </Touch>\n      {hasReactNode(after) && (\n        <div className={styles.after}>\n          {after}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"names":["Slider","className","disabled","before","after","restProps","platform","usePlatform","steps","multiple","containerProps","startValueInPercent","endReversedValueInPercent","thumbsContainerRef","thumbStartInputRef","thumbEndInputRef","handlePointerStart","handlePointerMove","handlePointerEnd","getInputProps","useSlider","div","classNames","hasReactNode","Touch","onStart","undefined","onMove","onEnd","SliderSteps","style","left","right","width","ref","SliderThumb","data-type","zIndex","inputProps"],"mappings":"AAAA;;;;;+BA6DaA;;;eAAAA;;;;;;;4BAxDc;sBACE;6BACD;uBAEW;6BACX;6BACA;2BACF;AAiDnB,MAAMA,SAAS;QAAC,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,EAA6B,WAAxBC;QAAvCJ;QAAWC;QAAUC;QAAQC;;IACpD,MAAME,WAAWC,IAAAA,wBAAW;IAE5B,MAAM,EACJC,KAAK,EACLC,QAAQ,EACRC,cAAc,EACdC,mBAAmB,EACnBC,yBAAyB,EACzBC,kBAAkB,EAClBC,kBAAkB,EAClBC,gBAAgB,EAChBC,kBAAkB,EAClBC,iBAAiB,EACjBC,gBAAgB,EAChBC,aAAa,EACd,GAAGC,IAAAA,oBAAS,EAACf;IAEd,qBACE,sBAACgB;QAAIpB,WAAWqB,IAAAA,sBAAU,2BAExBhB,aAAa,kCACbJ,qCACAD;;YAECsB,IAAAA,kBAAY,EAACpB,yBACZ,qBAACkB;gBAAIpB,SAAS;0BACXE;;0BAGL,sBAACqB,YAAK,8CACAd;gBACJT,SAAS;gBACTwB,SAASvB,WAAWwB,YAAYV;gBAChCW,QAAQzB,WAAWwB,YAAYT;gBAC/BW,OAAO1B,WAAWwB,YAAYR;;kCAE9B,qBAACG;wBAAIpB,SAAS;kCACXO,UAAUkB,2BAAa,qBAACG,wBAAW;4BAACrB,OAAOA;;;kCAE9C,qBAACa;wBACCpB,SAAS;wBACT6B,OAAOrB,WACH;4BAAEsB,MAAM,CAAC,EAAEpB,oBAAoB,CAAC,CAAC;4BAAEqB,OAAO,CAAC,EAAE,MAAMpB,0BAA0B,CAAC,CAAC;wBAAC,IAChF;4BAAEqB,OAAO,CAAC,EAAEtB,oBAAoB,CAAC,CAAC;wBAAC;;kCAGzC,sBAACU;wBAAIa,KAAKrB;wBAAoBZ,SAAS;;0CACrC,qBAACkC,wBAAW;gCACVC,aAAU;gCACVF,KAAKpB;gCACLgB,OAAO;oCACLC,MAAM,CAAC,EAAEpB,oBAAoB,CAAC,CAAC;oCAC/B0B,QAAQ5B,YAAYE,uBAAuB,KAAK,IAAIe;gCACtD;gCACAY,YAAYnB,cAAc;;4BAE3BV,0BACC,qBAAC0B,wBAAW;gCACVC,aAAU;gCACVF,KAAKnB;gCACLe,OAAO;oCAAEC,MAAM,CAAC,EAAEnB,0BAA0B,CAAC,CAAC;gCAAC;gCAC/C0B,YAAYnB,cAAc;;;;;;YAKjCI,IAAAA,kBAAY,EAACnB,wBACZ,qBAACiB;gBAAIpB,SAAS;0BACXG;;;;AAKX"}