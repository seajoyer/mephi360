{"version":3,"sources":["../../../../../src/components/Form/ColorInput/ColorInput.tsx"],"sourcesContent":["'use client';\n\nimport { ChangeEvent, InputHTMLAttributes, useEffect, useState } from 'react';\nimport styles from './ColorInput.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { callMultiple } from 'helpers/function';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { FormInput, FormPublicProps } from 'components/Form/FormInput/FormInput';\nimport { VisuallyHidden } from 'components/Service/VisuallyHidden/VisuallyHidden';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { Text } from 'components/Typography/Text/Text';\n\nexport interface ColorInputProps extends Omit<FormPublicProps, 'after'>, InputHTMLAttributes<HTMLInputElement> {}\n\n/**\n * Renders a color picker input within a form structure, displaying the selected color value.\n * It adapts the text style based on the platform and supports additional properties like header and status.\n */\nexport const ColorInput = ({\n  header,\n  before,\n  status,\n  value: valueProp,\n  defaultValue,\n  className,\n  onChange: onChangeProp,\n  ...restProps\n}: ColorInputProps) => {\n  const platform = usePlatform();\n  const [value, setValue] = useState(valueProp || defaultValue || '#EFEFF4');\n\n  useEffect(() => {\n    if (!valueProp) {\n      return;\n    }\n\n    setValue(valueProp);\n  }, [valueProp]);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const TypographyComponent = platform === 'ios' ? Text : Subheadline;\n  return (\n    <FormInput\n      header={header}\n      before={before}\n      after={(\n        <div className={styles.circle}>\n          <VisuallyHidden\n            Component=\"input\"\n            type=\"color\"\n            value={value}\n            onChange={callMultiple(onChange, onChangeProp)}\n            {...restProps}\n          />\n          <div className={styles.circleColor} style={{ backgroundColor: String(value) }} />\n        </div>\n      )}\n      status={status}\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        className,\n      )}\n    >\n      <TypographyComponent caps className={styles.text}>\n        {value}\n      </TypographyComponent>\n    </FormInput>\n  );\n};\n\n"],"names":["ColorInput","header","before","status","value","valueProp","defaultValue","className","onChange","onChangeProp","restProps","platform","usePlatform","setValue","useState","useEffect","e","target","TypographyComponent","Text","Subheadline","FormInput","after","div","VisuallyHidden","Component","type","callMultiple","style","backgroundColor","String","classNames","caps"],"mappings":"AAAA;;;;;+BAoBaA;;;eAAAA;;;;;;uBAlByD;4BAG3C;0BACE;6BACD;2BAEe;gCACZ;6BACH;sBACP;AAQd,MAAMA,aAAa;QAAC,EACzBC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,OAAOC,SAAS,EAChBC,YAAY,EACZC,SAAS,EACTC,UAAUC,YAAY,EAEN,WADbC;QAPHT;QACAC;QACAC;QACAC;QACAE;QACAC;QACAC;;IAGA,MAAMG,WAAWC,IAAAA,wBAAW;IAC5B,MAAM,CAACR,OAAOS,SAAS,GAAGC,IAAAA,eAAQ,EAACT,aAAaC,gBAAgB;IAEhES,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACV,WAAW;YACd;QACF;QAEAQ,SAASR;IACX,GAAG;QAACA;KAAU;IAEd,MAAMG,WAAW,CAACQ;QAChBH,SAASG,EAAEC,MAAM,CAACb,KAAK;IACzB;IAEA,MAAMc,sBAAsBP,aAAa,QAAQQ,UAAI,GAAGC,wBAAW;IACnE,qBACE,qBAACC,oBAAS;QACRpB,QAAQA;QACRC,QAAQA;QACRoB,qBACE,sBAACC;YAAIhB,SAAS;;8BACZ,qBAACiB,8BAAc;oBACbC,WAAU;oBACVC,MAAK;oBACLtB,OAAOA;oBACPI,UAAUmB,IAAAA,sBAAY,EAACnB,UAAUC;mBAC7BC;8BAEN,qBAACa;oBAAIhB,SAAS;oBAAsBqB,OAAO;wBAAEC,iBAAiBC,OAAO1B;oBAAO;;;;QAGhFD,QAAQA;QACRI,WAAWwB,IAAAA,sBAAU,2BAEnBpB,aAAa,kCACbJ;kBAGF,cAAA,qBAACW;YAAoBc,IAAI;YAACzB,SAAS;sBAChCH;;;AAIT"}