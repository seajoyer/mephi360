{"version":3,"sources":["../../../../../../src/components/Form/Multiselect/hooks/useMultiselect.ts"],"sourcesContent":["'use client';\n\nimport { ChangeEvent, useCallback, useState } from 'react';\n\nimport { isEqual } from 'helpers/equal';\nimport { useEnhancedEffect } from 'hooks/useEnhancedEffect';\n\nimport { MultiselectOption } from 'components/Form/Multiselect/types';\nimport { defaultFilterFn, FilterFn } from './helpers/filter';\nimport { transformOptions } from './helpers/transformOptions';\nimport { DEFAULT_EMPTY_TEXT, DEFAULT_SELECTED_BEHAVIOR } from './constants';\nimport { useMultiselectInput, type UseMultiselectInputProps } from './useMultiselectInput';\n\nexport interface UseMultiselectProps extends UseMultiselectInputProps {\n  /** Array of options available for selection. */\n  options?: MultiselectOption[];\n  /**\n   * Enables the creation of new options that are not in the initial list.\n   * - `true` allows adding by pressing Enter.\n   * - A `string` value also adds a button with the provided text to the dropdown for creating options.\n   */\n  creatable?: boolean | string;\n  /** Text displayed when no options are available or match the filter criteria. */\n  emptyText?: string;\n  /** Determines how selected options are treated: either hidden from the list or highlighted within it. */\n  selectedBehavior?: 'hide' | 'highlight';\n  /** Custom function to filter options based on the input value. */\n  filterFn?: false | FilterFn;\n}\n\n/**\n * Hook to manage the state and interactions of a multiselect component.\n * It encapsulates logic for option selection, input change handling, dropdown visibility, and focused option management.\n */\nexport const useMultiselect = ({\n  // Common props\n  disabled,\n\n  // Options props\n  value: valueProp,\n  defaultValue,\n  onChange,\n\n  // Input props\n  inputValue: inputValueProp = '',\n  onInputChange: onInputChangeProp,\n\n  // Dropdown props\n  creatable = false,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  filterFn = defaultFilterFn,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n  options: optionsProp = [],\n}: UseMultiselectProps) => {\n  const { value, inputValue, onInputChange, ...restMultiselectProps } = useMultiselectInput({\n    // Option props\n    value: valueProp,\n    defaultValue,\n    onChange,\n\n    // Input Props\n    inputValue: inputValueProp,\n    onInputChange: onInputChangeProp,\n\n    // Other Props\n    disabled,\n  });\n\n  const [opened, setOpened] = useState(false);\n  const [options, setOptions] = useState<MultiselectOption[]>(() =>\n    opened\n      ? transformOptions({\n        value,\n        inputValue,\n        emptyText,\n        creatable,\n        filterFn,\n        options: optionsProp,\n        selectedBehavior,\n      })\n      : [],\n  );\n\n  const [focusedOptionIndex, setFocusedOptionIndex] = useState<number | null>(0);\n  const [focusedOption, setFocusedOption] = useState<MultiselectOption | null>(null);\n\n  const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onInputChange(event);\n\n    if (!opened) {\n      return;\n    }\n\n    setOpened(true);\n    setFocusedOptionIndex(0);\n  }, [onInputChange, opened]);\n\n  useEnhancedEffect(() => {\n    if (!opened) {\n      return;\n    }\n\n    setOptions((prevOptions) => {\n      const nextOptions = transformOptions({\n        value,\n        inputValue,\n        emptyText,\n        creatable,\n        filterFn,\n        options: optionsProp,\n        selectedBehavior,\n      });\n\n      if (isEqual(prevOptions, nextOptions)) {\n        return prevOptions;\n      }\n\n      return nextOptions;\n    });\n  }, [\n    opened,\n    value,\n    inputValue,\n    optionsProp,\n    creatable,\n    selectedBehavior,\n    filterFn,\n  ]);\n\n  return {\n    ...restMultiselectProps,\n\n    // Options props\n    value,\n\n    // Input props\n    inputValue,\n    onInputChange: handleInputChange,\n\n    // States for dropdown\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex,\n  };\n};\n"],"names":["useMultiselect","disabled","value","valueProp","defaultValue","onChange","inputValue","inputValueProp","onInputChange","onInputChangeProp","creatable","emptyText","DEFAULT_EMPTY_TEXT","filterFn","defaultFilterFn","selectedBehavior","DEFAULT_SELECTED_BEHAVIOR","options","optionsProp","useMultiselectInput","restMultiselectProps","opened","setOpened","useState","setOptions","transformOptions","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","handleInputChange","useCallback","event","useEnhancedEffect","prevOptions","nextOptions","isEqual"],"mappings":"AAAA;;;;;+BAkCaA;;;eAAAA;;;;;;uBAhCsC;uBAE3B;mCACU;wBAGQ;kCACT;2BAC6B;qCACK;AAuB5D,MAAMA,iBAAiB,CAAC,EAC7B,eAAe;AACfC,QAAQ,EAER,gBAAgB;AAChBC,OAAOC,SAAS,EAChBC,YAAY,EACZC,QAAQ,EAER,cAAc;AACdC,YAAYC,iBAAiB,EAAE,EAC/BC,eAAeC,iBAAiB,EAEhC,iBAAiB;AACjBC,YAAY,KAAK,EACjBC,YAAYC,6BAAkB,EAC9BC,WAAWC,uBAAe,EAC1BC,mBAAmBC,oCAAyB,EAC5CC,SAASC,cAAc,EAAE,EACL;IACpB,MAAsEC,wBAAAA,IAAAA,wCAAmB,EAAC;QACxF,eAAe;QACfjB,OAAOC;QACPC;QACAC;QAEA,cAAc;QACdC,YAAYC;QACZC,eAAeC;QAEf,cAAc;QACdR;IACF,IAZM,EAAEC,KAAK,EAAEI,UAAU,EAAEE,aAAa,EAA2B,GAAGW,uBAAzBC,oDAAyBD;QAA9DjB;QAAOI;QAAYE;;IAc3B,MAAM,CAACa,QAAQC,UAAU,GAAGC,IAAAA,eAAQ,EAAC;IACrC,MAAM,CAACN,SAASO,WAAW,GAAGD,IAAAA,eAAQ,EAAsB,IAC1DF,SACII,IAAAA,kCAAgB,EAAC;YACjBvB;YACAI;YACAK;YACAD;YACAG;YACAI,SAASC;YACTH;QACF,KACE,EAAE;IAGR,MAAM,CAACW,oBAAoBC,sBAAsB,GAAGJ,IAAAA,eAAQ,EAAgB;IAC5E,MAAM,CAACK,eAAeC,iBAAiB,GAAGN,IAAAA,eAAQ,EAA2B;IAE7E,MAAMO,oBAAoBC,IAAAA,kBAAW,EAAC,CAACC;QACrCxB,cAAcwB;QAEd,IAAI,CAACX,QAAQ;YACX;QACF;QAEAC,UAAU;QACVK,sBAAsB;IACxB,GAAG;QAACnB;QAAea;KAAO;IAE1BY,IAAAA,oCAAiB,EAAC;QAChB,IAAI,CAACZ,QAAQ;YACX;QACF;QAEAG,WAAW,CAACU;YACV,MAAMC,cAAcV,IAAAA,kCAAgB,EAAC;gBACnCvB;gBACAI;gBACAK;gBACAD;gBACAG;gBACAI,SAASC;gBACTH;YACF;YAEA,IAAIqB,IAAAA,cAAO,EAACF,aAAaC,cAAc;gBACrC,OAAOD;YACT;YAEA,OAAOC;QACT;IACF,GAAG;QACDd;QACAnB;QACAI;QACAY;QACAR;QACAK;QACAF;KACD;IAED,OAAO,4CACFO;QAEH,gBAAgB;QAChBlB;QAEA,cAAc;QACdI;QACAE,eAAesB;QAEf,sBAAsB;QACtBb;QACAI;QACAC;QACAM;QACAF;QACAG;QACAF;;AAEJ"}