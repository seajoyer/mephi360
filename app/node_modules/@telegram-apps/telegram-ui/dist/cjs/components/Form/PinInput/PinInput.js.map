{"version":3,"sources":["../../../../../src/components/Form/PinInput/PinInput.tsx"],"sourcesContent":["import { forwardRef, HTMLAttributes, ReactNode } from 'react';\nimport styles from './PinInput.module.css';\n\nimport { Keys } from 'helpers/accessibility';\nimport { createChunks } from 'helpers/chunk';\nimport { classNames } from 'helpers/classNames';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Icon36Backspace } from 'icons/36/backspace';\n\nimport { PinInputButton } from 'components/Form/PinInput/components/PinInputButton/PinInputButton';\nimport { RootRenderer } from 'components/Service/RootRenderer/RootRenderer';\nimport { Headline } from 'components/Typography/Headline/Headline';\nimport { PinInputCell } from './components/PinInputCell/PinInputCell';\nimport { AVAILABLE_PINS, usePinInput } from './hooks/usePinInput';\n\nexport interface PinInputProps extends Omit<HTMLAttributes<HTMLElement>, 'onChange'> {\n  /** Text label displayed above the pin input cells. */\n  label?: string;\n  /** The number of pin input fields to display, with a minimum of 2. */\n  pinCount?: number;\n  /** The initial pin values to populate the input fields with. */\n  value?: number[];\n  /** Callback function triggered when the pin values change. */\n  onChange?: (value: number[]) => void;\n}\n\nconst PIN_MIN_COUNT = 2;\n\n/**\n * Renders a set of input fields for entering pin codes with a virtual keypad for value entry and deletion.\n */\nexport const PinInput = forwardRef<HTMLElement, PinInputProps>(({\n  label = 'Enter your pin',\n  pinCount = 4,\n  className,\n  value: valueProp = [],\n  onChange,\n  ...restProps\n}, ref) => {\n  const platform = usePlatform();\n  const normalizedPinCount = Math.max(PIN_MIN_COUNT, pinCount);\n\n  const {\n    handleClickValue,\n    handleClickBackspace,\n    setInputRefByIndex,\n    value,\n    handleButton,\n  } = usePinInput({\n    value: valueProp,\n    onChange,\n    pinCount: normalizedPinCount,\n  });\n\n  return (\n    <RootRenderer>\n      <section\n        ref={ref}\n        className={classNames(\n          styles.wrapper,\n          platform === 'ios' && styles['wrapper--ios'],\n          className,\n        )}\n        {...restProps}\n      >\n        <header className={styles.header}>\n          <Headline className={styles.title} weight=\"2\">{label}</Headline>\n          <div className={styles.cellsWrapper}>\n            {Array.from({ length: normalizedPinCount }).map((_, index) => (\n              <PinInputCell\n                /* We can't use useId here, because if pinCount changes in runtime, it will crash because amount of renders will be different */\n                /* eslint-disable-next-line react/no-array-index-key */\n                key={index}\n                ref={(labelRef) => setInputRefByIndex(index, labelRef)}\n                isTyped={index < value.length}\n                value={value[index] || ''}\n                onKeyDown={(event) => handleButton(index, event.key)}\n                autoFocus={index === 0}\n                tabIndex={-1}\n                readOnly\n              />\n            ))}\n          </div>\n        </header>\n        <div className={styles.buttonWrapper}>\n          {createChunks(AVAILABLE_PINS, 3).map((rows) => (\n            <div key={rows.toString()} className={styles.row}>\n              {rows.map((element) => {\n                let children: ReactNode = element;\n                let clickFunction = () => handleClickValue(Number(element));\n\n                if (element === Keys.BACKSPACE) {\n                  clickFunction = () => handleClickBackspace();\n                  children = <Icon36Backspace className={styles.backspaceIcon} />;\n                }\n\n                return (\n                  <PinInputButton key={element} onClick={clickFunction}>\n                    {children}\n                  </PinInputButton>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </section>\n    </RootRenderer>\n  );\n});\n"],"names":["PinInput","PIN_MIN_COUNT","forwardRef","ref","label","pinCount","className","value","valueProp","onChange","restProps","platform","usePlatform","normalizedPinCount","Math","max","handleClickValue","handleClickBackspace","setInputRefByIndex","handleButton","usePinInput","RootRenderer","section","classNames","header","Headline","weight","div","Array","from","length","map","_","index","PinInputCell","labelRef","isTyped","onKeyDown","event","key","autoFocus","tabIndex","readOnly","createChunks","AVAILABLE_PINS","rows","element","children","clickFunction","Number","Keys","BACKSPACE","Icon36Backspace","PinInputButton","onClick","toString"],"mappings":";;;;+BAgCaA;;;eAAAA;;;;;;;uBAhCyC;+BAGjC;uBACQ;4BACF;6BACC;2BAEI;gCAED;8BACF;0BACJ;8BACI;6BACe;AAa5C,MAAMC,gBAAgB;AAKf,MAAMD,yBAAWE,IAAAA,iBAAU,EAA6B,SAO5DC;QAP6D,EAC9DC,QAAQ,gBAAgB,EACxBC,WAAW,CAAC,EACZC,SAAS,EACTC,OAAOC,YAAY,EAAE,EACrBC,QAAQ,EAET,WADIC;QALHN;QACAC;QACAC;QACAC;QACAE;;IAGA,MAAME,WAAWC,IAAAA,wBAAW;IAC5B,MAAMC,qBAAqBC,KAAKC,GAAG,CAACd,eAAeI;IAEnD,MAAM,EACJW,gBAAgB,EAChBC,oBAAoB,EACpBC,kBAAkB,EAClBX,KAAK,EACLY,YAAY,EACb,GAAGC,IAAAA,wBAAW,EAAC;QACdb,OAAOC;QACPC;QACAJ,UAAUQ;IACZ;IAEA,qBACE,qBAACQ,0BAAY;kBACX,cAAA,sBAACC;YACCnB,KAAKA;YACLG,WAAWiB,IAAAA,sBAAU,2BAEnBZ,aAAa,kCACbL;WAEEI;;8BAEJ,sBAACc;oBAAOlB,SAAS;;sCACf,qBAACmB,kBAAQ;4BAACnB,SAAS;4BAAgBoB,QAAO;sCAAKtB;;sCAC/C,qBAACuB;4BAAIrB,SAAS;sCACXsB,MAAMC,IAAI,CAAC;gCAAEC,QAAQjB;4BAAmB,GAAGkB,GAAG,CAAC,CAACC,GAAGC,sBAClD,qBAACC,0BAAY;oCAIX/B,KAAK,CAACgC,WAAajB,mBAAmBe,OAAOE;oCAC7CC,SAASH,QAAQ1B,MAAMuB,MAAM;oCAC7BvB,OAAOA,KAAK,CAAC0B,MAAM,IAAI;oCACvBI,WAAW,CAACC,QAAUnB,aAAac,OAAOK,MAAMC,GAAG;oCACnDC,WAAWP,UAAU;oCACrBQ,UAAU,CAAC;oCACXC,QAAQ;mCAPHT;;;;8BAYb,qBAACN;oBAAIrB,SAAS;8BACXqC,IAAAA,mBAAY,EAACC,2BAAc,EAAE,GAAGb,GAAG,CAAC,CAACc,qBACpC,qBAAClB;4BAA0BrB,SAAS;sCACjCuC,KAAKd,GAAG,CAAC,CAACe;gCACT,IAAIC,WAAsBD;gCAC1B,IAAIE,gBAAgB,IAAMhC,iBAAiBiC,OAAOH;gCAElD,IAAIA,YAAYI,mBAAI,CAACC,SAAS,EAAE;oCAC9BH,gBAAgB,IAAM/B;oCACtB8B,yBAAW,qBAACK,0BAAe;wCAAC9C,SAAS;;gCACvC;gCAEA,qBACE,qBAAC+C,8BAAc;oCAAeC,SAASN;8CACpCD;mCADkBD;4BAIzB;2BAfQD,KAAKU,QAAQ;;;;;AAsBnC"}