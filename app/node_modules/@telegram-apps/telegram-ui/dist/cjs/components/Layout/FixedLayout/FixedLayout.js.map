{"version":3,"sources":["../../../../../src/components/Layout/FixedLayout/FixedLayout.tsx"],"sourcesContent":["import { AllHTMLAttributes, ElementType } from 'react';\nimport styles from './FixedLayout.module.css';\n\nimport { classNames } from 'helpers/classNames';\n\nexport interface FixedLayoutProps extends AllHTMLAttributes<HTMLElement> {\n  /** The component type to render, allowing for semantic HTML use. Defaults to 'div'. */\n  Component?: ElementType;\n  /** Determines the vertical positioning of the layout within its container. Options are 'top' or 'bottom'. */\n  vertical?: 'top' | 'bottom';\n}\n\nconst verticalStyles = {\n  top: styles['wrapper--top'],\n  bottom: styles['wrapper--bottom'],\n};\n\n/**\n * This component provides a flexible way to create a layout that is fixed to either the top or bottom of its parent container.\n * It's useful for creating headers, footers, or any element that should remain in view regardless of the scrolling content.\n */\nexport const FixedLayout = ({\n  Component = 'div',\n  vertical = 'bottom',\n  className,\n  children,\n  ...restProps\n}: FixedLayoutProps) => {\n  return (\n    <Component\n      className={classNames(\n        styles.wrapper,\n        vertical && verticalStyles[vertical],\n        className,\n      )}\n      {...restProps}\n    >\n      {children}\n    </Component>\n  );\n};\n\n"],"names":["FixedLayout","verticalStyles","top","bottom","Component","vertical","className","children","restProps","classNames"],"mappings":";;;;+BAqBaA;;;eAAAA;;;;;;;4BAlBc;AAS3B,MAAMC,iBAAiB;IACrBC,GAAG;IACHC,MAAM;AACR;AAMO,MAAMH,cAAc;QAAC,EAC1BI,YAAY,KAAK,EACjBC,WAAW,QAAQ,EACnBC,SAAS,EACTC,QAAQ,EAES,WADdC;QAJHJ;QACAC;QACAC;QACAC;;IAGA,qBACE,qBAACH;QACCE,WAAWG,IAAAA,sBAAU,2BAEnBJ,YAAYJ,cAAc,CAACI,SAAS,EACpCC;OAEEE;kBAEHD;;AAGP"}