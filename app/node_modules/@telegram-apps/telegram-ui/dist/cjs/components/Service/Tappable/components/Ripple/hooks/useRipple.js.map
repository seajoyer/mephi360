{"version":3,"sources":["../../../../../../../../src/components/Service/Tappable/components/Ripple/hooks/useRipple.ts"],"sourcesContent":["'use client';\n\nimport { PointerEventHandler, useMemo, useState } from 'react';\n\nimport { useTimeout } from 'hooks/useTimeout';\n\nimport { Wave } from '../types/Wave';\n\nconst RIPPLE_DELAY = 70;\nconst WAVE_LIVE = 225;\n\nexport const useRipple = () => {\n  const [clicks, setClicks] = useState<Wave[]>([]);\n\n  const pointerDelayTimers = useMemo(\n    () => new Map<number, ReturnType<typeof setTimeout>>(),\n    [],\n  );\n\n  const clearClicks = useTimeout(() => setClicks([]), WAVE_LIVE);\n\n  function addClick(x: number, y: number, pointerId: number) {\n    const dateNow = Date.now();\n    const filteredClicks = clicks.filter((click) => click.date + WAVE_LIVE > dateNow);\n\n    setClicks([\n      ...filteredClicks,\n      {\n        x,\n        y,\n        date: dateNow,\n        pointerId,\n      },\n    ]);\n\n    clearClicks.set();\n    pointerDelayTimers.delete(pointerId);\n  }\n\n  const onPointerDown: PointerEventHandler<HTMLSpanElement> = (e) => {\n    const { top, left } = e.currentTarget.getBoundingClientRect();\n    const x = e.clientX - (left ?? 0);\n    const y = e.clientY - (top ?? 0);\n\n    pointerDelayTimers.set(\n      e.pointerId,\n      setTimeout(() => addClick(x, y, e.pointerId), RIPPLE_DELAY),\n    );\n  };\n\n  const onPointerCancel: PointerEventHandler<HTMLSpanElement> = (e) => {\n    const timer = pointerDelayTimers.get(e.pointerId);\n    clearTimeout(timer);\n    pointerDelayTimers.delete(e.pointerId);\n  };\n\n  return {\n    clicks,\n    onPointerDown,\n    onPointerCancel,\n  };\n};\n"],"names":["useRipple","RIPPLE_DELAY","WAVE_LIVE","clicks","setClicks","useState","pointerDelayTimers","useMemo","Map","clearClicks","useTimeout","addClick","x","y","pointerId","dateNow","Date","now","filteredClicks","filter","click","date","set","delete","onPointerDown","e","top","left","currentTarget","getBoundingClientRect","clientX","clientY","setTimeout","onPointerCancel","timer","get","clearTimeout"],"mappings":"AAAA;;;;;+BAWaA;;;eAAAA;;;uBAT0C;4BAE5B;AAI3B,MAAMC,eAAe;AACrB,MAAMC,YAAY;AAEX,MAAMF,YAAY;IACvB,MAAM,CAACG,QAAQC,UAAU,GAAGC,IAAAA,eAAQ,EAAS,EAAE;IAE/C,MAAMC,qBAAqBC,IAAAA,cAAO,EAChC,IAAM,IAAIC,OACV,EAAE;IAGJ,MAAMC,cAAcC,IAAAA,sBAAU,EAAC,IAAMN,UAAU,EAAE,GAAGF;IAEpD,SAASS,SAASC,CAAS,EAAEC,CAAS,EAAEC,SAAiB;QACvD,MAAMC,UAAUC,KAAKC,GAAG;QACxB,MAAMC,iBAAiBf,OAAOgB,MAAM,CAAC,CAACC,QAAUA,MAAMC,IAAI,GAAGnB,YAAYa;QAEzEX,UAAU;eACLc;YACH;gBACEN;gBACAC;gBACAQ,MAAMN;gBACND;YACF;SACD;QAEDL,YAAYa,GAAG;QACfhB,mBAAmBiB,MAAM,CAACT;IAC5B;IAEA,MAAMU,gBAAsD,CAACC;QAC3D,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE,GAAGF,EAAEG,aAAa,CAACC,qBAAqB;QAC3D,MAAMjB,IAAIa,EAAEK,OAAO,GAAIH,CAAAA,iBAAAA,kBAAAA,OAAQ,CAAA;QAC/B,MAAMd,IAAIY,EAAEM,OAAO,GAAIL,CAAAA,gBAAAA,iBAAAA,MAAO,CAAA;QAE9BpB,mBAAmBgB,GAAG,CACpBG,EAAEX,SAAS,EACXkB,WAAW,IAAMrB,SAASC,GAAGC,GAAGY,EAAEX,SAAS,GAAGb;IAElD;IAEA,MAAMgC,kBAAwD,CAACR;QAC7D,MAAMS,QAAQ5B,mBAAmB6B,GAAG,CAACV,EAAEX,SAAS;QAChDsB,aAAaF;QACb5B,mBAAmBiB,MAAM,CAACE,EAAEX,SAAS;IACvC;IAEA,OAAO;QACLX;QACAqB;QACAS;IACF;AACF"}