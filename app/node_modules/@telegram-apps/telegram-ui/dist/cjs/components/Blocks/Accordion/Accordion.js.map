{"version":3,"sources":["../../../../../src/components/Blocks/Accordion/Accordion.tsx"],"sourcesContent":["'use client';\n\nimport { ReactNode } from 'react';\n\nimport { useObjectMemo } from 'hooks/useObjectMemo';\n\nimport { AccordionContent } from './components/AccordionContent/AccordionContent';\nimport { AccordionSummary } from './components/AccordionSummary/AccordionSummary';\nimport { useAccordionId } from './hooks/useAccordionId';\nimport { AccordionContext } from './AccordionContext';\n\nexport interface AccordionProps {\n  /**\n   * Optional ID for the accordion element, enhancing accessibility (a11y) by associating the accordion\n   * summary and content. If not provided, a unique ID will be generated automatically.\n   * This ID is crucial for screen readers and other assistive technologies to understand the\n   * relationship between the accordion header and content.\n   */\n  id?: string;\n  /** Determines whether the accordion is currently expanded or collapsed. */\n  expanded: boolean;\n  /** Callback function that is called when the accordion's state changes, such as when it is opened or closed. */\n  onChange: (expanded: boolean) => void;\n  /**\n   * Children of the Accordion component. Pass `Accordion.Summary` and\n   * `Accordion.Content` as children to create a functional accordion structure.\n   */\n  children: ReactNode;\n}\n\n/**\n * This component serves as a container for an accordion item, comprising a summary and\n * content sections. It uses the Context API to manage its state and to allow its children\n * (`Accordion.Summary` and `Accordion.Content`) to access shared state and callbacks.\n */\nexport const Accordion = ({\n  id,\n  expanded,\n  onChange,\n  children,\n}: AccordionProps) => {\n  const { labelId, contentId } = useAccordionId(id);\n\n  const context = useObjectMemo({\n    labelId,\n    contentId,\n    expanded,\n    onChange,\n  });\n\n  return <AccordionContext.Provider value={context}>{children}</AccordionContext.Provider>;\n};\n\nAccordion.Summary = AccordionSummary;\nAccordion.Content = AccordionContent;\n"],"names":["Accordion","id","expanded","onChange","children","labelId","contentId","useAccordionId","context","useObjectMemo","AccordionContext","Provider","value","Summary","AccordionSummary","Content","AccordionContent"],"mappings":"AAAA;;;;;+BAmCaA;;;eAAAA;;;;+BA/BiB;kCAEG;kCACA;gCACF;kCACE;AA0B1B,MAAMA,YAAY,CAAC,EACxBC,EAAE,EACFC,QAAQ,EACRC,QAAQ,EACRC,QAAQ,EACO;IACf,MAAM,EAAEC,OAAO,EAAEC,SAAS,EAAE,GAAGC,IAAAA,8BAAc,EAACN;IAE9C,MAAMO,UAAUC,IAAAA,4BAAa,EAAC;QAC5BJ;QACAC;QACAJ;QACAC;IACF;IAEA,qBAAO,qBAACO,kCAAgB,CAACC,QAAQ;QAACC,OAAOJ;kBAAUJ;;AACrD;AAEAJ,UAAUa,OAAO,GAAGC,kCAAgB;AACpCd,UAAUe,OAAO,GAAGC,kCAAgB"}