{"version":3,"sources":["../../../../../../../src/components/Blocks/Cell/components/ButtonCell/ButtonCell.tsx"],"sourcesContent":["'use client';\n\nimport { ElementType, forwardRef, ReactNode } from 'react';\nimport styles from './ButtonCell.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Tappable, TappableProps } from 'components/Service/Tappable/Tappable';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { Text } from 'components/Typography/Text/Text';\n\nexport interface ButtonCellProps extends Omit<TappableProps, 'Component'> {\n  /** Determines the button cell's visual theme, influencing color and style. */\n  mode?: 'default' | 'destructive';\n  /** Element or component displayed before the main content, adding visual context or functionality. */\n  before?: ReactNode;\n  /** Element or component displayed after the main content, typically indicating a possible action or outcome. */\n  after?: ReactNode;\n  /** Specifies the root element type for more semantic HTML structure or integration with navigation libraries. */\n  Component?: ElementType;\n  /** The content within the button cell, usually text. */\n  children?: ReactNode;\n}\n\n/**\n * Renders an interactive cell component with optional leading and trailing elements. Designed to be flexible,\n * supporting various content structures and interaction models within UI designs.\n */\nexport const ButtonCell = forwardRef(({\n  mode = 'default',\n  before,\n  after,\n  className,\n  children,\n  Component,\n  ...restProps\n}: ButtonCellProps, ref) => {\n  const platform = usePlatform();\n  const Typography = platform === 'ios' ? Subheadline : Text;\n\n  return (\n    <Tappable\n      ref={ref}\n      Component={Component || 'button'}\n      className={classNames(\n        styles.wrapper,\n        mode === 'destructive' && styles['wrapper--destructive'],\n        platform === 'ios' && styles['wrapper--ios'],\n        className,\n      )}\n      {...restProps}\n    >\n      {hasReactNode(before) && before}\n      {hasReactNode(children) && <Typography>{children}</Typography>}\n      {hasReactNode(after) && after}\n    </Tappable>\n  );\n});\n"],"names":["ButtonCell","forwardRef","ref","mode","before","after","className","children","Component","restProps","platform","usePlatform","Typography","Subheadline","Text","Tappable","classNames","hasReactNode"],"mappings":"AAAA;;;;;+BA8BaA;;;eAAAA;;;;;;;uBA5BsC;4BAGxB;sBACE;6BACD;0BAEY;6BACZ;sBACP;AAmBd,MAAMA,2BAAaC,IAAAA,iBAAU,EAAC,SAQjBC;QARkB,EACpCC,OAAO,SAAS,EAChBC,MAAM,EACNC,KAAK,EACLC,SAAS,EACTC,QAAQ,EACRC,SAAS,EAEO,WADbC;QANHN;QACAC;QACAC;QACAC;QACAC;QACAC;;IAGA,MAAME,WAAWC,IAAAA,wBAAW;IAC5B,MAAMC,aAAaF,aAAa,QAAQG,wBAAW,GAAGC,UAAI;IAE1D,qBACE,sBAACC,kBAAQ;QACPb,KAAKA;QACLM,WAAWA,aAAa;QACxBF,WAAWU,IAAAA,sBAAU,2BAEnBb,SAAS,0CACTO,aAAa,kCACbJ;OAEEG;;YAEHQ,IAAAA,kBAAY,EAACb,WAAWA;YACxBa,IAAAA,kBAAY,EAACV,2BAAa,qBAACK;0BAAYL;;YACvCU,IAAAA,kBAAY,EAACZ,UAAUA;;;AAG9B"}