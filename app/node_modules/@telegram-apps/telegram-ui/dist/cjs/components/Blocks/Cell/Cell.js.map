{"version":3,"sources":["../../../../../src/components/Blocks/Cell/Cell.tsx"],"sourcesContent":["'use client';\n\nimport { ElementType, forwardRef, ReactElement, ReactNode } from 'react';\nimport styles from './Cell.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { BadgeProps } from 'components/Blocks/Badge/Badge';\nimport { Tappable, TappableProps } from 'components/Service/Tappable/Tappable';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { useTypographyCellComponents } from './hooks/useTypographyCellComponents';\n\nexport interface CellProps extends Omit<TappableProps, 'Component'> {\n  /** Content displayed above the main content as a subheading */\n  subhead?: ReactNode;\n  /** Main content displayed as a header */\n  children?: ReactNode;\n  /** Content displayed alongside the header as a hint */\n  hint?: ReactNode;\n  /** A badge component to be displayed next to the header */\n  titleBadge?: ReactElement<BadgeProps>;\n  /** Content displayed below the header as a subtitle */\n  subtitle?: ReactNode;\n  /** Additional description displayed below the subtitle */\n  description?: ReactNode;\n  /** Content or elements to be displayed on the left side of the cell */\n  before?: ReactNode;\n  /** Content or elements to be displayed on the right side of the cell */\n  after?: ReactNode;\n  /** Custom component or HTML tag to be used as the root element of the cell, div by default */\n  Component?: ElementType;\n  /** Controls the hover state of the component externally, useful for keyboard navigation */\n  hovered?: boolean;\n  /** Allows for multiline content without truncation */\n  multiline?: boolean;\n}\n\n/**\n * `Cell` component acts as a flexible and interactive container for various types of content,\n * enabling the creation of complex list items, form fields, and more. It leverages the `Tappable`\n * component for interaction and is designed to be flexible and extensible.\n */\nexport const Cell = forwardRef(({\n  children,\n  titleBadge,\n  hint,\n  subhead,\n  subtitle,\n  description,\n  className,\n  before,\n  after,\n  Component,\n  hovered,\n  multiline,\n  ...restProps\n}: CellProps, ref) => {\n  const platform = usePlatform();\n  const { Title, Description } = useTypographyCellComponents();\n\n  const hasTitle = hasReactNode(children) || hasReactNode(hint) || hasReactNode(titleBadge);\n  return (\n    <Tappable\n      ref={ref}\n      Component={Component || 'div'}\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        hovered && styles['wrapper--hovered'],\n        multiline && styles['wrapper--multiline'],\n        className,\n      )}\n      {...restProps}\n    >\n      {hasReactNode(before) && <div className={styles.before}>{before}</div>}\n      <div className={styles.middle}>\n        {hasReactNode(subhead) && (\n          <Subheadline className={styles.subhead} level=\"2\" weight=\"3\">\n            {subhead}\n          </Subheadline>\n        )}\n        {hasTitle && (\n          <Title className={styles.head}>\n            {hasReactNode(children) && <span className={styles.title}>{children}</span>}\n            {hasReactNode(hint) && <span className={styles.hint}>{hint}</span>}\n            {hasReactNode(titleBadge) && titleBadge}\n          </Title>\n        )}\n        {hasReactNode(subtitle) && (\n          <Subheadline className={styles.subtitle} level=\"2\" weight=\"3\">\n            {subtitle}\n          </Subheadline>\n        )}\n        {hasReactNode(description) && (\n          <Description className={styles.description}>\n            {description}\n          </Description>\n        )}\n      </div>\n      {hasReactNode(after) && <div className={styles.after}>{after}</div>}\n    </Tappable>\n  );\n});\n"],"names":["Cell","forwardRef","ref","children","titleBadge","hint","subhead","subtitle","description","className","before","after","Component","hovered","multiline","restProps","platform","usePlatform","Title","Description","useTypographyCellComponents","hasTitle","hasReactNode","Tappable","classNames","div","Subheadline","level","weight","span"],"mappings":"AAAA;;;;;+BA4CaA;;;eAAAA;;;;;;;uBA1CoD;4BAGtC;sBACE;6BACD;0BAGY;6BACZ;6CACgB;AAgCrC,MAAMA,qBAAOC,IAAAA,iBAAU,EAAC,SAcjBC;QAdkB,EAC9BC,QAAQ,EACRC,UAAU,EACVC,IAAI,EACJC,OAAO,EACPC,QAAQ,EACRC,WAAW,EACXC,SAAS,EACTC,MAAM,EACNC,KAAK,EACLC,SAAS,EACTC,OAAO,EACPC,SAAS,EAEC,WADPC;QAZHZ;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;;IAGA,MAAME,WAAWC,IAAAA,wBAAW;IAC5B,MAAM,EAAEC,KAAK,EAAEC,WAAW,EAAE,GAAGC,IAAAA,wDAA2B;IAE1D,MAAMC,WAAWC,IAAAA,kBAAY,EAACnB,aAAamB,IAAAA,kBAAY,EAACjB,SAASiB,IAAAA,kBAAY,EAAClB;IAC9E,qBACE,sBAACmB,kBAAQ;QACPrB,KAAKA;QACLU,WAAWA,aAAa;QACxBH,WAAWe,IAAAA,sBAAU,2BAEnBR,aAAa,kCACbH,oCACAC,sCACAL;OAEEM;;YAEHO,IAAAA,kBAAY,EAACZ,yBAAW,qBAACe;gBAAIhB,SAAS;0BAAkBC;;0BACzD,sBAACe;gBAAIhB,SAAS;;oBACXa,IAAAA,kBAAY,EAAChB,0BACZ,qBAACoB,wBAAW;wBAACjB,SAAS;wBAAkBkB,OAAM;wBAAIC,QAAO;kCACtDtB;;oBAGJe,0BACC,sBAACH;wBAAMT,SAAS;;4BACba,IAAAA,kBAAY,EAACnB,2BAAa,qBAAC0B;gCAAKpB,SAAS;0CAAiBN;;4BAC1DmB,IAAAA,kBAAY,EAACjB,uBAAS,qBAACwB;gCAAKpB,SAAS;0CAAgBJ;;4BACrDiB,IAAAA,kBAAY,EAAClB,eAAeA;;;oBAGhCkB,IAAAA,kBAAY,EAACf,2BACZ,qBAACmB,wBAAW;wBAACjB,SAAS;wBAAmBkB,OAAM;wBAAIC,QAAO;kCACvDrB;;oBAGJe,IAAAA,kBAAY,EAACd,8BACZ,qBAACW;wBAAYV,SAAS;kCACnBD;;;;YAINc,IAAAA,kBAAY,EAACX,wBAAU,qBAACc;gBAAIhB,SAAS;0BAAiBE;;;;AAG7D"}