{"version":3,"sources":["../../../../../src/components/Blocks/Button/Button.tsx"],"sourcesContent":["'use client';\n\nimport { AllHTMLAttributes, ElementType, forwardRef, ReactNode } from 'react';\nimport styles from './Button.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Spinner } from 'components/Feedback/Spinner/Spinner';\nimport { Tappable } from 'components/Service/Tappable/Tappable';\nimport { ButtonTypography } from './components/ButtonTypography/ButtonTypography';\n\nexport interface ButtonProps extends Omit<AllHTMLAttributes<HTMLButtonElement>, 'size'> {\n  /** Inserts a component before the button text, typically an icon. */\n  before?: ReactNode;\n  /** Inserts a component after the button text, such as a badge or indicator. */\n  after?: ReactNode;\n  /** Controls the size of the button, influencing padding and font size. */\n  size?: 's' | 'm' | 'l';\n  /** If true, stretches the button to fill the width with its container. */\n  stretched?: boolean;\n  /** Defines the button's visual style, affecting its background and text color. */\n  mode?: 'filled' | 'bezeled' | 'plain' | 'gray' | 'outline' | 'white';\n  /** Displays a loading indicator in place of the button content when true. */\n  loading?: boolean;\n  /** Disables the button, preventing user interactions, when true. */\n  disabled?: boolean;\n  /** Specifies the root element type for the button, allowing for semantic customization or integration with routing libraries. */\n  Component?: ElementType;\n}\n\nconst modeStyles = {\n  filled: styles['wrapper--filled'],\n  bezeled: styles['wrapper--bezeled'],\n  plain: styles['wrapper--plain'],\n  gray: styles['wrapper--gray'],\n  outline: styles['wrapper--outline'],\n  white: styles['wrapper--white'],\n};\n\nconst sizeStyles = {\n  s: styles['wrapper--s'],\n  m: styles['wrapper--m'],\n  l: styles['wrapper--l'],\n};\n\n/**\n * Renders a button or a button-like element with customizable properties, such as size, mode, and loading state. Supports adding icons or other elements before and after the text.\n */\nexport const Button = forwardRef(({\n  type,\n  size = 'm',\n  before,\n  after,\n  stretched,\n  children,\n  className,\n  mode = 'filled',\n  loading,\n  Component = 'button',\n  ...restProps\n}: ButtonProps, ref) => {\n  const platform = usePlatform();\n\n  return (\n    <Tappable\n      ref={ref}\n      type={type || 'button'}\n      Component={Component}\n      className={classNames(\n        styles.wrapper,\n        mode && modeStyles[mode],\n        size && sizeStyles[size],\n        platform === 'ios' && styles['wrapper--ios'],\n        stretched && styles['wrapper--stretched'],\n        loading && styles['wrapper--loading'],\n        className,\n      )}\n      {...restProps}\n    >\n      {loading && <Spinner className={styles.spinner} size=\"s\" />}\n      {hasReactNode(before) && (\n        <div className={styles.before}>\n          {before}\n        </div>\n      )}\n      <ButtonTypography className={styles.content} size={size}>{children}</ButtonTypography>\n      {hasReactNode(after) && (\n        <div className={styles.after}>\n          {after}\n        </div>\n      )}\n    </Tappable>\n  );\n});\n"],"names":["Button","modeStyles","filled","bezeled","plain","gray","outline","white","sizeStyles","s","m","l","forwardRef","ref","type","size","before","after","stretched","children","className","mode","loading","Component","restProps","platform","usePlatform","Tappable","classNames","Spinner","hasReactNode","div","ButtonTypography"],"mappings":"AAAA;;;;;+BAkDaA;;;eAAAA;;;;;;;uBAhDyD;4BAG3C;sBACE;6BACD;yBAEJ;0BACC;kCACQ;AAqBjC,MAAMC,aAAa;IACjBC,MAAM;IACNC,OAAO;IACPC,KAAK;IACLC,IAAI;IACJC,OAAO;IACPC,KAAK;AACP;AAEA,MAAMC,aAAa;IACjBC,CAAC;IACDC,CAAC;IACDC,CAAC;AACH;AAKO,MAAMX,uBAASY,IAAAA,iBAAU,EAAC,SAYjBC;QAZkB,EAChCC,IAAI,EACJC,OAAO,GAAG,EACVC,MAAM,EACNC,KAAK,EACLC,SAAS,EACTC,QAAQ,EACRC,SAAS,EACTC,OAAO,QAAQ,EACfC,OAAO,EACPC,YAAY,QAAQ,EAER,WADTC;QAVHV;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;;IAGA,MAAME,WAAWC,IAAAA,wBAAW;IAE5B,qBACE,sBAACC,kBAAQ;QACPd,KAAKA;QACLC,MAAMA,QAAQ;QACdS,WAAWA;QACXH,WAAWQ,IAAAA,sBAAU,2BAEnBP,QAAQpB,UAAU,CAACoB,KAAK,EACxBN,QAAQP,UAAU,CAACO,KAAK,EACxBU,aAAa,kCACbP,sCACAI,oCACAF;OAEEI;;YAEHF,yBAAW,qBAACO,gBAAO;gBAACT,SAAS;gBAAkBL,MAAK;;YACpDe,IAAAA,kBAAY,EAACd,yBACZ,qBAACe;gBAAIX,SAAS;0BACXJ;;0BAGL,qBAACgB,kCAAgB;gBAACZ,SAAS;gBAAkBL,MAAMA;0BAAOI;;YACzDW,IAAAA,kBAAY,EAACb,wBACZ,qBAACc;gBAAIX,SAAS;0BACXH;;;;AAKX"}