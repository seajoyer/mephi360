{"version":3,"sources":["../../../src/hooks/useEventListener.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport { canUseDOM } from 'helpers/dom';\n\nimport { useEnhancedEffect } from './useEnhancedEffect';\n\ninterface EventListenerHandle {\n  add: (el: HTMLElement | Document | Window) => void;\n  remove: () => void;\n}\n\nexport function useEventListener<K extends keyof GlobalEventHandlersEventMap>(\n  event: K,\n  _cb: false | null | undefined | ((ev: GlobalEventHandlersEventMap[K]) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle;\n\nexport function useEventListener<E extends Event>(\n  event: string,\n  _cb: false | null | undefined | ((ev: E) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle;\n/**\n * Custom React hook for handling event listeners in a declarative way.\n * Copied from https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/hooks/useEventListener.ts\n * */\nexport function useEventListener<E extends Event, K extends keyof GlobalEventHandlersEventMap>(\n  event: string | K,\n  _cb: false | null | undefined | ((ev: E) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle {\n  const cbRef = useRef(_cb);\n\n  useEnhancedEffect(() => {\n    cbRef.current = _cb;\n  }, [_cb]);\n\n  // Callback function to be executed when the event occurs\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  const cb = useCallback((e: any) => cbRef.current && cbRef.current(e), []);\n\n  // Refs to store the detach and remove functions\n  const detach = useRef(() => {});\n  const remove = useCallback(() => {\n    detach.current();\n    detach.current = () => {};\n  }, []);\n\n  const add = useCallback(\n    (el: HTMLElement | Document | Window) => {\n      if (!canUseDOM) {\n        return;\n      }\n\n      remove();\n      if (!el) {\n        return;\n      }\n\n      const options = { ..._options };\n      el.addEventListener(event, cb, options);\n      detach.current = () => el.removeEventListener(event, cb, options);\n    },\n    [_options, cb, event, remove],\n  );\n\n  useEffect(() => remove, [remove]);\n  return useMemo(() => ({ add, remove }), [add, remove]);\n}\n"],"names":["useEventListener","event","_cb","_options","cbRef","useRef","useEnhancedEffect","current","cb","useCallback","e","detach","remove","add","el","canUseDOM","options","addEventListener","removeEventListener","useEffect","useMemo"],"mappings":"AAAA;;;;;+BA4BgBA;;;eAAAA;;;;uBA1BwC;qBAE9B;mCAEQ;AAsB3B,SAASA,iBACdC,KAAiB,EACjBC,GAAiD,EACjDC,QAAkC;IAElC,MAAMC,QAAQC,IAAAA,aAAM,EAACH;IAErBI,IAAAA,oCAAiB,EAAC;QAChBF,MAAMG,OAAO,GAAGL;IAClB,GAAG;QAACA;KAAI;IAER,yDAAyD;IACzD,+DAA+D,GAC/D,MAAMM,KAAKC,IAAAA,kBAAW,EAAC,CAACC,IAAWN,MAAMG,OAAO,IAAIH,MAAMG,OAAO,CAACG,IAAI,EAAE;IAExE,gDAAgD;IAChD,MAAMC,SAASN,IAAAA,aAAM,EAAC,KAAO;IAC7B,MAAMO,SAASH,IAAAA,kBAAW,EAAC;QACzBE,OAAOJ,OAAO;QACdI,OAAOJ,OAAO,GAAG,KAAO;IAC1B,GAAG,EAAE;IAEL,MAAMM,MAAMJ,IAAAA,kBAAW,EACrB,CAACK;QACC,IAAI,CAACC,cAAS,EAAE;YACd;QACF;QAEAH;QACA,IAAI,CAACE,IAAI;YACP;QACF;QAEA,MAAME,UAAU,qBAAKb;QACrBW,GAAGG,gBAAgB,CAAChB,OAAOO,IAAIQ;QAC/BL,OAAOJ,OAAO,GAAG,IAAMO,GAAGI,mBAAmB,CAACjB,OAAOO,IAAIQ;IAC3D,GACA;QAACb;QAAUK;QAAIP;QAAOW;KAAO;IAG/BO,IAAAA,gBAAS,EAAC,IAAMP,QAAQ;QAACA;KAAO;IAChC,OAAOQ,IAAAA,cAAO,EAAC,IAAO,CAAA;YAAEP;YAAKD;QAAO,CAAA,GAAI;QAACC;QAAKD;KAAO;AACvD"}