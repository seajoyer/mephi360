{"version":3,"sources":["../../../src/hooks/useEnsureControl.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\n'use client';\n\nimport { ChangeEvent, Dispatch, SetStateAction, useCallback, useRef, useState } from 'react';\n\nimport { isFunction } from 'helpers/fuctions';\nimport { useEnhancedEffect } from 'hooks/useEnhancedEffect';\n\nexport interface UseCustomEnsuredControlProps<V> {\n  value?: V;\n  defaultValue: V;\n  disabled?: boolean | undefined;\n  onChange?(this: void, v: V): any;\n}\n\nexport function useCustomEnsuredControl<V = any>({\n  value,\n  defaultValue,\n  disabled,\n  onChange: onChangeProp,\n}: UseCustomEnsuredControlProps<V>): [V, Dispatch<SetStateAction<V>>] {\n  const isControlled = value !== undefined;\n  const [localValue, setLocalValue] = useState(defaultValue);\n  const preservedControlledValueRef = useRef<V>();\n\n  useEnhancedEffect(() => {\n    preservedControlledValueRef.current = value;\n  });\n\n  const onChange = useCallback((nextValue: V | ((prevValue: any) => V)) => {\n    if (disabled) {\n      return;\n    }\n\n    if (isFunction(nextValue)) {\n      if (!isControlled) {\n        setLocalValue((prevValue) => {\n          const resolvedValue = nextValue(prevValue);\n          if (onChangeProp) {\n            onChangeProp(resolvedValue);\n          }\n          return resolvedValue;\n        });\n      } else if (onChangeProp) {\n        const resolvedValue = nextValue(preservedControlledValueRef.current);\n        onChangeProp(resolvedValue);\n      }\n\n      return;\n    }\n\n    onChangeProp && onChangeProp(nextValue);\n    !isControlled && setLocalValue(nextValue);\n  }, [disabled, isControlled, onChangeProp]);\n\n  return [isControlled ? value : localValue, onChange];\n}\n\nexport interface UseEnsuredControlProps<V, E extends ChangeEvent<any>> {\n  value?: V;\n  defaultValue: V;\n  disabled?: boolean | undefined;\n  onChange?(this: void, e: E): any;\n}\n\nexport function useEnsuredControl<V, E extends ChangeEvent<any>>({\n  onChange: onChangeProp,\n  disabled,\n  ...props\n}: UseEnsuredControlProps<V, E>): [V, (e: E) => any] {\n  const [value, onChangeValue] = useCustomEnsuredControl(props);\n\n  const onChange = useCallback(\n    (e: E) => {\n      if (disabled) {\n        return;\n      }\n\n      onChangeValue(e.target.value);\n      onChangeProp && onChangeProp(e);\n    },\n    [onChangeValue, onChangeProp, disabled],\n  );\n\n  return [value, onChange];\n}\n"],"names":["useCustomEnsuredControl","useEnsuredControl","value","defaultValue","disabled","onChange","onChangeProp","isControlled","undefined","localValue","setLocalValue","useState","preservedControlledValueRef","useRef","useEnhancedEffect","current","useCallback","nextValue","isFunction","prevValue","resolvedValue","props","onChangeValue","e","target"],"mappings":"AAAA,qDAAqD,GAErD;;;;;;;;;;;;IAcgBA,uBAAuB;eAAvBA;;IAkDAC,iBAAiB;eAAjBA;;;;uBA9DqE;0BAE1D;mCACO;AAS3B,SAASD,wBAAiC,EAC/CE,KAAK,EACLC,YAAY,EACZC,QAAQ,EACRC,UAAUC,YAAY,EACU;IAChC,MAAMC,eAAeL,UAAUM;IAC/B,MAAM,CAACC,YAAYC,cAAc,GAAGC,IAAAA,eAAQ,EAACR;IAC7C,MAAMS,8BAA8BC,IAAAA,aAAM;IAE1CC,IAAAA,oCAAiB,EAAC;QAChBF,4BAA4BG,OAAO,GAAGb;IACxC;IAEA,MAAMG,WAAWW,IAAAA,kBAAW,EAAC,CAACC;QAC5B,IAAIb,UAAU;YACZ;QACF;QAEA,IAAIc,IAAAA,oBAAU,EAACD,YAAY;YACzB,IAAI,CAACV,cAAc;gBACjBG,cAAc,CAACS;oBACb,MAAMC,gBAAgBH,UAAUE;oBAChC,IAAIb,cAAc;wBAChBA,aAAac;oBACf;oBACA,OAAOA;gBACT;YACF,OAAO,IAAId,cAAc;gBACvB,MAAMc,gBAAgBH,UAAUL,4BAA4BG,OAAO;gBACnET,aAAac;YACf;YAEA;QACF;QAEAd,gBAAgBA,aAAaW;QAC7B,CAACV,gBAAgBG,cAAcO;IACjC,GAAG;QAACb;QAAUG;QAAcD;KAAa;IAEzC,OAAO;QAACC,eAAeL,QAAQO;QAAYJ;KAAS;AACtD;AASO,SAASJ,kBAAiD;QAAA,EAC/DI,UAAUC,YAAY,EACtBF,QAAQ,EAEqB,GAJkC,QAG5DiB,qCAH4D;QAC/DhB;QACAD;;IAGA,MAAM,CAACF,OAAOoB,cAAc,GAAGtB,wBAAwBqB;IAEvD,MAAMhB,WAAWW,IAAAA,kBAAW,EAC1B,CAACO;QACC,IAAInB,UAAU;YACZ;QACF;QAEAkB,cAAcC,EAAEC,MAAM,CAACtB,KAAK;QAC5BI,gBAAgBA,aAAaiB;IAC/B,GACA;QAACD;QAAehB;QAAcF;KAAS;IAGzC,OAAO;QAACF;QAAOG;KAAS;AAC1B"}