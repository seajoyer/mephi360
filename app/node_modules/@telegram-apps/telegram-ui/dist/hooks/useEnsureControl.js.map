{"version":3,"sources":["../../src/hooks/useEnsureControl.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\n'use client';\n\nimport { ChangeEvent, Dispatch, SetStateAction, useCallback, useRef, useState } from 'react';\n\nimport { isFunction } from 'helpers/fuctions';\nimport { useEnhancedEffect } from 'hooks/useEnhancedEffect';\n\nexport interface UseCustomEnsuredControlProps<V> {\n  value?: V;\n  defaultValue: V;\n  disabled?: boolean | undefined;\n  onChange?(this: void, v: V): any;\n}\n\nexport function useCustomEnsuredControl<V = any>({\n  value,\n  defaultValue,\n  disabled,\n  onChange: onChangeProp,\n}: UseCustomEnsuredControlProps<V>): [V, Dispatch<SetStateAction<V>>] {\n  const isControlled = value !== undefined;\n  const [localValue, setLocalValue] = useState(defaultValue);\n  const preservedControlledValueRef = useRef<V>();\n\n  useEnhancedEffect(() => {\n    preservedControlledValueRef.current = value;\n  });\n\n  const onChange = useCallback((nextValue: V | ((prevValue: any) => V)) => {\n    if (disabled) {\n      return;\n    }\n\n    if (isFunction(nextValue)) {\n      if (!isControlled) {\n        setLocalValue((prevValue) => {\n          const resolvedValue = nextValue(prevValue);\n          if (onChangeProp) {\n            onChangeProp(resolvedValue);\n          }\n          return resolvedValue;\n        });\n      } else if (onChangeProp) {\n        const resolvedValue = nextValue(preservedControlledValueRef.current);\n        onChangeProp(resolvedValue);\n      }\n\n      return;\n    }\n\n    onChangeProp && onChangeProp(nextValue);\n    !isControlled && setLocalValue(nextValue);\n  }, [disabled, isControlled, onChangeProp]);\n\n  return [isControlled ? value : localValue, onChange];\n}\n\nexport interface UseEnsuredControlProps<V, E extends ChangeEvent<any>> {\n  value?: V;\n  defaultValue: V;\n  disabled?: boolean | undefined;\n  onChange?(this: void, e: E): any;\n}\n\nexport function useEnsuredControl<V, E extends ChangeEvent<any>>({\n  onChange: onChangeProp,\n  disabled,\n  ...props\n}: UseEnsuredControlProps<V, E>): [V, (e: E) => any] {\n  const [value, onChangeValue] = useCustomEnsuredControl(props);\n\n  const onChange = useCallback(\n    (e: E) => {\n      if (disabled) {\n        return;\n      }\n\n      onChangeValue(e.target.value);\n      onChangeProp && onChangeProp(e);\n    },\n    [onChangeValue, onChangeProp, disabled],\n  );\n\n  return [value, onChange];\n}\n"],"names":["useCallback","useRef","useState","isFunction","useEnhancedEffect","useCustomEnsuredControl","value","defaultValue","disabled","onChange","onChangeProp","isControlled","undefined","localValue","setLocalValue","preservedControlledValueRef","current","nextValue","prevValue","resolvedValue","useEnsuredControl","props","onChangeValue","e","target"],"mappings":"AAAA,qDAAqD,GAErD;;AAEA,SAAgDA,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,QAAQ;AAE7F,SAASC,UAAU,QAAQ,sBAAmB;AAC9C,SAASC,iBAAiB,QAAQ,sBAA0B;AAS5D,OAAO,SAASC,wBAAiC,EAC/CC,KAAK,EACLC,YAAY,EACZC,QAAQ,EACRC,UAAUC,YAAY,EACU;IAChC,MAAMC,eAAeL,UAAUM;IAC/B,MAAM,CAACC,YAAYC,cAAc,GAAGZ,SAASK;IAC7C,MAAMQ,8BAA8Bd;IAEpCG,kBAAkB;QAChBW,4BAA4BC,OAAO,GAAGV;IACxC;IAEA,MAAMG,WAAWT,YAAY,CAACiB;QAC5B,IAAIT,UAAU;YACZ;QACF;QAEA,IAAIL,WAAWc,YAAY;YACzB,IAAI,CAACN,cAAc;gBACjBG,cAAc,CAACI;oBACb,MAAMC,gBAAgBF,UAAUC;oBAChC,IAAIR,cAAc;wBAChBA,aAAaS;oBACf;oBACA,OAAOA;gBACT;YACF,OAAO,IAAIT,cAAc;gBACvB,MAAMS,gBAAgBF,UAAUF,4BAA4BC,OAAO;gBACnEN,aAAaS;YACf;YAEA;QACF;QAEAT,gBAAgBA,aAAaO;QAC7B,CAACN,gBAAgBG,cAAcG;IACjC,GAAG;QAACT;QAAUG;QAAcD;KAAa;IAEzC,OAAO;QAACC,eAAeL,QAAQO;QAAYJ;KAAS;AACtD;AASA,OAAO,SAASW,kBAAiD;QAAA,EAC/DX,UAAUC,YAAY,EACtBF,QAAQ,EAEqB,GAJkC,QAG5Da,mCAH4D;QAC/DZ;QACAD;;IAGA,MAAM,CAACF,OAAOgB,cAAc,GAAGjB,wBAAwBgB;IAEvD,MAAMZ,WAAWT,YACf,CAACuB;QACC,IAAIf,UAAU;YACZ;QACF;QAEAc,cAAcC,EAAEC,MAAM,CAAClB,KAAK;QAC5BI,gBAAgBA,aAAaa;IAC/B,GACA;QAACD;QAAeZ;QAAcF;KAAS;IAGzC,OAAO;QAACF;QAAOG;KAAS;AAC1B"}