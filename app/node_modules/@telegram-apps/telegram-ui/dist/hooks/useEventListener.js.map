{"version":3,"sources":["../../src/hooks/useEventListener.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport { canUseDOM } from 'helpers/dom';\n\nimport { useEnhancedEffect } from './useEnhancedEffect';\n\ninterface EventListenerHandle {\n  add: (el: HTMLElement | Document | Window) => void;\n  remove: () => void;\n}\n\nexport function useEventListener<K extends keyof GlobalEventHandlersEventMap>(\n  event: K,\n  _cb: false | null | undefined | ((ev: GlobalEventHandlersEventMap[K]) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle;\n\nexport function useEventListener<E extends Event>(\n  event: string,\n  _cb: false | null | undefined | ((ev: E) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle;\n/**\n * Custom React hook for handling event listeners in a declarative way.\n * Copied from https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/hooks/useEventListener.ts\n * */\nexport function useEventListener<E extends Event, K extends keyof GlobalEventHandlersEventMap>(\n  event: string | K,\n  _cb: false | null | undefined | ((ev: E) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle {\n  const cbRef = useRef(_cb);\n\n  useEnhancedEffect(() => {\n    cbRef.current = _cb;\n  }, [_cb]);\n\n  // Callback function to be executed when the event occurs\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  const cb = useCallback((e: any) => cbRef.current && cbRef.current(e), []);\n\n  // Refs to store the detach and remove functions\n  const detach = useRef(() => {});\n  const remove = useCallback(() => {\n    detach.current();\n    detach.current = () => {};\n  }, []);\n\n  const add = useCallback(\n    (el: HTMLElement | Document | Window) => {\n      if (!canUseDOM) {\n        return;\n      }\n\n      remove();\n      if (!el) {\n        return;\n      }\n\n      const options = { ..._options };\n      el.addEventListener(event, cb, options);\n      detach.current = () => el.removeEventListener(event, cb, options);\n    },\n    [_options, cb, event, remove],\n  );\n\n  useEffect(() => remove, [remove]);\n  return useMemo(() => ({ add, remove }), [add, remove]);\n}\n"],"names":["useCallback","useEffect","useMemo","useRef","canUseDOM","useEnhancedEffect","useEventListener","event","_cb","_options","cbRef","current","cb","e","detach","remove","add","el","options","addEventListener","removeEventListener"],"mappings":"AAAA;;AAEA,SAASA,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,QAAQ,QAAQ;AAEhE,SAASC,SAAS,QAAQ,iBAAc;AAExC,SAASC,iBAAiB,QAAQ,sBAAsB;AAkBxD;;;GAGG,GACH,OAAO,SAASC,iBACdC,KAAiB,EACjBC,GAAiD,EACjDC,QAAkC;IAElC,MAAMC,QAAQP,OAAOK;IAErBH,kBAAkB;QAChBK,MAAMC,OAAO,GAAGH;IAClB,GAAG;QAACA;KAAI;IAER,yDAAyD;IACzD,+DAA+D,GAC/D,MAAMI,KAAKZ,YAAY,CAACa,IAAWH,MAAMC,OAAO,IAAID,MAAMC,OAAO,CAACE,IAAI,EAAE;IAExE,gDAAgD;IAChD,MAAMC,SAASX,OAAO,KAAO;IAC7B,MAAMY,SAASf,YAAY;QACzBc,OAAOH,OAAO;QACdG,OAAOH,OAAO,GAAG,KAAO;IAC1B,GAAG,EAAE;IAEL,MAAMK,MAAMhB,YACV,CAACiB;QACC,IAAI,CAACb,WAAW;YACd;QACF;QAEAW;QACA,IAAI,CAACE,IAAI;YACP;QACF;QAEA,MAAMC,UAAU,mBAAKT;QACrBQ,GAAGE,gBAAgB,CAACZ,OAAOK,IAAIM;QAC/BJ,OAAOH,OAAO,GAAG,IAAMM,GAAGG,mBAAmB,CAACb,OAAOK,IAAIM;IAC3D,GACA;QAACT;QAAUG;QAAIL;QAAOQ;KAAO;IAG/Bd,UAAU,IAAMc,QAAQ;QAACA;KAAO;IAChC,OAAOb,QAAQ,IAAO,CAAA;YAAEc;YAAKD;QAAO,CAAA,GAAI;QAACC;QAAKD;KAAO;AACvD"}