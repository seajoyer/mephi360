{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { Typography } from \"../Typography\";\nconst subheadlineLevelStyles = {\n  '1': \"tgui-30064fce0d501f17\",\n  '2': \"tgui-8f63cd31b2513281\"\n};\n/**\n * The Subheadline component is designed to render text that serves as a secondary heading\n * or subheading within content. It leverages the Typography component for consistent text styling,\n * offering additional control over the text's size through the `level` prop. By default, it renders\n * as an `<h6>` element but can be customized with the `Component` prop.\n */\nexport const Subheadline = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      level = '1',\n      className,\n      Component\n    } = _param,\n    restProps = _object_without_properties(_param, [\"level\", \"className\", \"Component\"]);\n  return /*#__PURE__*/_jsx(Typography, _object_spread_props(_object_spread({}, restProps), {\n    ref: ref,\n    className: classNames(\"tgui-266b6ffdbad2b90e\", subheadlineLevelStyles[level], className),\n    Component: Component || 'h6'\n  }));\n});","map":{"version":3,"names":["forwardRef","classNames","Typography","subheadlineLevelStyles","Subheadline","_param","ref","level","className","Component","restProps","_object_without_properties","_jsx","_object_spread_props","_object_spread"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Typography/Subheadline/Subheadline.tsx"],"sourcesContent":["import { forwardRef } from 'react';\nimport styles from './Subheadline.module.css';\n\nimport { classNames } from 'helpers/classNames';\n\nimport { Typography, TypographyProps } from '../Typography';\n\ntype SubheadlineLevel = '1' | '2';\n\nexport interface SubheadlineProps extends TypographyProps {\n  /** Determines the size of the subheadline, with `1` being the default and '2' providing a smaller option. */\n  level?: SubheadlineLevel;\n}\n\nconst subheadlineLevelStyles: Record<SubheadlineLevel, string> = {\n  '1': styles['wrapper--1'],\n  '2': styles['wrapper--2'],\n};\n\n/**\n * The Subheadline component is designed to render text that serves as a secondary heading\n * or subheading within content. It leverages the Typography component for consistent text styling,\n * offering additional control over the text's size through the `level` prop. By default, it renders\n * as an `<h6>` element but can be customized with the `Component` prop.\n */\nexport const Subheadline = forwardRef(({\n  level = '1',\n  className,\n  Component,\n  ...restProps\n}: SubheadlineProps, ref) => (\n  <Typography\n    {...restProps}\n    ref={ref}\n    className={classNames(styles.wrapper, subheadlineLevelStyles[level], className)}\n    Component={Component || 'h6'}\n  />\n));\n\n"],"mappings":";;;;AAAA,SAASA,UAAU,QAAQ;AAG3B,SAASC,UAAU,QAAQ;AAE3B,SAASC,UAAU,QAAyB;AAS5C,MAAMC,sBAAA,GAA2D;EAC/D,GAAG;EACH,GAAG;AACL;AAEA;;;;;;AAMA,OAAO,MAAMC,WAAA,gBAAcJ,UAAA,CAAW,CAAAK,MAAA,EAKjBC,GAAA;MALkB;MACrCC,KAAA,GAAQ,GAAG;MACXC,SAAS;MACTC;IAAS,CAEQ,GAAAJ,MAAA;IADdK,SAAA,GAAAC,0BAAA,CAAAN,MAAA,GAHH,SACA,aACA,Y;sBAGAO,IAAA,CAACV,UAAA,EAAAW,oBAAA,CAAAC,cAAA,KACKJ,SAAA;IACJJ,GAAA,EAAKA,GAAA;IACLE,SAAA,EAAWP,UAAA,0BAA2BE,sBAAsB,CAACI,KAAA,CAAM,EAAEC,SAAA;IACrEC,SAAA,EAAWA,SAAA,IAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}