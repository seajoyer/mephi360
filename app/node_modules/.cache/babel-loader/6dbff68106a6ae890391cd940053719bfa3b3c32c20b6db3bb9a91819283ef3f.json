{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { useObjectMemo } from \"../../../hooks/useObjectMemo\";\nimport { CardCell } from \"./components/CardCell/CardCell\";\nimport { CardChip } from \"./components/CardChip/CardChip\";\nimport { CardContext } from \"./CardContext\";\n/**\n * Serves as a container for card-styled UI elements, providing context for its child components.\n * It supports different visual styles and can encapsulate various content types.\n */\nexport const Card = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      type = 'plain',\n      className,\n      children\n    } = _param,\n    restProps = _object_without_properties(_param, [\"type\", \"className\", \"children\"]);\n  const contextValue = useObjectMemo({\n    type\n  });\n  return /*#__PURE__*/_jsx(CardContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(\"article\", _object_spread_props(_object_spread({\n      ref: ref,\n      className: classNames(\"tgui-dbf261f4b3046bb3\", type === 'ambient' && \"tgui-c6ad96fdf8ce4b28\", className)\n    }, restProps), {\n      children: children\n    }))\n  });\n});\nCard.Cell = CardCell;\nCard.Chip = CardChip;","map":{"version":3,"names":["forwardRef","classNames","useObjectMemo","CardCell","CardChip","CardContext","Card","_param","ref","type","className","children","restProps","_object_without_properties","contextValue","_jsx","Provider","value","_object_spread_props","_object_spread","Cell","Chip"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Blocks/Card/Card.tsx"],"sourcesContent":["import { forwardRef, ForwardRefExoticComponent, HTMLAttributes, RefAttributes } from 'react';\nimport styles from './Card.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { useObjectMemo } from 'hooks/useObjectMemo';\n\nimport { CardCell } from './components/CardCell/CardCell';\nimport { CardChip } from './components/CardChip/CardChip';\nimport { CardContext, CardContextInterface } from './CardContext';\n\nexport interface CardProps extends HTMLAttributes<HTMLElement> {\n  /** Defines the visual style of the card, influencing background, shadow, and border. */\n  type?: CardContextInterface['type'];\n}\n\ntype CardWithComponents = ForwardRefExoticComponent<CardProps & RefAttributes<HTMLDivElement>> & {\n  Cell: typeof CardCell;\n  Chip: typeof CardChip;\n};\n\n/**\n * Serves as a container for card-styled UI elements, providing context for its child components.\n * It supports different visual styles and can encapsulate various content types.\n */\nexport const Card = forwardRef<HTMLDivElement, CardProps>(({\n  type = 'plain',\n  className,\n  children,\n  ...restProps\n}, ref) => {\n  const contextValue = useObjectMemo({\n    type,\n  });\n\n  return (\n    <CardContext.Provider value={contextValue}>\n      <article\n        ref={ref}\n        className={classNames(\n          styles.wrapper,\n          type === 'ambient' && styles['wrapper--ambient'],\n          className,\n        )}\n        {...restProps}\n      >\n        {children}\n      </article>\n    </CardContext.Provider>\n  );\n}) as CardWithComponents;\n\nCard.Cell = CardCell;\nCard.Chip = CardChip;\n"],"mappings":";;;;AAAA,SAASA,UAAU,QAAkE;AAGrF,SAASC,UAAU,QAAQ;AAC3B,SAASC,aAAa,QAAQ;AAE9B,SAASC,QAAQ,QAAQ;AACzB,SAASC,QAAQ,QAAQ;AACzB,SAASC,WAAW,QAA8B;AAYlD;;;;AAIA,OAAO,MAAMC,IAAA,gBAAON,UAAA,CAAsC,CAAAO,MAAA,EAKvDC,GAAA;MALwD;MACzDC,IAAA,GAAO,OAAO;MACdC,SAAS;MACTC;IAAQ,CAET,GAAAJ,MAAA;IADIK,SAAA,GAAAC,0BAAA,CAAAN,MAAA,GAHH,QACA,aACA,W;EAGA,MAAMO,YAAA,GAAeZ,aAAA,CAAc;IACjCO;EACF;EAEA,oBACEM,IAAA,CAACV,WAAA,CAAYW,QAAQ;IAACC,KAAA,EAAOH,YAAA;cAC3B,aAAAC,IAAA,CAAC,WAAAG,oBAAA,CAAAC,cAAA;MACCX,GAAA,EAAKA,GAAA;MACLE,SAAA,EAAWT,UAAA,0BAETQ,IAAA,KAAS,sCACTC,SAAA;OAEEE,SAAA;gBAEHD;;;AAIT;AAEAL,IAAA,CAAKc,IAAI,GAAGjB,QAAA;AACZG,IAAA,CAAKe,IAAI,GAAGjB,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}