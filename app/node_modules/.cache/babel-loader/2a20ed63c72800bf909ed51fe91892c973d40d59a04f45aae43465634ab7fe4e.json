{"ast":null,"code":"// Code from library from react-children-utilities\n// @see https://github.com/fernandopasik/react-children-utilities/tree/main\nimport { Children, isValidElement } from \"react\";\nexport const childToString = child => {\n  if (typeof child === 'undefined' || child === null || typeof child === 'boolean') {\n    return '';\n  }\n  if (JSON.stringify(child) === '{}') {\n    return '';\n  }\n  return child.toString();\n};\nexport const getTextFromChildren = children => {\n  if (!(children instanceof Array) && !isValidElement(children)) {\n    return childToString(children);\n  }\n  return Children.toArray(children).reduce((text, child) => {\n    let newText = '';\n    const isValidElementResult = isValidElement(child);\n    const hasChildren = isValidElementResult && 'children' in child.props;\n    if (isValidElementResult && hasChildren) {\n      newText = getTextFromChildren(child.props.children);\n    } else if (isValidElementResult && !hasChildren) {\n      newText = '';\n    } else {\n      newText = childToString(child);\n    }\n    return text.concat(newText);\n  }, '');\n};","map":{"version":3,"names":["Children","isValidElement","childToString","child","JSON","stringify","toString","getTextFromChildren","children","Array","toArray","reduce","text","newText","isValidElementResult","hasChildren","props","concat"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/helpers/react/children.ts"],"sourcesContent":["// Code from library from react-children-utilities\n// @see https://github.com/fernandopasik/react-children-utilities/tree/main\n\nimport { Children, isValidElement, ReactNode } from 'react';\n\nexport const childToString = (child?: ReactNode): string => {\n  if (typeof child === 'undefined' || child === null || typeof child === 'boolean') {\n    return '';\n  }\n\n  if (JSON.stringify(child) === '{}') {\n    return '';\n  }\n\n  return (child as number | string).toString();\n};\n\nexport const getTextFromChildren = (children: ReactNode | ReactNode[]): string => {\n  if (!(children instanceof Array) && !isValidElement(children)) {\n    return childToString(children);\n  }\n\n  return Children.toArray(children).reduce((text: string, child: ReactNode): string => {\n    let newText = '';\n    const isValidElementResult = isValidElement<{ children?: ReactNode | ReactNode[] }>(child);\n    const hasChildren = isValidElementResult && 'children' in child.props;\n\n    if (isValidElementResult && hasChildren) {\n      newText = getTextFromChildren(child.props.children);\n    } else if (isValidElementResult && !hasChildren) {\n      newText = '';\n    } else {\n      newText = childToString(child);\n    }\n\n    return text.concat(newText);\n  }, '');\n};\n"],"mappings":"AAAA;AACA;AAEA,SAASA,QAAQ,EAAEC,cAAc,QAAmB;AAEpD,OAAO,MAAMC,aAAA,GAAiBC,KAAA;EAC5B,IAAI,OAAOA,KAAA,KAAU,eAAeA,KAAA,KAAU,QAAQ,OAAOA,KAAA,KAAU,WAAW;IAChF,OAAO;EACT;EAEA,IAAIC,IAAA,CAAKC,SAAS,CAACF,KAAA,MAAW,MAAM;IAClC,OAAO;EACT;EAEA,OAAOA,KAAC,CAA0BG,QAAQ;AAC5C;AAEA,OAAO,MAAMC,mBAAA,GAAuBC,QAAA;EAClC,IAAI,EAAEA,QAAA,YAAoBC,KAAI,KAAM,CAACR,cAAA,CAAeO,QAAA,GAAW;IAC7D,OAAON,aAAA,CAAcM,QAAA;EACvB;EAEA,OAAOR,QAAA,CAASU,OAAO,CAACF,QAAA,EAAUG,MAAM,CAAC,CAACC,IAAA,EAAcT,KAAA;IACtD,IAAIU,OAAA,GAAU;IACd,MAAMC,oBAAA,GAAuBb,cAAA,CAAuDE,KAAA;IACpF,MAAMY,WAAA,GAAcD,oBAAA,IAAwB,cAAcX,KAAA,CAAMa,KAAK;IAErE,IAAIF,oBAAA,IAAwBC,WAAA,EAAa;MACvCF,OAAA,GAAUN,mBAAA,CAAoBJ,KAAA,CAAMa,KAAK,CAACR,QAAQ;IACpD,OAAO,IAAIM,oBAAA,IAAwB,CAACC,WAAA,EAAa;MAC/CF,OAAA,GAAU;IACZ,OAAO;MACLA,OAAA,GAAUX,aAAA,CAAcC,KAAA;IAC1B;IAEA,OAAOS,IAAA,CAAKK,MAAM,CAACJ,OAAA;EACrB,GAAG;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}