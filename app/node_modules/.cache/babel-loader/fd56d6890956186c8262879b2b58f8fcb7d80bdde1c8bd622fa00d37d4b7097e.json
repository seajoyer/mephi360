{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, Fragment } from \"react\";\nimport { getHorizontalSideByKey, Keys } from \"../../../../../helpers/accessibility\";\nimport { classNames } from \"../../../../../helpers/classNames\";\nimport { getHTMLElementByChildren, getHTMLElementSiblingByDirection } from \"../../../../../helpers/dom\";\nimport { useExternRef } from \"../../../../../hooks/useExternalRefs\";\nimport { isHTMLElement } from \"@floating-ui/utils/dom\";\nimport { Icon16Cancel } from \"../../../../../icons/16/cancel\";\nimport { Tappable } from \"../../../../Service/Tappable/Tappable\";\nimport { Subheadline } from \"../../../../Typography/Subheadline/Subheadline\";\nimport { getValueOptionByHTMLElement } from \"./helpers/getValueOptionByHTMLElement\";\nimport { renderChipDefault } from \"./constants\";\n/**\n * Renders the base layout of the multiselect including the chips (selected options) and the input field.\n */\nexport const MultiselectBase = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      inputRef,\n      className,\n      // Option props\n      chipsValue,\n      onAddChipOption,\n      onRemoveChipOption,\n      renderChip = renderChipDefault,\n      // Input props\n      value,\n      placeholder,\n      disabled,\n      readOnly\n    } = _param,\n    restProps = _object_without_properties(_param, [\"inputRef\", \"className\", \"chipsValue\", \"onAddChipOption\", \"onRemoveChipOption\", \"renderChip\", \"value\", \"placeholder\", \"disabled\", \"readOnly\"]);\n  const listRef = useExternRef(ref);\n  const valueLength = chipsValue.length;\n  const withPlaceholder = valueLength === 0;\n  const isDisabled = disabled || readOnly;\n  const handleKeyDown = event => {\n    const targetEl = event.target;\n    const inputEl = inputRef.current;\n    if (event.defaultPrevented || !inputEl || !isHTMLElement(targetEl)) {\n      return;\n    }\n    const lastOptionIndex = valueLength - 1;\n    const nextInputValue = inputEl.value;\n    const isInputEl = targetEl === inputEl;\n    const isInputValueEmpty = nextInputValue === '';\n    switch (event.key) {\n      case Keys.ENTER:\n        {\n          if (isInputEl && !isInputValueEmpty) {\n            event.preventDefault();\n            onAddChipOption(nextInputValue);\n          }\n          break;\n        }\n      case Keys.BACKSPACE:\n        {\n          if (valueLength) {\n            const option = isInputEl && isInputValueEmpty ? chipsValue[lastOptionIndex] : getValueOptionByHTMLElement(chipsValue, targetEl);\n            if (!option) {\n              return;\n            }\n            event.preventDefault();\n            inputRef.current.focus();\n            onRemoveChipOption(option);\n          }\n          break;\n        }\n      case Keys.ARROW_UP:\n      case Keys.ARROW_LEFT:\n      case Keys.ARROW_DOWN:\n      case Keys.ARROW_RIGHT:\n        {\n          if (!valueLength || !listRef.current) {\n            break;\n          }\n          const isSelectionOnFirstLetter = inputEl.selectionStart === 0;\n          const isRightSelection = event.key === Keys.ARROW_RIGHT && isSelectionOnFirstLetter;\n          if (!isInputValueEmpty && !isSelectionOnFirstLetter || isRightSelection) {\n            break;\n          }\n          event.preventDefault();\n          let foundEl = null;\n          const horizontalSide = getHorizontalSideByKey(event.key);\n          if (isInputEl && (event.key === Keys.ARROW_UP || event.key === Keys.ARROW_LEFT)) {\n            foundEl = getHTMLElementByChildren(listRef.current.children, lastOptionIndex);\n          } else if (horizontalSide) {\n            foundEl = getHTMLElementSiblingByDirection(targetEl, horizontalSide);\n          }\n          foundEl && foundEl.focus();\n          break;\n        }\n      default:\n        break;\n    }\n  };\n  const handleChipRemove = (event, optionToRemove) => {\n    event.preventDefault();\n    event.stopPropagation();\n    onRemoveChipOption(optionToRemove);\n  };\n  const handleClick = () => {\n    const isFocused = document.activeElement === inputRef.current;\n    if (!isFocused && inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n  return (\n    // eslint-disable-next-line jsx-a11y/interactive-supports-focus\n    /*#__PURE__*/\n    _jsxs(\"div\", {\n      ref: listRef,\n      className: classNames(\"tgui-c56e136f855e5144\", withPlaceholder && \"tgui-ac1d436c45aafe04\", className),\n      onClick: isDisabled ? undefined : handleClick,\n      role: \"listbox\",\n      \"aria-orientation\": \"horizontal\",\n      \"aria-disabled\": disabled,\n      \"aria-readonly\": readOnly,\n      onKeyDown: isDisabled ? undefined : handleKeyDown,\n      children: [chipsValue.map((option, index) => /*#__PURE__*/_jsx(Fragment, {\n        children: renderChip({\n          children: option.label,\n          className: \"tgui-991d85450550abb9\",\n          value: option.value,\n          tabIndex: -1,\n          after: /*#__PURE__*/_jsx(Tappable, {\n            Component: \"div\",\n            interactiveAnimation: \"opacity\",\n            onClick: event => handleChipRemove(event, option),\n            className: \"tgui-0b4134fd8d5c05ac\",\n            children: /*#__PURE__*/_jsx(Icon16Cancel, {})\n          }),\n          role: 'option',\n          'aria-selected': true,\n          'aria-posinset': index + 1,\n          'aria-setsize': valueLength\n        })\n      }, `${typeof option.value}-${option.label}`)), /*#__PURE__*/_jsx(Subheadline, _object_spread_props(_object_spread({\n        ref: inputRef,\n        \"aria-autocomplete\": \"list\",\n        autoCapitalize: \"none\",\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        spellCheck: false\n      }, restProps), {\n        Component: \"input\",\n        type: \"text\",\n        className: \"tgui-41e02fd2529dfbd2\",\n        disabled: disabled,\n        readOnly: readOnly,\n        placeholder: withPlaceholder ? placeholder : undefined\n      }))]\n    })\n  );\n});","map":{"version":3,"names":["forwardRef","Fragment","getHorizontalSideByKey","Keys","classNames","getHTMLElementByChildren","getHTMLElementSiblingByDirection","useExternRef","isHTMLElement","Icon16Cancel","Tappable","Subheadline","getValueOptionByHTMLElement","renderChipDefault","MultiselectBase","_param","ref","inputRef","className","chipsValue","onAddChipOption","onRemoveChipOption","renderChip","value","placeholder","disabled","readOnly","restProps","_object_without_properties","listRef","valueLength","length","withPlaceholder","isDisabled","handleKeyDown","event","targetEl","target","inputEl","current","defaultPrevented","lastOptionIndex","nextInputValue","isInputEl","isInputValueEmpty","key","ENTER","preventDefault","BACKSPACE","option","focus","ARROW_UP","ARROW_LEFT","ARROW_DOWN","ARROW_RIGHT","isSelectionOnFirstLetter","selectionStart","isRightSelection","foundEl","horizontalSide","children","handleChipRemove","optionToRemove","stopPropagation","handleClick","isFocused","document","activeElement","_jsxs","onClick","undefined","role","onKeyDown","map","index","_jsx","label","tabIndex","after","Component","interactiveAnimation","_object_spread_props","_object_spread","autoCapitalize","autoComplete","autoCorrect","spellCheck","type"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Form/Multiselect/components/MultiselectBase/MultiselectBase.tsx"],"sourcesContent":["import {\n  forwardRef,\n  Fragment,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  MouseEvent,\n  RefObject,\n} from 'react';\nimport styles from './MultiselectBase.module.css';\n\nimport { getHorizontalSideByKey, Keys } from 'helpers/accessibility';\nimport { classNames } from 'helpers/classNames';\nimport { getHTMLElementByChildren, getHTMLElementSiblingByDirection } from 'helpers/dom';\nimport { useExternRef } from 'hooks/useExternalRefs';\n\nimport { isHTMLElement } from '@floating-ui/utils/dom';\nimport { Icon16Cancel } from 'icons/16/cancel';\n\nimport { ChipProps } from 'components/Form/Chip/Chip';\nimport { MultiselectOption } from 'components/Form/Multiselect/types';\nimport { Tappable } from 'components/Service/Tappable/Tappable';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { getValueOptionByHTMLElement } from './helpers/getValueOptionByHTMLElement';\nimport { renderChipDefault } from './constants';\n\nexport interface MultiselectBaseProps extends InputHTMLAttributes<HTMLInputElement> {\n  /** Custom function to render Chip component. */\n  renderChip?: (props: ChipProps) => JSX.Element;\n  /** Ref to the input element within the multiselect base. */\n  inputRef: RefObject<HTMLInputElement>;\n  /** Array of selected options (chips). */\n  chipsValue: MultiselectOption[];\n  /** Callback function to add an option based on text input. */\n  onAddChipOption: (optionText: string) => void;\n  /** Callback function to remove a selected chip. */\n  onRemoveChipOption: (option: MultiselectOption) => void;\n}\n\n/**\n * Renders the base layout of the multiselect including the chips (selected options) and the input field.\n */\nexport const MultiselectBase = forwardRef<HTMLDivElement, MultiselectBaseProps>(({\n  inputRef,\n  className,\n\n  // Option props\n  chipsValue,\n  onAddChipOption,\n  onRemoveChipOption,\n  renderChip = renderChipDefault,\n\n  // Input props\n  value,\n  placeholder,\n  disabled,\n  readOnly,\n  ...restProps\n}, ref) => {\n  const listRef = useExternRef<HTMLDivElement>(ref);\n\n  const valueLength = chipsValue.length;\n  const withPlaceholder = valueLength === 0;\n  const isDisabled = disabled || readOnly;\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {\n    const targetEl = event.target;\n    const inputEl = inputRef.current;\n\n    if (event.defaultPrevented || !inputEl || !isHTMLElement(targetEl)) {\n      return;\n    }\n\n    const lastOptionIndex = valueLength - 1;\n\n    const nextInputValue = inputEl.value;\n    const isInputEl = targetEl === inputEl;\n    const isInputValueEmpty = nextInputValue === '';\n\n    switch (event.key) {\n      case Keys.ENTER: {\n        if (isInputEl && !isInputValueEmpty) {\n          event.preventDefault();\n          onAddChipOption(nextInputValue);\n        }\n        break;\n      }\n\n      case Keys.BACKSPACE: {\n        if (valueLength) {\n          const option =\n            isInputEl && isInputValueEmpty\n              ? chipsValue[lastOptionIndex]\n              : getValueOptionByHTMLElement(chipsValue, targetEl);\n\n          if (!option) {\n            return;\n          }\n\n          event.preventDefault();\n          inputRef.current.focus();\n          onRemoveChipOption(option);\n        }\n        break;\n      }\n\n      case Keys.ARROW_UP:\n      case Keys.ARROW_LEFT:\n      case Keys.ARROW_DOWN:\n      case Keys.ARROW_RIGHT: {\n        if (!valueLength || !listRef.current) {\n          break;\n        }\n\n        const isSelectionOnFirstLetter = inputEl.selectionStart === 0;\n        const isRightSelection = event.key === Keys.ARROW_RIGHT && isSelectionOnFirstLetter;\n\n        if (!isInputValueEmpty && !isSelectionOnFirstLetter || isRightSelection) {\n          break;\n        }\n\n        event.preventDefault();\n        let foundEl: HTMLElement | null = null;\n        const horizontalSide = getHorizontalSideByKey(event.key);\n\n        if (isInputEl && (event.key === Keys.ARROW_UP || event.key === Keys.ARROW_LEFT)) {\n          foundEl = getHTMLElementByChildren(listRef.current.children, lastOptionIndex);\n        } else if (horizontalSide) {\n          foundEl = getHTMLElementSiblingByDirection(targetEl, horizontalSide);\n        }\n\n        foundEl && foundEl.focus();\n        break;\n      }\n\n      default:\n        break;\n    }\n  };\n\n  const handleChipRemove = (event: MouseEvent, optionToRemove: MultiselectOption) => {\n    event.preventDefault();\n    event.stopPropagation();\n    onRemoveChipOption(optionToRemove);\n  };\n\n  const handleClick = () => {\n    const isFocused = document.activeElement === inputRef.current;\n    if (!isFocused && inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    // eslint-disable-next-line jsx-a11y/interactive-supports-focus\n    <div\n      ref={listRef}\n      className={classNames(\n        styles.wrapper,\n        withPlaceholder && styles['wrapper--withPlaceholder'],\n        className,\n      )}\n      onClick={isDisabled ? undefined : handleClick}\n      role=\"listbox\"\n      aria-orientation=\"horizontal\"\n      aria-disabled={disabled}\n      aria-readonly={readOnly}\n      onKeyDown={isDisabled ? undefined : handleKeyDown}\n    >\n      {chipsValue.map((option, index) => (\n        <Fragment key={`${typeof option.value}-${option.label}`}>\n          {renderChip(\n            {\n              children: option.label,\n              className: styles.chip,\n              value: option.value,\n              tabIndex: -1,\n              after: (\n                <Tappable\n                  Component=\"div\"\n                  interactiveAnimation=\"opacity\"\n                  onClick={(event) => handleChipRemove(event, option)}\n                  className={styles.closeIcon}\n                >\n                  <Icon16Cancel />\n                </Tappable>\n              ),\n              role: 'option',\n              'aria-selected': true,\n              'aria-posinset': index + 1,\n              'aria-setsize': valueLength,\n            },\n          )}\n        </Fragment>\n      ))}\n      <Subheadline\n        ref={inputRef}\n        aria-autocomplete=\"list\"\n        autoCapitalize=\"none\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        spellCheck={false}\n        {...restProps}\n        Component=\"input\"\n        type=\"text\"\n        className={styles.input}\n        disabled={disabled}\n        readOnly={readOnly}\n        placeholder={withPlaceholder ? placeholder : undefined}\n      />\n    </div>\n  );\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}