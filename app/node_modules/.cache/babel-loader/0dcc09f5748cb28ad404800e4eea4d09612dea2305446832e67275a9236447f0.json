{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useMemo } from \"react\";\nimport { classNames } from \"../../../../../helpers/classNames\";\nimport { hexToRGB } from \"../../../../../helpers/color\";\nimport { getTelegramData } from \"../../../../../helpers/telegram\";\nimport { useAppRootContext } from \"../../../../../hooks/useAppRootContext\";\nimport { Drawer } from \"@xelene/vaul-with-scroll-fix\";\nconst DEFAULT_LIGHT_OVERLAY_RGB = [255, 255, 255];\nconst DEFAULT_DARK_OVERLAY_RGB = [33, 33, 33];\nexport const ModalOverlay = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      className\n    } = _param,\n    props = _object_without_properties(_param, [\"className\"]);\n  const context = useAppRootContext();\n  // We don't use getComputedStyle because overlay renders before the appearance is changing\n  const [r, g, b] = useMemo(() => {\n    const telegramData = getTelegramData();\n    if (telegramData && telegramData.themeParams.bg_color) {\n      return hexToRGB(telegramData.themeParams.bg_color);\n    }\n    return context.appearance === 'light' ? DEFAULT_LIGHT_OVERLAY_RGB : DEFAULT_DARK_OVERLAY_RGB;\n  }, [context.appearance]);\n  return /*#__PURE__*/_jsx(Drawer.Overlay, _object_spread({\n    ref: ref,\n    // Opacity on overlay is dynamically calculated based on the percentage of opened drawers\n    // This is why we use rgba here and not background: token + opacity\n    style: {\n      background: `rgba(${r}, ${g}, ${b}, .4)`\n    },\n    className: classNames(\"tgui-3197096cb603b35a\", className)\n  }, props));\n});","map":{"version":3,"names":["forwardRef","useMemo","classNames","hexToRGB","getTelegramData","useAppRootContext","Drawer","DEFAULT_LIGHT_OVERLAY_RGB","DEFAULT_DARK_OVERLAY_RGB","ModalOverlay","_param","ref","className","props","_object_without_properties","context","r","g","b","telegramData","themeParams","bg_color","appearance","_jsx","Overlay","_object_spread","style","background"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Overlays/Modal/components/ModalOverlay/ModalOverlay.tsx"],"sourcesContent":["import { forwardRef, useMemo } from 'react';\nimport styles from './ModalOverlay.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hexToRGB } from 'helpers/color';\nimport { getTelegramData } from 'helpers/telegram';\nimport { useAppRootContext } from 'hooks/useAppRootContext';\n\nimport { Drawer } from '@xelene/vaul-with-scroll-fix';\n\nexport interface ModalOverlayProps {\n  className?: string;\n}\n\nconst DEFAULT_LIGHT_OVERLAY_RGB = [255, 255, 255];\nconst DEFAULT_DARK_OVERLAY_RGB = [33, 33, 33];\n\nexport const ModalOverlay = forwardRef<HTMLDivElement, ModalOverlayProps>(({\n  className,\n  ...props\n}, ref) => {\n  const context = useAppRootContext();\n\n  // We don't use getComputedStyle because overlay renders before the appearance is changing\n  const [r, g, b] = useMemo(() => {\n    const telegramData = getTelegramData();\n    if (telegramData && telegramData.themeParams.bg_color) {\n      return hexToRGB(telegramData.themeParams.bg_color);\n    }\n\n    return context.appearance === 'light' ? DEFAULT_LIGHT_OVERLAY_RGB : DEFAULT_DARK_OVERLAY_RGB;\n  }, [context.appearance]);\n\n  return (\n    <Drawer.Overlay\n      ref={ref}\n      // Opacity on overlay is dynamically calculated based on the percentage of opened drawers\n      // This is why we use rgba here and not background: token + opacity\n      style={{ background: `rgba(${r}, ${g}, ${b}, .4)` }}\n      className={classNames(styles.wrapper, className)}\n      {...props}\n    />\n  );\n});\n"],"mappings":";;;AAAA,SAASA,UAAU,EAAEC,OAAO,QAAQ;AAGpC,SAASC,UAAU,QAAQ;AAC3B,SAASC,QAAQ,QAAQ;AACzB,SAASC,eAAe,QAAQ;AAChC,SAASC,iBAAiB,QAAQ;AAElC,SAASC,MAAM,QAAQ;AAMvB,MAAMC,yBAAA,GAA4B,CAAC,KAAK,KAAK,IAAI;AACjD,MAAMC,wBAAA,GAA2B,CAAC,IAAI,IAAI,GAAG;AAE7C,OAAO,MAAMC,YAAA,gBAAeT,UAAA,CAA8C,CAAAU,MAAA,EAGvEC,GAAA;MAHwE;MACzEC;IAAS,CAEV,GAAAF,MAAA;IADIG,KAAA,GAAAC,0BAAA,CAAAJ,MAAA,GADH,Y;EAGA,MAAMK,OAAA,GAAUV,iBAAA;EAEhB;EACA,MAAM,CAACW,CAAA,EAAGC,CAAA,EAAGC,CAAA,CAAE,GAAGjB,OAAA,CAAQ;IACxB,MAAMkB,YAAA,GAAef,eAAA;IACrB,IAAIe,YAAA,IAAgBA,YAAA,CAAaC,WAAW,CAACC,QAAQ,EAAE;MACrD,OAAOlB,QAAA,CAASgB,YAAA,CAAaC,WAAW,CAACC,QAAQ;IACnD;IAEA,OAAON,OAAA,CAAQO,UAAU,KAAK,UAAUf,yBAAA,GAA4BC,wBAAA;EACtE,GAAG,CAACO,OAAA,CAAQO,UAAU,CAAC;EAEvB,oBACEC,IAAA,CAACjB,MAAA,CAAOkB,OAAO,EAAAC,cAAA;IACbd,GAAA,EAAKA,GAAA;IACL;IACA;IACAe,KAAA,EAAO;MAAEC,UAAA,EAAY,QAAQX,CAAA,KAAMC,CAAA,KAAMC,CAAA;IAAS;IAClDN,SAAA,EAAWV,UAAA,0BAA2BU,SAAA;KAClCC,KAAA;AAGV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}