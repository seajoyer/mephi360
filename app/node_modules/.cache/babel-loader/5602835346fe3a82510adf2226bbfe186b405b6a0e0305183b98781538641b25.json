{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { classNames } from \"../../../../../helpers/classNames\";\nimport { hasReactNode } from \"../../../../../helpers/react/node\";\nimport { Subheadline } from \"../../../../Typography/Subheadline/Subheadline\";\nimport { Text } from \"../../../../Typography/Text/Text\";\nconst typeStyles = {\n  text: \"tgui-c5be765fabc1327f\",\n  avatarStack: \"tgui-437ab2028f14c95c\"\n};\n/**\n * A versatile component designed to display either text information with an optional subtitle or a stack of avatars.\n * It adapts its structure based on the `type` prop, allowing for a wide range of use cases within user interfaces.\n */\nexport const Info = _param => {\n  var {\n      type = 'text',\n      subtitle,\n      avatarStack,\n      children,\n      className\n    } = _param,\n    restProps = _object_without_properties(_param, [\"type\", \"subtitle\", \"avatarStack\", \"children\", \"className\"]);\n  const isAvatarStack = type === 'avatarStack';\n  const isText = type === 'text';\n  return /*#__PURE__*/_jsxs(\"div\", _object_spread_props(_object_spread({\n    className: classNames(\"tgui-70fc390c70476f82\", typeStyles[type], className)\n  }, restProps), {\n    children: [isAvatarStack && hasReactNode(avatarStack) && avatarStack, hasReactNode(children) && /*#__PURE__*/_jsx(Text, {\n      children: children\n    }), isText && hasReactNode(subtitle) && /*#__PURE__*/_jsx(Subheadline, {\n      className: \"tgui-4af039094fb946b4\",\n      level: \"2\",\n      plain: false,\n      children: subtitle\n    })]\n  }));\n};","map":{"version":3,"names":["classNames","hasReactNode","Subheadline","Text","typeStyles","text","avatarStack","Info","_param","type","subtitle","children","className","restProps","_object_without_properties","isAvatarStack","isText","_jsxs","_object_spread_props","_object_spread","_jsx","level","plain"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Blocks/Cell/components/Info/Info.tsx"],"sourcesContent":["import { HTMLAttributes, ReactElement } from 'react';\nimport styles from './Info.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\n\nimport { AvatarStackProps } from 'components/Blocks/AvatarStack/AvatarStack';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { Text } from 'components/Typography/Text/Text';\n\nexport interface InfoProps extends HTMLAttributes<HTMLDivElement> {\n  /** Determines the type of content to display, affecting the layout and styling. */\n  type: 'text' | 'avatarStack';\n  /** Text content for the component, utilized when the `type` is set to 'text'. */\n  subtitle?: string;\n  /** An `AvatarStack` component to display when the `type` is 'avatarStack', showcasing multiple avatars. */\n  avatarStack?: ReactElement<AvatarStackProps>;\n}\n\nconst typeStyles = {\n  text: styles['wrapper--text'],\n  avatarStack: styles['wrapper--avatarStack'],\n};\n\n/**\n * A versatile component designed to display either text information with an optional subtitle or a stack of avatars.\n * It adapts its structure based on the `type` prop, allowing for a wide range of use cases within user interfaces.\n */\nexport const Info = ({\n  type = 'text',\n  subtitle,\n  avatarStack,\n  children,\n  className,\n  ...restProps\n}: InfoProps) => {\n  const isAvatarStack = type === 'avatarStack';\n  const isText = type === 'text';\n\n  return (\n    <div\n      className={classNames(\n        styles.wrapper,\n        typeStyles[type],\n        className,\n      )}\n      {...restProps}\n    >\n      {isAvatarStack && hasReactNode(avatarStack) && avatarStack}\n      {hasReactNode(children) && <Text>{children}</Text>}\n      {isText && hasReactNode(subtitle) && (\n        <Subheadline className={styles.subtitle} level=\"2\" plain={false}>\n          {subtitle}\n        </Subheadline>\n      )}\n    </div>\n  );\n};\n"],"mappings":";;;;AAGA,SAASA,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAG7B,SAASC,WAAW,QAAQ;AAC5B,SAASC,IAAI,QAAQ;AAWrB,MAAMC,UAAA,GAAa;EACjBC,IAAI;EACJC,WAAW;AACb;AAEA;;;;AAIA,OAAO,MAAMC,IAAA,GAAOC,MAAA;MAAC;MACnBC,IAAA,GAAO,MAAM;MACbC,QAAQ;MACRJ,WAAW;MACXK,QAAQ;MACRC;IAAS,CAEC,GAAAJ,MAAA;IADPK,SAAA,GAAAC,0BAAA,CAAAN,MAAA,GALH,QACA,YACA,eACA,YACA,Y;EAGA,MAAMO,aAAA,GAAgBN,IAAA,KAAS;EAC/B,MAAMO,MAAA,GAASP,IAAA,KAAS;EAExB,oBACEQ,KAAA,CAAC,OAAAC,oBAAA,CAAAC,cAAA;IACCP,SAAA,EAAWZ,UAAA,0BAETI,UAAU,CAACK,IAAA,CAAK,EAChBG,SAAA;KAEEC,SAAA;eAEHE,aAAA,IAAiBd,YAAA,CAAaK,WAAA,KAAgBA,WAAA,EAC9CL,YAAA,CAAaU,QAAA,kBAAaS,IAAA,CAACjB,IAAA;gBAAMQ;QACjCK,MAAA,IAAUf,YAAA,CAAaS,QAAA,kBACtBU,IAAA,CAAClB,WAAA;MAAYU,SAAS;MAAmBS,KAAA,EAAM;MAAIC,KAAA,EAAO;gBACvDZ;;;AAKX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}