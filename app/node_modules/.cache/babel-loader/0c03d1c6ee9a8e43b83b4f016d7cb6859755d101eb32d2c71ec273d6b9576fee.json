{"ast":null,"code":"import { getTextFromChildren } from \"../../../../../../helpers/react/children\";\nexport function defaultFilterFn(...args) {\n  const [rawSearchQuery = '', option] = args;\n  if ((option === null || option === void 0 ? void 0 : option.label) === undefined) {\n    return false;\n  }\n  const searchQuery = rawSearchQuery.trim().toLocaleLowerCase();\n  const label = getTextFromChildren(option.label).toLocaleLowerCase();\n  if (label.startsWith(searchQuery)) {\n    return true;\n  }\n  const findAllIncludes = (target = '', search = '') => {\n    const includes = [];\n    let i = target.indexOf(search);\n    while (i !== -1) {\n      includes.push(i);\n      i = target.indexOf(search, i + 1);\n    }\n    return includes;\n  };\n  const includes = findAllIncludes(label, searchQuery);\n  if (includes.length === 0) {\n    return false;\n  }\n  return includes.some(index => index === 0 || !RegExp(\"\\\\p{L}\", \"u\").test(label[index - 1]));\n}","map":{"version":3,"names":["getTextFromChildren","defaultFilterFn","args","rawSearchQuery","option","label","undefined","searchQuery","trim","toLocaleLowerCase","startsWith","findAllIncludes","target","search","includes","i","indexOf","push","length","some","index","RegExp","test"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Form/Multiselect/hooks/helpers/filter/index.ts"],"sourcesContent":["import { getTextFromChildren } from 'helpers/react/children';\n\nimport { MultiselectOption } from 'components/Form/Multiselect/types';\n\nexport type FilterFn = (\n  inputValue: string,\n  option: MultiselectOption,\n) => boolean;\n\nexport function defaultFilterFn(\n  ...args: Parameters<FilterFn>\n): ReturnType<FilterFn> {\n  const [rawSearchQuery = '', option] = args;\n\n  if (option?.label === undefined) {\n    return false;\n  }\n\n  const searchQuery = rawSearchQuery.trim().toLocaleLowerCase();\n  const label = getTextFromChildren(option.label).toLocaleLowerCase();\n\n  if (label.startsWith(searchQuery)) {\n    return true;\n  }\n\n  const findAllIncludes = (target = '', search = '') => {\n    const includes = [];\n    let i = target.indexOf(search);\n    while (i !== -1) {\n      includes.push(i);\n      i = target.indexOf(search, i + 1);\n    }\n    return includes;\n  };\n\n  const includes = findAllIncludes(label, searchQuery);\n  if (includes.length === 0) {\n    return false;\n  }\n\n  return includes.some(index => index === 0 || !/\\p{L}/u.test(label[index - 1]));\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ;AASpC,OAAO,SAASC,gBACd,GAAGC,IAA0B;EAE7B,MAAM,CAACC,cAAA,GAAiB,EAAE,EAAEC,MAAA,CAAO,GAAGF,IAAA;EAEtC,IAAI,CAAAE,MAAA,aAAAA,MAAA,uBAAAA,MAAA,CAAQC,KAAK,MAAKC,SAAA,EAAW;IAC/B,OAAO;EACT;EAEA,MAAMC,WAAA,GAAcJ,cAAA,CAAeK,IAAI,GAAGC,iBAAiB;EAC3D,MAAMJ,KAAA,GAAQL,mBAAA,CAAoBI,MAAA,CAAOC,KAAK,EAAEI,iBAAiB;EAEjE,IAAIJ,KAAA,CAAMK,UAAU,CAACH,WAAA,GAAc;IACjC,OAAO;EACT;EAEA,MAAMI,eAAA,GAAkBA,CAACC,MAAA,GAAS,EAAE,EAAEC,MAAA,GAAS,EAAE;IAC/C,MAAMC,QAAA,GAAW,EAAE;IACnB,IAAIC,CAAA,GAAIH,MAAA,CAAOI,OAAO,CAACH,MAAA;IACvB,OAAOE,CAAA,KAAM,CAAC,GAAG;MACfD,QAAA,CAASG,IAAI,CAACF,CAAA;MACdA,CAAA,GAAIH,MAAA,CAAOI,OAAO,CAACH,MAAA,EAAQE,CAAA,GAAI;IACjC;IACA,OAAOD,QAAA;EACT;EAEA,MAAMA,QAAA,GAAWH,eAAA,CAAgBN,KAAA,EAAOE,WAAA;EACxC,IAAIO,QAAA,CAASI,MAAM,KAAK,GAAG;IACzB,OAAO;EACT;EAEA,OAAOJ,QAAA,CAASK,IAAI,CAACC,KAAA,IAASA,KAAA,KAAU,KAAK,CAACC,MAAA,gBAASC,IAAI,CAACjB,KAAK,CAACe,KAAA,GAAQ,EAAE;AAC9E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}