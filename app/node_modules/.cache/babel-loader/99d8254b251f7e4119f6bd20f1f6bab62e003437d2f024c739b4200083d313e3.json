{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from \"react\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { callMultiple } from \"../../../helpers/function\";\nimport { usePlatform } from \"../../../hooks/usePlatform\";\nimport { FormInput } from \"../FormInput/FormInput\";\nimport { VisuallyHidden } from \"../../Service/VisuallyHidden/VisuallyHidden\";\nimport { Subheadline } from \"../../Typography/Subheadline/Subheadline\";\nimport { Text } from \"../../Typography/Text/Text\";\n/**\n * Renders a color picker input within a form structure, displaying the selected color value.\n * It adapts the text style based on the platform and supports additional properties like header and status.\n */\nexport const ColorInput = _param => {\n  var {\n      header,\n      before,\n      status,\n      value: valueProp,\n      defaultValue,\n      className,\n      onChange: onChangeProp\n    } = _param,\n    restProps = _object_without_properties(_param, [\"header\", \"before\", \"status\", \"value\", \"defaultValue\", \"className\", \"onChange\"]);\n  const platform = usePlatform();\n  const [value, setValue] = useState(valueProp || defaultValue || '#EFEFF4');\n  useEffect(() => {\n    if (!valueProp) {\n      return;\n    }\n    setValue(valueProp);\n  }, [valueProp]);\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n  const TypographyComponent = platform === 'ios' ? Text : Subheadline;\n  return /*#__PURE__*/_jsx(FormInput, {\n    header: header,\n    before: before,\n    after: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"tgui-f3ab78c8048cb9dc\",\n      children: [/*#__PURE__*/_jsx(VisuallyHidden, _object_spread({\n        Component: \"input\",\n        type: \"color\",\n        value: value,\n        onChange: callMultiple(onChange, onChangeProp)\n      }, restProps)), /*#__PURE__*/_jsx(\"div\", {\n        className: \"tgui-93beab8699996b1e\",\n        style: {\n          backgroundColor: String(value)\n        }\n      })]\n    }),\n    status: status,\n    className: classNames(\"tgui-a03137b1ed760aaf\", platform === 'ios' && \"tgui-ca1c0e2d013ae260\", className),\n    children: /*#__PURE__*/_jsx(TypographyComponent, {\n      caps: true,\n      className: \"tgui-21dba5277ef0ddd7\",\n      children: value\n    })\n  });\n};","map":{"version":3,"names":["useEffect","useState","classNames","callMultiple","usePlatform","FormInput","VisuallyHidden","Subheadline","Text","ColorInput","_param","header","before","status","value","valueProp","defaultValue","className","onChange","onChangeProp","restProps","_object_without_properties","platform","setValue","e","target","TypographyComponent","_jsx","after","_jsxs","_object_spread","Component","type","style","backgroundColor","String","caps"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Form/ColorInput/ColorInput.tsx"],"sourcesContent":["'use client';\n\nimport { ChangeEvent, InputHTMLAttributes, useEffect, useState } from 'react';\nimport styles from './ColorInput.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { callMultiple } from 'helpers/function';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { FormInput, FormPublicProps } from 'components/Form/FormInput/FormInput';\nimport { VisuallyHidden } from 'components/Service/VisuallyHidden/VisuallyHidden';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { Text } from 'components/Typography/Text/Text';\n\nexport interface ColorInputProps extends Omit<FormPublicProps, 'after'>, InputHTMLAttributes<HTMLInputElement> {}\n\n/**\n * Renders a color picker input within a form structure, displaying the selected color value.\n * It adapts the text style based on the platform and supports additional properties like header and status.\n */\nexport const ColorInput = ({\n  header,\n  before,\n  status,\n  value: valueProp,\n  defaultValue,\n  className,\n  onChange: onChangeProp,\n  ...restProps\n}: ColorInputProps) => {\n  const platform = usePlatform();\n  const [value, setValue] = useState(valueProp || defaultValue || '#EFEFF4');\n\n  useEffect(() => {\n    if (!valueProp) {\n      return;\n    }\n\n    setValue(valueProp);\n  }, [valueProp]);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const TypographyComponent = platform === 'ios' ? Text : Subheadline;\n  return (\n    <FormInput\n      header={header}\n      before={before}\n      after={(\n        <div className={styles.circle}>\n          <VisuallyHidden\n            Component=\"input\"\n            type=\"color\"\n            value={value}\n            onChange={callMultiple(onChange, onChangeProp)}\n            {...restProps}\n          />\n          <div className={styles.circleColor} style={{ backgroundColor: String(value) }} />\n        </div>\n      )}\n      status={status}\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        className,\n      )}\n    >\n      <TypographyComponent caps className={styles.text}>\n        {value}\n      </TypographyComponent>\n    </FormInput>\n  );\n};\n\n"],"mappings":"AAAA;;;;;AAEA,SAA2CA,SAAS,EAAEC,QAAQ,QAAQ;AAGtE,SAASC,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAC7B,SAASC,WAAW,QAAQ;AAE5B,SAASC,SAAS,QAAyB;AAC3C,SAASC,cAAc,QAAQ;AAC/B,SAASC,WAAW,QAAQ;AAC5B,SAASC,IAAI,QAAQ;AAIrB;;;;AAIA,OAAO,MAAMC,UAAA,GAAaC,MAAA;MAAC;MACzBC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,KAAA,EAAOC,SAAS;MAChBC,YAAY;MACZC,SAAS;MACTC,QAAA,EAAUC;IAAY,CAEN,GAAAT,MAAA;IADbU,SAAA,GAAAC,0BAAA,CAAAX,MAAA,GAPH,UACA,UACA,UACA,SACA,gBACA,aACA,W;EAGA,MAAMY,QAAA,GAAWlB,WAAA;EACjB,MAAM,CAACU,KAAA,EAAOS,QAAA,CAAS,GAAGtB,QAAA,CAASc,SAAA,IAAaC,YAAA,IAAgB;EAEhEhB,SAAA,CAAU;IACR,IAAI,CAACe,SAAA,EAAW;MACd;IACF;IAEAQ,QAAA,CAASR,SAAA;EACX,GAAG,CAACA,SAAA,CAAU;EAEd,MAAMG,QAAA,GAAYM,CAAA;IAChBD,QAAA,CAASC,CAAA,CAAEC,MAAM,CAACX,KAAK;EACzB;EAEA,MAAMY,mBAAA,GAAsBJ,QAAA,KAAa,QAAQd,IAAA,GAAOD,WAAA;EACxD,oBACEoB,IAAA,CAACtB,SAAA;IACCM,MAAA,EAAQA,MAAA;IACRC,MAAA,EAAQA,MAAA;IACRgB,KAAA,eACEC,KAAA,CAAC;MAAIZ,SAAS;8BACZU,IAAA,CAACrB,cAAA,EAAAwB,cAAA;QACCC,SAAA,EAAU;QACVC,IAAA,EAAK;QACLlB,KAAA,EAAOA,KAAA;QACPI,QAAA,EAAUf,YAAA,CAAae,QAAA,EAAUC,YAAA;SAC7BC,SAAA,I,aAENO,IAAA,CAAC;QAAIV,SAAS;QAAsBgB,KAAA,EAAO;UAAEC,eAAA,EAAiBC,MAAA,CAAOrB,KAAA;QAAO;;;IAGhFD,MAAA,EAAQA,MAAA;IACRI,SAAA,EAAWf,UAAA,0BAEToB,QAAA,KAAa,kCACbL,SAAA;cAGF,aAAAU,IAAA,CAACD,mBAAA;MAAoBU,IAAI;MAACnB,SAAS;gBAChCH;;;AAIT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}