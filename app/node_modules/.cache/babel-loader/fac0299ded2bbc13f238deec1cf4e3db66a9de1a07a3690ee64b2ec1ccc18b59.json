{"ast":null,"code":"import { clamp } from \"../../../../../../helpers/math\";\n/**\n * These functions are copied from material-ui\n * https://github.com/mui/material-ui/blob/v5.13.7/packages/mui-base/src/useSlider/useSlider.ts#L89-L105\n */\nexport const getDecimalPrecision = num => {\n  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.\n  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.\n  if (Math.abs(num) < 1) {\n    const parts = num.toExponential().split('e-');\n    const matissaDecimalPart = parts[0].split('.')[1];\n    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);\n  }\n  const decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n};\nexport const roundValueToStep = (value, step, min) => {\n  const nearest = Math.round((value - min) / step) * step + min;\n  return Number(nearest.toFixed(getDecimalPrecision(step)));\n};\nexport const roundedClampWithStep = (val, min, max, step) => {\n  if (step == null || step <= 0) {\n    return clamp(val, min, max);\n  }\n  const roundedValue = roundValueToStep(val, step, min);\n  return clamp(roundedValue, min, max);\n};\nexport const scaleAndClampValue = (value, from, to, options = {}) => {\n  const scaled = (value - from[0]) / (from[1] - from[0]) * (to[1] - to[0]) + to[0];\n  return roundedClampWithStep(scaled, to[0], to[1], options.step);\n};\nexport const toPercent = (v, min, max) => (v - min) / (max - min) * 100;\nexport const offsetXToScaledValue = (startX, width, min, max, step) => {\n  return scaleAndClampValue(startX, [0, width], [min, max], {\n    step\n  });\n};","map":{"version":3,"names":["clamp","getDecimalPrecision","num","Math","abs","parts","toExponential","split","matissaDecimalPart","length","parseInt","decimalPart","toString","roundValueToStep","value","step","min","nearest","round","Number","toFixed","roundedClampWithStep","val","max","roundedValue","scaleAndClampValue","from","to","options","scaled","toPercent","v","offsetXToScaledValue","startX","width"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Form/Slider/hooks/helpers/math/index.ts"],"sourcesContent":["import { clamp } from 'helpers/math';\n\n/**\n * These functions are copied from material-ui\n * https://github.com/mui/material-ui/blob/v5.13.7/packages/mui-base/src/useSlider/useSlider.ts#L89-L105\n */\nexport const getDecimalPrecision = (num: number) => {\n  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.\n  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.\n  if (Math.abs(num) < 1) {\n    const parts = num.toExponential().split('e-');\n    const matissaDecimalPart = parts[0].split('.')[1];\n    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);\n  }\n\n  const decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n};\n\nexport const roundValueToStep = (value: number, step: number, min: number) => {\n  const nearest = Math.round((value - min) / step) * step + min;\n  return Number(nearest.toFixed(getDecimalPrecision(step)));\n};\n\nexport const roundedClampWithStep = (val: number, min: number, max: number, step?: number) => {\n  if (step == null || step <= 0) {\n    return clamp(val, min, max);\n  }\n\n  const roundedValue = roundValueToStep(val, step, min);\n  return clamp(roundedValue, min, max);\n};\n\nexport const scaleAndClampValue = (\n  value: number,\n  from: [number, number],\n  to: [number, number],\n  options: { step?: number } = {},\n) => {\n  const scaled = ((value - from[0]) / (from[1] - from[0])) * (to[1] - to[0]) + to[0];\n  return roundedClampWithStep(scaled, to[0], to[1], options.step);\n};\n\nexport const toPercent = (v: number, min: number, max: number) => ((v - min) / (max - min)) * 100;\n\nexport const offsetXToScaledValue = (\n  startX: number,\n  width: number,\n  min: number,\n  max: number,\n  step?: number,\n) => {\n  return scaleAndClampValue(startX, [0, width], [min, max], { step });\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ;AAEtB;;;;AAIA,OAAO,MAAMC,mBAAA,GAAuBC,GAAA;EAClC;EACA;EACA,IAAIC,IAAA,CAAKC,GAAG,CAACF,GAAA,IAAO,GAAG;IACrB,MAAMG,KAAA,GAAQH,GAAA,CAAII,aAAa,GAAGC,KAAK,CAAC;IACxC,MAAMC,kBAAA,GAAqBH,KAAK,CAAC,EAAE,CAACE,KAAK,CAAC,IAAI,CAAC,EAAE;IACjD,OAAO,CAACC,kBAAA,GAAqBA,kBAAA,CAAmBC,MAAM,GAAG,KAAKC,QAAA,CAASL,KAAK,CAAC,EAAE,EAAE;EACnF;EAEA,MAAMM,WAAA,GAAcT,GAAA,CAAIU,QAAQ,GAAGL,KAAK,CAAC,IAAI,CAAC,EAAE;EAChD,OAAOI,WAAA,GAAcA,WAAA,CAAYF,MAAM,GAAG;AAC5C;AAEA,OAAO,MAAMI,gBAAA,GAAmBA,CAACC,KAAA,EAAeC,IAAA,EAAcC,GAAA;EAC5D,MAAMC,OAAA,GAAUd,IAAA,CAAKe,KAAK,CAAC,CAACJ,KAAA,GAAQE,GAAE,IAAKD,IAAA,IAAQA,IAAA,GAAOC,GAAA;EAC1D,OAAOG,MAAA,CAAOF,OAAA,CAAQG,OAAO,CAACnB,mBAAA,CAAoBc,IAAA;AACpD;AAEA,OAAO,MAAMM,oBAAA,GAAuBA,CAACC,GAAA,EAAaN,GAAA,EAAaO,GAAA,EAAaR,IAAA;EAC1E,IAAIA,IAAA,IAAQ,QAAQA,IAAA,IAAQ,GAAG;IAC7B,OAAOf,KAAA,CAAMsB,GAAA,EAAKN,GAAA,EAAKO,GAAA;EACzB;EAEA,MAAMC,YAAA,GAAeX,gBAAA,CAAiBS,GAAA,EAAKP,IAAA,EAAMC,GAAA;EACjD,OAAOhB,KAAA,CAAMwB,YAAA,EAAcR,GAAA,EAAKO,GAAA;AAClC;AAEA,OAAO,MAAME,kBAAA,GAAqBA,CAChCX,KAAA,EACAY,IAAA,EACAC,EAAA,EACAC,OAAA,GAA6B,CAAC,CAAC;EAE/B,MAAMC,MAAA,GAAS,CAAEf,KAAA,GAAQY,IAAI,CAAC,EAAE,KAAKA,IAAI,CAAC,EAAE,GAAGA,IAAI,CAAC,EAAE,CAAD,IAAOC,EAAE,CAAC,EAAE,GAAGA,EAAE,CAAC,EAAE,CAAD,GAAKA,EAAE,CAAC,EAAE;EAClF,OAAON,oBAAA,CAAqBQ,MAAA,EAAQF,EAAE,CAAC,EAAE,EAAEA,EAAE,CAAC,EAAE,EAAEC,OAAA,CAAQb,IAAI;AAChE;AAEA,OAAO,MAAMe,SAAA,GAAYA,CAACC,CAAA,EAAWf,GAAA,EAAaO,GAAA,KAAgB,CAAEQ,CAAA,GAAIf,GAAE,KAAMO,GAAA,GAAMP,GAAE,IAAM;AAE9F,OAAO,MAAMgB,oBAAA,GAAuBA,CAClCC,MAAA,EACAC,KAAA,EACAlB,GAAA,EACAO,GAAA,EACAR,IAAA;EAEA,OAAOU,kBAAA,CAAmBQ,MAAA,EAAQ,CAAC,GAAGC,KAAA,CAAM,EAAE,CAAClB,GAAA,EAAKO,GAAA,CAAI,EAAE;IAAER;EAAK;AACnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}