{"ast":null,"code":"'use client';\n\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { getTelegramData } from \"../../../../helpers/telegram\";\nimport { AppRootContext } from \"../AppRootContext\";\nimport { getBrowserAppearanceSubscriber } from \"./helpers/getBrowserAppearanceSubscriber\";\nimport { getInitialAppearance } from \"./helpers/getInitialAppearance\";\nexport const useAppearance = appearanceProp => {\n  const {\n    appearance: contextAppearance\n  } = useContext(AppRootContext);\n  const [appearance, setAppearance] = useState(appearanceProp || contextAppearance || getInitialAppearance());\n  const handleThemeChange = useCallback(() => {\n    const telegramData = getTelegramData();\n    if (!telegramData) {\n      return;\n    }\n    setAppearance(telegramData.colorScheme);\n  }, []);\n  useEffect(() => {\n    if (appearanceProp !== undefined) {\n      setAppearance(appearanceProp);\n      return () => {};\n    }\n    const telegramData = getTelegramData();\n    if (telegramData) {\n      telegramData.onEvent('themeChanged', handleThemeChange);\n      return () => telegramData.offEvent('themeChanged', handleThemeChange);\n    }\n    return getBrowserAppearanceSubscriber(setAppearance);\n  }, [appearanceProp]);\n  return appearance;\n};","map":{"version":3,"names":["useCallback","useContext","useEffect","useState","getTelegramData","AppRootContext","getBrowserAppearanceSubscriber","getInitialAppearance","useAppearance","appearanceProp","appearance","contextAppearance","setAppearance","handleThemeChange","telegramData","colorScheme","undefined","onEvent","offEvent"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Service/AppRoot/hooks/useAppearance.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useContext, useEffect, useState } from 'react';\n\nimport { getTelegramData } from 'helpers/telegram';\n\nimport { AppRootContext, AppRootContextInterface } from '../AppRootContext';\nimport { getBrowserAppearanceSubscriber } from './helpers/getBrowserAppearanceSubscriber';\nimport { getInitialAppearance } from './helpers/getInitialAppearance';\n\nexport const useAppearance = (appearanceProp?: AppRootContextInterface['appearance']): NonNullable<AppRootContextInterface['appearance']> => {\n  const { appearance: contextAppearance } = useContext(AppRootContext);\n  const [appearance, setAppearance] = useState(appearanceProp || contextAppearance || getInitialAppearance());\n\n  const handleThemeChange = useCallback(() => {\n    const telegramData = getTelegramData();\n    if (!telegramData) {\n      return;\n    }\n\n    setAppearance(telegramData.colorScheme);\n  }, []);\n\n  useEffect(() => {\n    if (appearanceProp !== undefined) {\n      setAppearance(appearanceProp);\n      return () => {};\n    }\n\n    const telegramData = getTelegramData();\n    if (telegramData) {\n      telegramData.onEvent('themeChanged', handleThemeChange);\n      return () => telegramData.offEvent('themeChanged', handleThemeChange);\n    }\n\n    return getBrowserAppearanceSubscriber(setAppearance);\n  }, [appearanceProp]);\n\n  return appearance;\n};\n"],"mappings":"AAAA;;AAEA,SAASA,WAAW,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ;AAE7D,SAASC,eAAe,QAAQ;AAEhC,SAASC,cAAc,QAAiC;AACxD,SAASC,8BAA8B,QAAQ;AAC/C,SAASC,oBAAoB,QAAQ;AAErC,OAAO,MAAMC,aAAA,GAAiBC,cAAA;EAC5B,MAAM;IAAEC,UAAA,EAAYC;EAAiB,CAAE,GAAGV,UAAA,CAAWI,cAAA;EACrD,MAAM,CAACK,UAAA,EAAYE,aAAA,CAAc,GAAGT,QAAA,CAASM,cAAA,IAAkBE,iBAAA,IAAqBJ,oBAAA;EAEpF,MAAMM,iBAAA,GAAoBb,WAAA,CAAY;IACpC,MAAMc,YAAA,GAAeV,eAAA;IACrB,IAAI,CAACU,YAAA,EAAc;MACjB;IACF;IAEAF,aAAA,CAAcE,YAAA,CAAaC,WAAW;EACxC,GAAG,EAAE;EAELb,SAAA,CAAU;IACR,IAAIO,cAAA,KAAmBO,SAAA,EAAW;MAChCJ,aAAA,CAAcH,cAAA;MACd,OAAO,OAAO;IAChB;IAEA,MAAMK,YAAA,GAAeV,eAAA;IACrB,IAAIU,YAAA,EAAc;MAChBA,YAAA,CAAaG,OAAO,CAAC,gBAAgBJ,iBAAA;MACrC,OAAO,MAAMC,YAAA,CAAaI,QAAQ,CAAC,gBAAgBL,iBAAA;IACrD;IAEA,OAAOP,8BAAA,CAA+BM,aAAA;EACxC,GAAG,CAACH,cAAA,CAAe;EAEnB,OAAOC,UAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}