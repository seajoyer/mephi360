{"ast":null,"code":"'use client';\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useObjectMemo } from \"../../../hooks/useObjectMemo\";\nimport { AccordionContent } from \"./components/AccordionContent/AccordionContent\";\nimport { AccordionSummary } from \"./components/AccordionSummary/AccordionSummary\";\nimport { useAccordionId } from \"./hooks/useAccordionId\";\nimport { AccordionContext } from \"./AccordionContext\";\n/**\n * This component serves as a container for an accordion item, comprising a summary and\n * content sections. It uses the Context API to manage its state and to allow its children\n * (`Accordion.Summary` and `Accordion.Content`) to access shared state and callbacks.\n */\nexport const Accordion = ({\n  id,\n  expanded,\n  onChange,\n  children\n}) => {\n  const {\n    labelId,\n    contentId\n  } = useAccordionId(id);\n  const context = useObjectMemo({\n    labelId,\n    contentId,\n    expanded,\n    onChange\n  });\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: context,\n    children: children\n  });\n};\nAccordion.Summary = AccordionSummary;\nAccordion.Content = AccordionContent;","map":{"version":3,"names":["useObjectMemo","AccordionContent","AccordionSummary","useAccordionId","AccordionContext","Accordion","id","expanded","onChange","children","labelId","contentId","context","_jsx","Provider","value","Summary","Content"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Blocks/Accordion/Accordion.tsx"],"sourcesContent":["'use client';\n\nimport { ReactNode } from 'react';\n\nimport { useObjectMemo } from 'hooks/useObjectMemo';\n\nimport { AccordionContent } from './components/AccordionContent/AccordionContent';\nimport { AccordionSummary } from './components/AccordionSummary/AccordionSummary';\nimport { useAccordionId } from './hooks/useAccordionId';\nimport { AccordionContext } from './AccordionContext';\n\nexport interface AccordionProps {\n  /**\n   * Optional ID for the accordion element, enhancing accessibility (a11y) by associating the accordion\n   * summary and content. If not provided, a unique ID will be generated automatically.\n   * This ID is crucial for screen readers and other assistive technologies to understand the\n   * relationship between the accordion header and content.\n   */\n  id?: string;\n  /** Determines whether the accordion is currently expanded or collapsed. */\n  expanded: boolean;\n  /** Callback function that is called when the accordion's state changes, such as when it is opened or closed. */\n  onChange: (expanded: boolean) => void;\n  /**\n   * Children of the Accordion component. Pass `Accordion.Summary` and\n   * `Accordion.Content` as children to create a functional accordion structure.\n   */\n  children: ReactNode;\n}\n\n/**\n * This component serves as a container for an accordion item, comprising a summary and\n * content sections. It uses the Context API to manage its state and to allow its children\n * (`Accordion.Summary` and `Accordion.Content`) to access shared state and callbacks.\n */\nexport const Accordion = ({\n  id,\n  expanded,\n  onChange,\n  children,\n}: AccordionProps) => {\n  const { labelId, contentId } = useAccordionId(id);\n\n  const context = useObjectMemo({\n    labelId,\n    contentId,\n    expanded,\n    onChange,\n  });\n\n  return <AccordionContext.Provider value={context}>{children}</AccordionContext.Provider>;\n};\n\nAccordion.Summary = AccordionSummary;\nAccordion.Content = AccordionContent;\n"],"mappings":"AAAA;;;AAIA,SAASA,aAAa,QAAQ;AAE9B,SAASC,gBAAgB,QAAQ;AACjC,SAASC,gBAAgB,QAAQ;AACjC,SAASC,cAAc,QAAQ;AAC/B,SAASC,gBAAgB,QAAQ;AAqBjC;;;;;AAKA,OAAO,MAAMC,SAAA,GAAYA,CAAC;EACxBC,EAAE;EACFC,QAAQ;EACRC,QAAQ;EACRC;AAAQ,CACO;EACf,MAAM;IAAEC,OAAO;IAAEC;EAAS,CAAE,GAAGR,cAAA,CAAeG,EAAA;EAE9C,MAAMM,OAAA,GAAUZ,aAAA,CAAc;IAC5BU,OAAA;IACAC,SAAA;IACAJ,QAAA;IACAC;EACF;EAEA,oBAAOK,IAAA,CAACT,gBAAA,CAAiBU,QAAQ;IAACC,KAAA,EAAOH,OAAA;cAAUH;;AACrD;AAEAJ,SAAA,CAAUW,OAAO,GAAGd,gBAAA;AACpBG,SAAA,CAAUY,OAAO,GAAGhB,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}