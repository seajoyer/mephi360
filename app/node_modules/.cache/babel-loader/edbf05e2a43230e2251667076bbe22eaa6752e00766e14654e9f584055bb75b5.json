{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { isServicePreset } from \"../constants\";\nimport { getNewOptionData } from \"./getNewOptionData\";\nexport const transformOptions = ({\n  value,\n  inputValue = '',\n  emptyText,\n  creatable = false,\n  filterFn,\n  options: optionsProp,\n  selectedBehavior\n}) => {\n  const filteredOptionsProp = filterFn ? optionsProp.filter(option => filterFn(inputValue, option)) : optionsProp;\n  if (filteredOptionsProp.length === 0) {\n    if (inputValue !== '' && typeof creatable === 'string') {\n      return [_object_spread_props(_object_spread({}, getNewOptionData('', '')), {\n        actionText: creatable\n      })];\n    }\n    return [_object_spread_props(_object_spread({}, getNewOptionData('', '')), {\n      placeholder: emptyText\n    })];\n  }\n  if (selectedBehavior === 'hide') {\n    const selected = value.map(item => item.value);\n    return filteredOptionsProp.filter(item => {\n      return !isServicePreset(item) ? !selected.includes(item.value) : false;\n    });\n  }\n  return filteredOptionsProp;\n};","map":{"version":3,"names":["isServicePreset","getNewOptionData","transformOptions","value","inputValue","emptyText","creatable","filterFn","options","optionsProp","selectedBehavior","filteredOptionsProp","filter","option","length","_object_spread_props","_object_spread","actionText","placeholder","selected","map","item","includes"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Form/Multiselect/hooks/helpers/transformOptions.ts"],"sourcesContent":["import { isServicePreset } from 'components/Form/Multiselect/hooks/constants';\nimport { getNewOptionData } from 'components/Form/Multiselect/hooks/helpers/getNewOptionData';\nimport { UseMultiselectProps } from 'components/Form/Multiselect/hooks/useMultiselect';\nimport { MultiselectOption } from 'components/Form/Multiselect/types';\n\nexport const transformOptions = ({\n  value,\n  inputValue = '',\n  emptyText,\n  creatable = false,\n  filterFn,\n  options: optionsProp,\n  selectedBehavior,\n}: Required<Pick<UseMultiselectProps, 'value' | 'options' | 'emptyText'>> &\nPick<\nUseMultiselectProps,\n| 'inputValue'\n| 'emptyText'\n| 'creatable'\n| 'filterFn'\n| 'options'\n| 'selectedBehavior'\n>): MultiselectOption[] => {\n  const filteredOptionsProp = filterFn\n    ? optionsProp.filter((option) => filterFn(inputValue, option))\n    : optionsProp;\n\n  if (filteredOptionsProp.length === 0) {\n    if (inputValue !== '' && typeof creatable === 'string') {\n      return [{\n        ...getNewOptionData('', ''),\n        actionText: creatable,\n      }];\n    }\n\n    return [{\n      ...getNewOptionData('', ''),\n      placeholder: emptyText,\n    }];\n  }\n\n  if (selectedBehavior === 'hide') {\n    const selected = value.map((item) => item.value);\n    return filteredOptionsProp.filter((item) => {\n      return !isServicePreset(item) ? !selected.includes(item.value) : false;\n    });\n  }\n\n  return filteredOptionsProp;\n};\n"],"mappings":";;AAAA,SAASA,eAAe,QAAQ;AAChC,SAASC,gBAAgB,QAAQ;AAIjC,OAAO,MAAMC,gBAAA,GAAmBA,CAAC;EAC/BC,KAAK;EACLC,UAAA,GAAa,EAAE;EACfC,SAAS;EACTC,SAAA,GAAY,KAAK;EACjBC,QAAQ;EACRC,OAAA,EAASC,WAAW;EACpBC;AAAgB,CAUjB;EACC,MAAMC,mBAAA,GAAsBJ,QAAA,GACxBE,WAAA,CAAYG,MAAM,CAAEC,MAAA,IAAWN,QAAA,CAASH,UAAA,EAAYS,MAAA,KACpDJ,WAAA;EAEJ,IAAIE,mBAAA,CAAoBG,MAAM,KAAK,GAAG;IACpC,IAAIV,UAAA,KAAe,MAAM,OAAOE,SAAA,KAAc,UAAU;MACtD,OAAO,CAACS,oBAAA,CAAAC,cAAA,KACHf,gBAAA,CAAiB,IAAI;QACxBgB,UAAA,EAAYX;SACZ;IACJ;IAEA,OAAO,CAACS,oBAAA,CAAAC,cAAA,KACHf,gBAAA,CAAiB,IAAI;MACxBiB,WAAA,EAAab;OACb;EACJ;EAEA,IAAIK,gBAAA,KAAqB,QAAQ;IAC/B,MAAMS,QAAA,GAAWhB,KAAA,CAAMiB,GAAG,CAAEC,IAAA,IAASA,IAAA,CAAKlB,KAAK;IAC/C,OAAOQ,mBAAA,CAAoBC,MAAM,CAAES,IAAA;MACjC,OAAO,CAACrB,eAAA,CAAgBqB,IAAA,IAAQ,CAACF,QAAA,CAASG,QAAQ,CAACD,IAAA,CAAKlB,KAAK,IAAI;IACnE;EACF;EAEA,OAAOQ,mBAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}