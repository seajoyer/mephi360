{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { getCircleAttributes } from \"./helpers/getCircleAttributes\";\n/**\n * Renders a circular progress indicator, useful for displaying loading states or progress metrics.\n * The component dynamically adjusts its size and stroke based on the provided `size` prop and visually represents\n * the `progress` prop as a percentage of the circle's circumference.\n */\nexport const CircularProgress = ({\n  size = 'medium',\n  progress = 0\n}) => {\n  const circleAttributes = getCircleAttributes(size);\n  if (!circleAttributes) {\n    return null;\n  }\n  const circumference = 2 * Math.PI * circleAttributes.radius;\n  const circleSize = circleAttributes.size / 2;\n  return /*#__PURE__*/_jsxs(\"svg\", {\n    className: \"tgui-81a5164cd16c05d5\",\n    width: circleAttributes.size,\n    height: circleAttributes.size,\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    children: [/*#__PURE__*/_jsx(\"circle\", {\n      cx: circleSize,\n      cy: circleSize,\n      r: circleAttributes.radius,\n      strokeOpacity: \".1\",\n      strokeWidth: circleAttributes.strokeWidth,\n      fill: \"none\"\n    }), /*#__PURE__*/_jsx(\"circle\", {\n      fill: \"none\",\n      cx: circleSize,\n      cy: circleSize,\n      r: circleAttributes.radius,\n      strokeWidth: circleAttributes.strokeWidth,\n      strokeLinecap: \"round\",\n      strokeDasharray: circumference,\n      strokeDashoffset: circumference * ((100 - progress) / 100)\n    })]\n  });\n};","map":{"version":3,"names":["getCircleAttributes","CircularProgress","size","progress","circleAttributes","circumference","Math","PI","radius","circleSize","_jsxs","className","width","height","fill","xmlns","_jsx","cx","cy","r","strokeOpacity","strokeWidth","strokeLinecap","strokeDasharray","strokeDashoffset"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Feedback/CircularProgress/CircularProgress.tsx"],"sourcesContent":["import { HTMLAttributes } from 'react';\nimport styles from './CircularProgress.module.css';\n\nimport { getCircleAttributes } from 'components/Feedback/CircularProgress/helpers/getCircleAttributes';\n\nexport interface CircularProgressProps extends HTMLAttributes<HTMLOrSVGElement> {\n  /** Specifies the size of the circular progress indicator. Can be 'small', 'medium', or 'large'. */\n  size?: 'small' | 'medium' | 'large';\n  /** Current progress of the circular indicator, expressed as a percentage from 0 to 100. */\n  progress?: number;\n}\n\n/**\n * Renders a circular progress indicator, useful for displaying loading states or progress metrics.\n * The component dynamically adjusts its size and stroke based on the provided `size` prop and visually represents\n * the `progress` prop as a percentage of the circle's circumference.\n */\nexport const CircularProgress = ({\n  size = 'medium',\n  progress = 0,\n}: CircularProgressProps) => {\n  const circleAttributes = getCircleAttributes(size);\n  if (!circleAttributes) {\n    return null;\n  }\n\n  const circumference = 2 * Math.PI * circleAttributes.radius;\n  const circleSize = circleAttributes.size / 2;\n\n  return (\n    <svg\n      className={styles.wrapper}\n      width={circleAttributes.size}\n      height={circleAttributes.size}\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <circle\n        cx={circleSize}\n        cy={circleSize}\n        r={circleAttributes.radius}\n        strokeOpacity=\".1\"\n        strokeWidth={circleAttributes.strokeWidth}\n        fill=\"none\"\n      />\n      <circle\n        fill=\"none\"\n        cx={circleSize}\n        cy={circleSize}\n        r={circleAttributes.radius}\n        strokeWidth={circleAttributes.strokeWidth}\n        strokeLinecap=\"round\"\n        strokeDasharray={circumference}\n        strokeDashoffset={circumference * ((100 - progress) / 100)}\n      />\n    </svg>\n  );\n};\n"],"mappings":";AAGA,SAASA,mBAAmB,QAAQ;AASpC;;;;;AAKA,OAAO,MAAMC,gBAAA,GAAmBA,CAAC;EAC/BC,IAAA,GAAO,QAAQ;EACfC,QAAA,GAAW;AAAC,CACU;EACtB,MAAMC,gBAAA,GAAmBJ,mBAAA,CAAoBE,IAAA;EAC7C,IAAI,CAACE,gBAAA,EAAkB;IACrB,OAAO;EACT;EAEA,MAAMC,aAAA,GAAgB,IAAIC,IAAA,CAAKC,EAAE,GAAGH,gBAAA,CAAiBI,MAAM;EAC3D,MAAMC,UAAA,GAAaL,gBAAA,CAAiBF,IAAI,GAAG;EAE3C,oBACEQ,KAAA,CAAC;IACCC,SAAS;IACTC,KAAA,EAAOR,gBAAA,CAAiBF,IAAI;IAC5BW,MAAA,EAAQT,gBAAA,CAAiBF,IAAI;IAC7BY,IAAA,EAAK;IACLC,KAAA,EAAM;4BAENC,IAAA,CAAC;MACCC,EAAA,EAAIR,UAAA;MACJS,EAAA,EAAIT,UAAA;MACJU,CAAA,EAAGf,gBAAA,CAAiBI,MAAM;MAC1BY,aAAA,EAAc;MACdC,WAAA,EAAajB,gBAAA,CAAiBiB,WAAW;MACzCP,IAAA,EAAK;qBAEPE,IAAA,CAAC;MACCF,IAAA,EAAK;MACLG,EAAA,EAAIR,UAAA;MACJS,EAAA,EAAIT,UAAA;MACJU,CAAA,EAAGf,gBAAA,CAAiBI,MAAM;MAC1Ba,WAAA,EAAajB,gBAAA,CAAiBiB,WAAW;MACzCC,aAAA,EAAc;MACdC,eAAA,EAAiBlB,aAAA;MACjBmB,gBAAA,EAAkBnB,aAAA,IAAiB,CAAC,MAAMF,QAAO,IAAK,GAAE;;;AAIhE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}