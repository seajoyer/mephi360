{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { hasReactNode } from \"../../../helpers/react/node\";\nimport { Caption } from \"../../Typography/Caption/Caption\";\nimport { Subheadline } from \"../../Typography/Subheadline/Subheadline\";\nconst typeStyles = {\n  number: \"tgui-562f7459d74103ea\",\n  dot: \"tgui-4f69ed647e40e245\"\n};\nconst modeStyles = {\n  primary: \"tgui-6e63faaa2b33f4ae\",\n  critical: \"tgui-4b52474c713ffa7c\",\n  secondary: \"tgui-0278f262d68294f0\",\n  gray: \"tgui-0883e451f3707277\",\n  white: \"tgui-6b3dbcedd9052940\"\n};\n/**\n * The `Badge` component renders a small numeric or dot indicator, typically used for notifications, statuses, or counts.\n * It supports several visual modes for different contexts (e.g., critical, primary) and can be sized normally or enlarged.\n */\nexport const Badge = _param => {\n  var {\n      type,\n      mode = 'primary',\n      large,\n      className,\n      children\n    } = _param,\n    restProps = _object_without_properties(_param, [\"type\", \"mode\", \"large\", \"className\", \"children\"]);\n  const isNumber = type === 'number';\n  return /*#__PURE__*/_jsx(\"span\", _object_spread_props(_object_spread({\n    className: classNames(\"tgui-c8f4bcd1606fb026\", typeStyles[type], modeStyles[mode], isNumber && large && \"tgui-c1a5e9170826a773\", className)\n  }, restProps), {\n    children: hasReactNode(children) && isNumber && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [large && /*#__PURE__*/_jsx(Subheadline, {\n        Component: \"span\",\n        level: \"2\",\n        weight: \"2\",\n        children: children\n      }), !large && /*#__PURE__*/_jsx(Caption, {\n        weight: \"2\",\n        children: children\n      })]\n    })\n  }));\n};","map":{"version":3,"names":["classNames","hasReactNode","Caption","Subheadline","typeStyles","number","dot","modeStyles","primary","critical","secondary","gray","white","Badge","_param","type","mode","large","className","children","restProps","_object_without_properties","isNumber","_jsx","_object_spread_props","_object_spread","_jsxs","_Fragment","Component","level","weight"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Blocks/Badge/Badge.tsx"],"sourcesContent":["import { HTMLAttributes } from 'react';\nimport styles from './Badge.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\n\nimport { Caption } from 'components/Typography/Caption/Caption';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\n\nexport interface BadgeProps extends HTMLAttributes<HTMLSpanElement> {\n  /** The visual style of the badge: 'number' displays the content, 'dot' shows a simple dot. */\n  type: 'number' | 'dot';\n  /** The color scheme of the badge, affecting its background and text color. */\n  mode?: 'primary' | 'critical' | 'secondary' | 'gray' | 'white';\n  /** Increases the size of the badge. Applicable only when `type` is 'number'. */\n  large?: boolean;\n}\n\nconst typeStyles = {\n  number: styles['wrapper--number'],\n  dot: styles['wrapper--dot'],\n};\n\nconst modeStyles = {\n  primary: styles['wrapper--primary'],\n  critical: styles['wrapper--critical'],\n  secondary: styles['wrapper--secondary'],\n  gray: styles['wrapper--gray'],\n  white: styles['wrapper--white'],\n};\n\n/**\n * The `Badge` component renders a small numeric or dot indicator, typically used for notifications, statuses, or counts.\n * It supports several visual modes for different contexts (e.g., critical, primary) and can be sized normally or enlarged.\n */\nexport const Badge = ({\n  type,\n  mode = 'primary',\n  large,\n  className,\n  children,\n  ...restProps\n}: BadgeProps) => {\n  const isNumber = type === 'number';\n  return (\n    <span\n      className={classNames(\n        styles.wrapper,\n        typeStyles[type],\n        modeStyles[mode],\n        isNumber && large && styles['wrapper--large'],\n        className,\n      )}\n      {...restProps}\n    >\n      {hasReactNode(children) && isNumber && (\n        <>\n          {large && <Subheadline Component=\"span\" level=\"2\" weight=\"2\">{children}</Subheadline>}\n          {!large && <Caption weight=\"2\">{children}</Caption>}\n        </>\n      )}\n    </span>\n  );\n};\n"],"mappings":";;;;AAGA,SAASA,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAE7B,SAASC,OAAO,QAAQ;AACxB,SAASC,WAAW,QAAQ;AAW5B,MAAMC,UAAA,GAAa;EACjBC,MAAM;EACNC,GAAG;AACL;AAEA,MAAMC,UAAA,GAAa;EACjBC,OAAO;EACPC,QAAQ;EACRC,SAAS;EACTC,IAAI;EACJC,KAAK;AACP;AAEA;;;;AAIA,OAAO,MAAMC,KAAA,GAAQC,MAAA;MAAC;MACpBC,IAAI;MACJC,IAAA,GAAO,SAAS;MAChBC,KAAK;MACLC,SAAS;MACTC;IAAQ,CAEG,GAAAL,MAAA;IADRM,SAAA,GAAAC,0BAAA,CAAAP,MAAA,GALH,QACA,QACA,SACA,aACA,W;EAGA,MAAMQ,QAAA,GAAWP,IAAA,KAAS;EAC1B,oBACEQ,IAAA,CAAC,QAAAC,oBAAA,CAAAC,cAAA;IACCP,SAAA,EAAWlB,UAAA,0BAETI,UAAU,CAACW,IAAA,CAAK,EAChBR,UAAU,CAACS,IAAA,CAAK,EAChBM,QAAA,IAAYL,KAAA,6BACZC,SAAA;KAEEE,SAAA;cAEHnB,YAAA,CAAakB,QAAA,KAAaG,QAAA,iBACzBI,KAAA,CAAAC,SAAA;iBACGV,KAAA,iBAASM,IAAA,CAACpB,WAAA;QAAYyB,SAAA,EAAU;QAAOC,KAAA,EAAM;QAAIC,MAAA,EAAO;kBAAKX;UAC7D,CAACF,KAAA,iBAASM,IAAA,CAACrB,OAAA;QAAQ4B,MAAA,EAAO;kBAAKX;;;;AAK1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}