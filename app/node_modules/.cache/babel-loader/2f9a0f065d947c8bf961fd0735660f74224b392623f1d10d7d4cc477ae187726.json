{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { classNames } from \"../../../../../helpers/classNames\";\nimport { getArrowPositionData } from \"./helpers/getArrowPositionData\";\nimport { DefaultIcon } from \"./icons/arrow\";\nconst placementStyles = {\n  right: \"tgui-6c3deae89ec68e99\",\n  bottom: \"tgui-fed67e27ad8cb75f\",\n  left: \"tgui-b27d1c4f6222569e\"\n};\n/**\n * FloatingArrow dynamically positions an arrow indicator relative to a floating element,\n * such as a tooltip to signify its association with a target element.\n * Supports custom arrow icons and positioning adjustments.\n */\nexport const FloatingArrow = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      style,\n      offset,\n      isStaticOffset,\n      coords,\n      placement = 'bottom',\n      Icon = DefaultIcon,\n      className\n    } = _param,\n    restProps = _object_without_properties(_param, [\"style\", \"offset\", \"isStaticOffset\", \"coords\", \"placement\", \"Icon\", \"className\"]);\n  const [arrowPlacement, arrowStyles] = getArrowPositionData(placement, coords, offset, isStaticOffset);\n  return /*#__PURE__*/_jsx(\"div\", _object_spread_props(_object_spread({\n    ref: ref,\n    style: _object_spread({}, arrowStyles, style),\n    className: classNames(\"tgui-97a62789a70393d0\", arrowPlacement && placementStyles[arrowPlacement], className)\n  }, restProps), {\n    children: /*#__PURE__*/_jsx(Icon, {\n      className: \"tgui-6ae8c47f9448321b\"\n    })\n  }));\n});","map":{"version":3,"names":["forwardRef","classNames","getArrowPositionData","DefaultIcon","placementStyles","right","bottom","left","FloatingArrow","_param","ref","style","offset","isStaticOffset","coords","placement","Icon","className","restProps","_object_without_properties","arrowPlacement","arrowStyles","_jsx","_object_spread_props","_object_spread"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Overlays/Popper/components/FloatingArrow/FloatingArrow.tsx"],"sourcesContent":["import { ComponentType, forwardRef, HTMLAttributes, SVGAttributes } from 'react';\nimport styles from './FloatingArrow.module.css';\n\nimport { classNames } from 'helpers/classNames';\n\nimport { Placement } from '@floating-ui/react-dom';\n\nimport { Coords, getArrowPositionData } from './helpers/getArrowPositionData';\nimport { DefaultIcon } from './icons/arrow';\n\nconst placementStyles = {\n  right: styles['wrapper--placement-right'],\n  bottom: styles['wrapper--placement-bottom'],\n  left: styles['wrapper--placement-left'],\n};\n\nexport interface FloatingArrowProps extends HTMLAttributes<HTMLDivElement> {\n  /** Optional distance from the target element, influencing the arrow's placement. */\n  offset?: number;\n  /** When true, the offset distance remains constant, regardless of the arrow's placement. */\n  isStaticOffset?: boolean;\n  /** Coordinates for the arrow, useful for precise positioning when the arrow is not directly adjacent to its target. */\n  coords?: Coords;\n  /** The preferred placement of the arrow relative to its target element. */\n  placement?: Placement;\n  /** A React component for rendering the arrow icon, allowing for custom arrow designs. */\n  Icon?: ComponentType<SVGAttributes<SVGSVGElement>>;\n}\n\n/**\n * FloatingArrow dynamically positions an arrow indicator relative to a floating element,\n * such as a tooltip to signify its association with a target element.\n * Supports custom arrow icons and positioning adjustments.\n */\nexport const FloatingArrow = forwardRef<HTMLDivElement, FloatingArrowProps>(({\n  style,\n  offset,\n  isStaticOffset,\n  coords,\n  placement = 'bottom',\n  Icon = DefaultIcon,\n  className,\n  ...restProps\n}, ref) => {\n  const [arrowPlacement, arrowStyles] = getArrowPositionData(\n    placement,\n    coords,\n    offset,\n    isStaticOffset,\n  );\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        ...arrowStyles,\n        ...style,\n      }}\n      className={classNames(\n        styles.wrapper,\n        arrowPlacement && placementStyles[arrowPlacement],\n        className,\n      )}\n      {...restProps}\n    >\n      <Icon className={styles.icon} />\n    </div>\n  );\n});\n"],"mappings":";;;;AAAA,SAAwBA,UAAU,QAAuC;AAGzE,SAASC,UAAU,QAAQ;AAI3B,SAAiBC,oBAAoB,QAAQ;AAC7C,SAASC,WAAW,QAAQ;AAE5B,MAAMC,eAAA,GAAkB;EACtBC,KAAK;EACLC,MAAM;EACNC,IAAI;AACN;AAeA;;;;;AAKA,OAAO,MAAMC,aAAA,gBAAgBR,UAAA,CAA+C,CAAAS,MAAA,EASzEC,GAAA;MAT0E;MAC3EC,KAAK;MACLC,MAAM;MACNC,cAAc;MACdC,MAAM;MACNC,SAAA,GAAY,QAAQ;MACpBC,IAAA,GAAOb,WAAW;MAClBc;IAAS,CAEV,GAAAR,MAAA;IADIS,SAAA,GAAAC,0BAAA,CAAAV,MAAA,GAPH,SACA,UACA,kBACA,UACA,aACA,QACA,Y;EAGA,MAAM,CAACW,cAAA,EAAgBC,WAAA,CAAY,GAAGnB,oBAAA,CACpCa,SAAA,EACAD,MAAA,EACAF,MAAA,EACAC,cAAA;EAGF,oBACES,IAAA,CAAC,OAAAC,oBAAA,CAAAC,cAAA;IACCd,GAAA,EAAKA,GAAA;IACLC,KAAA,EAAOa,cAAA,KACFH,WAAA,EACAV,KAAA;IAELM,SAAA,EAAWhB,UAAA,0BAETmB,cAAA,IAAkBhB,eAAe,CAACgB,cAAA,CAAe,EACjDH,SAAA;KAEEC,SAAA;cAEJ,aAAAI,IAAA,CAACN,IAAA;MAAKC,SAAS;;;AAGrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}