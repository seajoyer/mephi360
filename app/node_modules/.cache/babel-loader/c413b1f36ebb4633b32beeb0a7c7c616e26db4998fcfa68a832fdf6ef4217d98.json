{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useContext } from \"react\";\nimport { classNames } from \"../../../../../helpers/classNames\";\nimport { hasReactNode } from \"../../../../../helpers/react/node\";\nimport { usePlatform } from \"../../../../../hooks/usePlatform\";\nimport { Tappable } from \"../../../../Service/Tappable/Tappable\";\nimport { Caption } from \"../../../../Typography/Caption/Caption\";\nimport { InlineButtonsContext } from \"../../InlineButtonsContext\";\nconst modeStyles = {\n  bezeled: \"tgui-99a630d0096f2169\",\n  gray: \"tgui-30bf4976f818e8bf\"\n};\n/**\n * `InlineButtons.Item` is designed for use within an InlineButtons container but can also serve as a standalone button\n * if used by itself. It supports displaying optional text and can inherit a styling mode from its parent InlineButtons\n * context or utilize a locally defined mode. This flexibility allows it to seamlessly integrate within various layouts\n * and designs, providing a consistent and adaptable interface element.\n */\nexport const InlineButtonsItem = _param => {\n  var {\n      mode: propsMode = 'plain',\n      className,\n      text,\n      children\n    } = _param,\n    restProps = _object_without_properties(_param, [\"mode\", \"className\", \"text\", \"children\"]);\n  const platform = usePlatform();\n  const {\n    mode: inheritMode\n  } = useContext(InlineButtonsContext);\n  const mode = inheritMode || propsMode;\n  return /*#__PURE__*/_jsxs(Tappable, _object_spread_props(_object_spread({\n    Component: \"button\",\n    className: classNames(\"tgui-c5545e0bc6105e48\", platform === 'ios' && \"tgui-bf32cd3c110b8729\", mode !== 'plain' && modeStyles[mode], className)\n  }, restProps), {\n    children: [children, hasReactNode(text) && /*#__PURE__*/_jsx(Caption, {\n      className: \"tgui-c0c9bf3b1a53a8a4\",\n      level: \"1\",\n      weight: \"2\",\n      children: text\n    })]\n  }));\n};","map":{"version":3,"names":["useContext","classNames","hasReactNode","usePlatform","Tappable","Caption","InlineButtonsContext","modeStyles","bezeled","gray","InlineButtonsItem","_param","mode","propsMode","className","text","children","restProps","_object_without_properties","platform","inheritMode","_jsxs","_object_spread_props","_object_spread","Component","_jsx","level","weight"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Blocks/InlineButtons/components/InlineButtonsItem/InlineButtonsItem.tsx"],"sourcesContent":["'use client';\n\nimport { ButtonHTMLAttributes, ReactNode, useContext } from 'react';\nimport styles from './InlineButtonsItem.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Tappable } from 'components/Service/Tappable/Tappable';\nimport { Caption } from 'components/Typography/Caption/Caption';\nimport { InlineButtonsContext, InlineButtonsContextProps } from '../../InlineButtonsContext';\n\nexport interface InlineButtonsItemProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  /** Text displayed inside the button. */\n  text?: string;\n  /** Optional mode for styling the button, with 'plain' as the default. */\n  mode?: InlineButtonsContextProps['mode'];\n  /** Typically an Icon, to be rendered inside the button. */\n  children?: ReactNode;\n}\n\nconst modeStyles = {\n  bezeled: styles['wrapper--bezeled'],\n  gray: styles['wrapper--gray'],\n};\n\n/**\n * `InlineButtons.Item` is designed for use within an InlineButtons container but can also serve as a standalone button\n * if used by itself. It supports displaying optional text and can inherit a styling mode from its parent InlineButtons\n * context or utilize a locally defined mode. This flexibility allows it to seamlessly integrate within various layouts\n * and designs, providing a consistent and adaptable interface element.\n */\nexport const InlineButtonsItem = ({\n  mode: propsMode = 'plain',\n  className,\n  text,\n  children,\n  ...restProps\n}: InlineButtonsItemProps) => {\n  const platform = usePlatform();\n  const { mode: inheritMode } = useContext(InlineButtonsContext);\n\n  const mode = inheritMode || propsMode;\n  return (\n    <Tappable\n      Component=\"button\"\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        mode !== 'plain' && modeStyles[mode],\n        className,\n      )}\n      {...restProps}\n    >\n      {children}\n      {hasReactNode(text) && <Caption className={styles.text} level=\"1\" weight=\"2\">{text}</Caption>}\n    </Tappable>\n  );\n};\n"],"mappings":"AAAA;;;;;;AAEA,SAA0CA,UAAU,QAAQ;AAG5D,SAASC,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAC7B,SAASC,WAAW,QAAQ;AAE5B,SAASC,QAAQ,QAAQ;AACzB,SAASC,OAAO,QAAQ;AACxB,SAASC,oBAAoB,QAAmC;AAWhE,MAAMC,UAAA,GAAa;EACjBC,OAAO;EACPC,IAAI;AACN;AAEA;;;;;;AAMA,OAAO,MAAMC,iBAAA,GAAoBC,MAAA;MAAC;MAChCC,IAAA,EAAMC,SAAA,GAAY,OAAO;MACzBC,SAAS;MACTC,IAAI;MACJC;IAAQ,CAEe,GAAAL,MAAA;IADpBM,SAAA,GAAAC,0BAAA,CAAAP,MAAA,GAJH,QACA,aACA,QACA,W;EAGA,MAAMQ,QAAA,GAAWhB,WAAA;EACjB,MAAM;IAAES,IAAA,EAAMQ;EAAW,CAAE,GAAGpB,UAAA,CAAWM,oBAAA;EAEzC,MAAMM,IAAA,GAAOQ,WAAA,IAAeP,SAAA;EAC5B,oBACEQ,KAAA,CAACjB,QAAA,EAAAkB,oBAAA,CAAAC,cAAA;IACCC,SAAA,EAAU;IACVV,SAAA,EAAWb,UAAA,0BAETkB,QAAA,KAAa,kCACbP,IAAA,KAAS,WAAWL,UAAU,CAACK,IAAA,CAAK,EACpCE,SAAA;KAEEG,SAAA;eAEHD,QAAA,EACAd,YAAA,CAAaa,IAAA,kBAASU,IAAA,CAACpB,OAAA;MAAQS,SAAS;MAAeY,KAAA,EAAM;MAAIC,MAAA,EAAO;gBAAKZ;;;AAGpF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}