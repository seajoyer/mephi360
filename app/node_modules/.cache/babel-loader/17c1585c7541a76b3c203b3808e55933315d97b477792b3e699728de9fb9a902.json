{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { classNames } from \"../../../helpers/classNames\";\nconst verticalStyles = {\n  top: \"tgui-d83e15d73344cdc0\",\n  bottom: \"tgui-01790b7e59088ea5\"\n};\n/**\n * This component provides a flexible way to create a layout that is fixed to either the top or bottom of its parent container.\n * It's useful for creating headers, footers, or any element that should remain in view regardless of the scrolling content.\n */\nexport const FixedLayout = _param => {\n  var {\n      Component = 'div',\n      vertical = 'bottom',\n      className,\n      children\n    } = _param,\n    restProps = _object_without_properties(_param, [\"Component\", \"vertical\", \"className\", \"children\"]);\n  return /*#__PURE__*/_jsx(Component, _object_spread_props(_object_spread({\n    className: classNames(\"tgui-7a5facec9dc28fae\", vertical && verticalStyles[vertical], className)\n  }, restProps), {\n    children: children\n  }));\n};","map":{"version":3,"names":["classNames","verticalStyles","top","bottom","FixedLayout","_param","Component","vertical","className","children","restProps","_object_without_properties","_jsx","_object_spread_props","_object_spread"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Layout/FixedLayout/FixedLayout.tsx"],"sourcesContent":["import { AllHTMLAttributes, ElementType } from 'react';\nimport styles from './FixedLayout.module.css';\n\nimport { classNames } from 'helpers/classNames';\n\nexport interface FixedLayoutProps extends AllHTMLAttributes<HTMLElement> {\n  /** The component type to render, allowing for semantic HTML use. Defaults to 'div'. */\n  Component?: ElementType;\n  /** Determines the vertical positioning of the layout within its container. Options are 'top' or 'bottom'. */\n  vertical?: 'top' | 'bottom';\n}\n\nconst verticalStyles = {\n  top: styles['wrapper--top'],\n  bottom: styles['wrapper--bottom'],\n};\n\n/**\n * This component provides a flexible way to create a layout that is fixed to either the top or bottom of its parent container.\n * It's useful for creating headers, footers, or any element that should remain in view regardless of the scrolling content.\n */\nexport const FixedLayout = ({\n  Component = 'div',\n  vertical = 'bottom',\n  className,\n  children,\n  ...restProps\n}: FixedLayoutProps) => {\n  return (\n    <Component\n      className={classNames(\n        styles.wrapper,\n        vertical && verticalStyles[vertical],\n        className,\n      )}\n      {...restProps}\n    >\n      {children}\n    </Component>\n  );\n};\n\n"],"mappings":";;;;AAGA,SAASA,UAAU,QAAQ;AAS3B,MAAMC,cAAA,GAAiB;EACrBC,GAAG;EACHC,MAAM;AACR;AAEA;;;;AAIA,OAAO,MAAMC,WAAA,GAAcC,MAAA;MAAC;MAC1BC,SAAA,GAAY,KAAK;MACjBC,QAAA,GAAW,QAAQ;MACnBC,SAAS;MACTC;IAAQ,CAES,GAAAJ,MAAA;IADdK,SAAA,GAAAC,0BAAA,CAAAN,MAAA,GAJH,aACA,YACA,aACA,W;EAGA,oBACEO,IAAA,CAACN,SAAA,EAAAO,oBAAA,CAAAC,cAAA;IACCN,SAAA,EAAWR,UAAA,0BAETO,QAAA,IAAYN,cAAc,CAACM,QAAA,CAAS,EACpCC,SAAA;KAEEE,SAAA;cAEHD;;AAGP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}