{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { classNames } from \"../../../../../helpers/classNames\";\nimport { hasReactNode } from \"../../../../../helpers/react/node\";\nimport { usePlatform } from \"../../../../../hooks/usePlatform\";\nimport { Tappable } from \"../../../../Service/Tappable/Tappable\";\nimport { Caption } from \"../../../../Typography/Caption/Caption\";\n/**\n * Represents an individual tab within a `Tabbar`.\n * Each `Tabbar.Item` typically contains an icon and optional text.\n * When selected, the tab exhibit different visual styles to indicate its active state.\n *\n * The component adapts its styling based on the platform, providing a consistent look and feel across different devices.\n */\nexport const TabbarItem = _param => {\n  var {\n      selected,\n      text,\n      children,\n      className\n    } = _param,\n    restProps = _object_without_properties(_param, [\"selected\", \"text\", \"children\", \"className\"]);\n  const platform = usePlatform();\n  return /*#__PURE__*/_jsxs(Tappable, _object_spread_props(_object_spread({\n    Component: \"button\",\n    interactiveAnimation: \"opacity\",\n    className: classNames(\"tgui-64cd0db020a9bacf\", platform === 'ios' && \"tgui-ecbb746748ea4134\", selected && \"tgui-e6658d0b8927f95e\", className)\n  }, restProps), {\n    children: [hasReactNode(children) && /*#__PURE__*/_jsx(\"div\", {\n      className: \"tgui-44d48e11585af170\",\n      children: children\n    }), hasReactNode(text) && /*#__PURE__*/_jsx(Caption, {\n      className: \"tgui-aeab497081949a15\",\n      weight: \"2\",\n      level: platform === 'ios' ? '2' : '1',\n      children: text\n    })]\n  }));\n};","map":{"version":3,"names":["classNames","hasReactNode","usePlatform","Tappable","Caption","TabbarItem","_param","selected","text","children","className","restProps","_object_without_properties","platform","_jsxs","_object_spread_props","_object_spread","Component","interactiveAnimation","_jsx","weight","level"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Layout/Tabbar/components/TabbarItem/TabbarItem.tsx"],"sourcesContent":["'use client';\n\nimport { ButtonHTMLAttributes, ReactNode } from 'react';\nimport styles from './TabbarItem.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Tappable } from 'components/Service/Tappable/Tappable';\nimport { Caption } from 'components/Typography/Caption/Caption';\n\nexport interface TabbarItemProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  /** Indicates whether the tab is selected or active. */\n  selected?: boolean;\n  /** The text displayed on the tab. */\n  text?: string;\n  /** The icon displayed on the tab. It should be passed as a ReactNode with dimensions of 28x28. */\n  children?: ReactNode;\n}\n\n/**\n * Represents an individual tab within a `Tabbar`.\n * Each `Tabbar.Item` typically contains an icon and optional text.\n * When selected, the tab exhibit different visual styles to indicate its active state.\n *\n * The component adapts its styling based on the platform, providing a consistent look and feel across different devices.\n */\nexport const TabbarItem = ({\n  selected,\n  text,\n  children,\n  className,\n  ...restProps\n}: TabbarItemProps) => {\n  const platform = usePlatform();\n\n  return (\n    <Tappable\n      Component=\"button\"\n      interactiveAnimation=\"opacity\"\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        selected && styles['wrapper--selected'],\n        className,\n      )}\n      {...restProps}\n    >\n      {hasReactNode(children) && (\n        <div className={styles.icon}>\n          {children}\n        </div>\n      )}\n      {hasReactNode(text) && (\n        <Caption\n          className={styles.text}\n          weight=\"2\"\n          level={platform === 'ios' ? '2' : '1'}\n        >\n          {text}\n        </Caption>\n      )}\n    </Tappable>\n  );\n};\n"],"mappings":"AAAA;;;;;;AAKA,SAASA,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAC7B,SAASC,WAAW,QAAQ;AAE5B,SAASC,QAAQ,QAAQ;AACzB,SAASC,OAAO,QAAQ;AAWxB;;;;;;;AAOA,OAAO,MAAMC,UAAA,GAAaC,MAAA;MAAC;MACzBC,QAAQ;MACRC,IAAI;MACJC,QAAQ;MACRC;IAAS,CAEO,GAAAJ,MAAA;IADbK,SAAA,GAAAC,0BAAA,CAAAN,MAAA,GAJH,YACA,QACA,YACA,Y;EAGA,MAAMO,QAAA,GAAWX,WAAA;EAEjB,oBACEY,KAAA,CAACX,QAAA,EAAAY,oBAAA,CAAAC,cAAA;IACCC,SAAA,EAAU;IACVC,oBAAA,EAAqB;IACrBR,SAAA,EAAWV,UAAA,0BAETa,QAAA,KAAa,kCACbN,QAAA,6BACAG,SAAA;KAEEC,SAAA;eAEHV,YAAA,CAAaQ,QAAA,kBACZU,IAAA,CAAC;MAAIT,SAAS;gBACXD;QAGJR,YAAA,CAAaO,IAAA,kBACZW,IAAA,CAACf,OAAA;MACCM,SAAS;MACTU,MAAA,EAAO;MACPC,KAAA,EAAOR,QAAA,KAAa,QAAQ,MAAM;gBAEjCL;;;AAKX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}