{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { Keys } from \"../../../helpers/accessibility\";\nimport { createChunks } from \"../../../helpers/chunk\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { usePlatform } from \"../../../hooks/usePlatform\";\nimport { Icon36Backspace } from \"../../../icons/36/backspace\";\nimport { PinInputButton } from \"./components/PinInputButton/PinInputButton\";\nimport { RootRenderer } from \"../../Service/RootRenderer/RootRenderer\";\nimport { Headline } from \"../../Typography/Headline/Headline\";\nimport { PinInputCell } from \"./components/PinInputCell/PinInputCell\";\nimport { AVAILABLE_PINS, usePinInput } from \"./hooks/usePinInput\";\nconst PIN_MIN_COUNT = 2;\n/**\n * Renders a set of input fields for entering pin codes with a virtual keypad for value entry and deletion.\n */\nexport const PinInput = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      label = 'Enter your pin',\n      pinCount = 4,\n      className,\n      value: valueProp = [],\n      onChange\n    } = _param,\n    restProps = _object_without_properties(_param, [\"label\", \"pinCount\", \"className\", \"value\", \"onChange\"]);\n  const platform = usePlatform();\n  const normalizedPinCount = Math.max(PIN_MIN_COUNT, pinCount);\n  const {\n    handleClickValue,\n    handleClickBackspace,\n    setInputRefByIndex,\n    value,\n    handleButton\n  } = usePinInput({\n    value: valueProp,\n    onChange,\n    pinCount: normalizedPinCount\n  });\n  return /*#__PURE__*/_jsx(RootRenderer, {\n    children: /*#__PURE__*/_jsxs(\"section\", _object_spread_props(_object_spread({\n      ref: ref,\n      className: classNames(\"tgui-a641ca1e63331268\", platform === 'ios' && \"tgui-bf64531d065e1bd9\", className)\n    }, restProps), {\n      children: [/*#__PURE__*/_jsxs(\"header\", {\n        className: \"tgui-a40b67b8ec9e3a49\",\n        children: [/*#__PURE__*/_jsx(Headline, {\n          className: \"tgui-7df9ee9d6d6586de\",\n          weight: \"2\",\n          children: label\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"tgui-36c453f0a9d51371\",\n          children: Array.from({\n            length: normalizedPinCount\n          }).map((_, index) => /*#__PURE__*/_jsx(PinInputCell, {\n            ref: labelRef => setInputRefByIndex(index, labelRef),\n            isTyped: index < value.length,\n            value: value[index] || '',\n            onKeyDown: event => handleButton(index, event.key),\n            autoFocus: index === 0,\n            tabIndex: -1,\n            readOnly: true\n          }, index))\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"tgui-0e77c7f1a1b82c84\",\n        children: createChunks(AVAILABLE_PINS, 3).map(rows => /*#__PURE__*/_jsx(\"div\", {\n          className: \"tgui-49b69c407401f76c\",\n          children: rows.map(element => {\n            let children = element;\n            let clickFunction = () => handleClickValue(Number(element));\n            if (element === Keys.BACKSPACE) {\n              clickFunction = () => handleClickBackspace();\n              children = /*#__PURE__*/_jsx(Icon36Backspace, {\n                className: \"tgui-14d79626209a204a\"\n              });\n            }\n            return /*#__PURE__*/_jsx(PinInputButton, {\n              onClick: clickFunction,\n              children: children\n            }, element);\n          })\n        }, rows.toString()))\n      })]\n    }))\n  });\n});","map":{"version":3,"names":["forwardRef","Keys","createChunks","classNames","usePlatform","Icon36Backspace","PinInputButton","RootRenderer","Headline","PinInputCell","AVAILABLE_PINS","usePinInput","PIN_MIN_COUNT","PinInput","_param","ref","label","pinCount","className","value","valueProp","onChange","restProps","_object_without_properties","platform","normalizedPinCount","Math","max","handleClickValue","handleClickBackspace","setInputRefByIndex","handleButton","_jsx","_jsxs","_object_spread_props","_object_spread","weight","Array","from","length","map","_","index","labelRef","isTyped","onKeyDown","event","key","autoFocus","tabIndex","readOnly","rows","element","children","clickFunction","Number","BACKSPACE","onClick","toString"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Form/PinInput/PinInput.tsx"],"sourcesContent":["import { forwardRef, HTMLAttributes, ReactNode } from 'react';\nimport styles from './PinInput.module.css';\n\nimport { Keys } from 'helpers/accessibility';\nimport { createChunks } from 'helpers/chunk';\nimport { classNames } from 'helpers/classNames';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Icon36Backspace } from 'icons/36/backspace';\n\nimport { PinInputButton } from 'components/Form/PinInput/components/PinInputButton/PinInputButton';\nimport { RootRenderer } from 'components/Service/RootRenderer/RootRenderer';\nimport { Headline } from 'components/Typography/Headline/Headline';\nimport { PinInputCell } from './components/PinInputCell/PinInputCell';\nimport { AVAILABLE_PINS, usePinInput } from './hooks/usePinInput';\n\nexport interface PinInputProps extends Omit<HTMLAttributes<HTMLElement>, 'onChange'> {\n  /** Text label displayed above the pin input cells. */\n  label?: string;\n  /** The number of pin input fields to display, with a minimum of 2. */\n  pinCount?: number;\n  /** The initial pin values to populate the input fields with. */\n  value?: number[];\n  /** Callback function triggered when the pin values change. */\n  onChange?: (value: number[]) => void;\n}\n\nconst PIN_MIN_COUNT = 2;\n\n/**\n * Renders a set of input fields for entering pin codes with a virtual keypad for value entry and deletion.\n */\nexport const PinInput = forwardRef<HTMLElement, PinInputProps>(({\n  label = 'Enter your pin',\n  pinCount = 4,\n  className,\n  value: valueProp = [],\n  onChange,\n  ...restProps\n}, ref) => {\n  const platform = usePlatform();\n  const normalizedPinCount = Math.max(PIN_MIN_COUNT, pinCount);\n\n  const {\n    handleClickValue,\n    handleClickBackspace,\n    setInputRefByIndex,\n    value,\n    handleButton,\n  } = usePinInput({\n    value: valueProp,\n    onChange,\n    pinCount: normalizedPinCount,\n  });\n\n  return (\n    <RootRenderer>\n      <section\n        ref={ref}\n        className={classNames(\n          styles.wrapper,\n          platform === 'ios' && styles['wrapper--ios'],\n          className,\n        )}\n        {...restProps}\n      >\n        <header className={styles.header}>\n          <Headline className={styles.title} weight=\"2\">{label}</Headline>\n          <div className={styles.cellsWrapper}>\n            {Array.from({ length: normalizedPinCount }).map((_, index) => (\n              <PinInputCell\n                /* We can't use useId here, because if pinCount changes in runtime, it will crash because amount of renders will be different */\n                /* eslint-disable-next-line react/no-array-index-key */\n                key={index}\n                ref={(labelRef) => setInputRefByIndex(index, labelRef)}\n                isTyped={index < value.length}\n                value={value[index] || ''}\n                onKeyDown={(event) => handleButton(index, event.key)}\n                autoFocus={index === 0}\n                tabIndex={-1}\n                readOnly\n              />\n            ))}\n          </div>\n        </header>\n        <div className={styles.buttonWrapper}>\n          {createChunks(AVAILABLE_PINS, 3).map((rows) => (\n            <div key={rows.toString()} className={styles.row}>\n              {rows.map((element) => {\n                let children: ReactNode = element;\n                let clickFunction = () => handleClickValue(Number(element));\n\n                if (element === Keys.BACKSPACE) {\n                  clickFunction = () => handleClickBackspace();\n                  children = <Icon36Backspace className={styles.backspaceIcon} />;\n                }\n\n                return (\n                  <PinInputButton key={element} onClick={clickFunction}>\n                    {children}\n                  </PinInputButton>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n      </section>\n    </RootRenderer>\n  );\n});\n"],"mappings":";;;;AAAA,SAASA,UAAU,QAAmC;AAGtD,SAASC,IAAI,QAAQ;AACrB,SAASC,YAAY,QAAQ;AAC7B,SAASC,UAAU,QAAQ;AAC3B,SAASC,WAAW,QAAQ;AAE5B,SAASC,eAAe,QAAQ;AAEhC,SAASC,cAAc,QAAQ;AAC/B,SAASC,YAAY,QAAQ;AAC7B,SAASC,QAAQ,QAAQ;AACzB,SAASC,YAAY,QAAQ;AAC7B,SAASC,cAAc,EAAEC,WAAW,QAAQ;AAa5C,MAAMC,aAAA,GAAgB;AAEtB;;;AAGA,OAAO,MAAMC,QAAA,gBAAWb,UAAA,CAAuC,CAAAc,MAAA,EAO5DC,GAAA;MAP6D;MAC9DC,KAAA,GAAQ,gBAAgB;MACxBC,QAAA,GAAW,CAAC;MACZC,SAAS;MACTC,KAAA,EAAOC,SAAA,GAAY,EAAE;MACrBC;IAAQ,CAET,GAAAP,MAAA;IADIQ,SAAA,GAAAC,0BAAA,CAAAT,MAAA,GALH,SACA,YACA,aACA,SACA,W;EAGA,MAAMU,QAAA,GAAWpB,WAAA;EACjB,MAAMqB,kBAAA,GAAqBC,IAAA,CAAKC,GAAG,CAACf,aAAA,EAAeK,QAAA;EAEnD,MAAM;IACJW,gBAAgB;IAChBC,oBAAoB;IACpBC,kBAAkB;IAClBX,KAAK;IACLY;EAAY,CACb,GAAGpB,WAAA,CAAY;IACdQ,KAAA,EAAOC,SAAA;IACPC,QAAA;IACAJ,QAAA,EAAUQ;EACZ;EAEA,oBACEO,IAAA,CAACzB,YAAA;cACC,aAAA0B,KAAA,CAAC,WAAAC,oBAAA,CAAAC,cAAA;MACCpB,GAAA,EAAKA,GAAA;MACLG,SAAA,EAAWf,UAAA,0BAETqB,QAAA,KAAa,kCACbN,SAAA;OAEEI,SAAA;8BAEJW,KAAA,CAAC;QAAOf,SAAS;gCACfc,IAAA,CAACxB,QAAA;UAASU,SAAS;UAAgBkB,MAAA,EAAO;oBAAKpB;yBAC/CgB,IAAA,CAAC;UAAId,SAAS;oBACXmB,KAAA,CAAMC,IAAI,CAAC;YAAEC,MAAA,EAAQd;UAAmB,GAAGe,GAAG,CAAC,CAACC,CAAA,EAAGC,KAAA,kBAClDV,IAAA,CAACvB,YAAA;YAICM,GAAA,EAAM4B,QAAA,IAAab,kBAAA,CAAmBY,KAAA,EAAOC,QAAA;YAC7CC,OAAA,EAASF,KAAA,GAAQvB,KAAA,CAAMoB,MAAM;YAC7BpB,KAAA,EAAOA,KAAK,CAACuB,KAAA,CAAM,IAAI;YACvBG,SAAA,EAAYC,KAAA,IAAUf,YAAA,CAAaW,KAAA,EAAOI,KAAA,CAAMC,GAAG;YACnDC,SAAA,EAAWN,KAAA,KAAU;YACrBO,QAAA,EAAU,CAAC;YACXC,QAAQ;aAPHR,KAAA;;uBAYbV,IAAA,CAAC;QAAId,SAAS;kBACXhB,YAAA,CAAaQ,cAAA,EAAgB,GAAG8B,GAAG,CAAEW,IAAA,iBACpCnB,IAAA,CAAC;UAA0Bd,SAAS;oBACjCiC,IAAA,CAAKX,GAAG,CAAEY,OAAA;YACT,IAAIC,QAAA,GAAsBD,OAAA;YAC1B,IAAIE,aAAA,GAAgBA,CAAA,KAAM1B,gBAAA,CAAiB2B,MAAA,CAAOH,OAAA;YAElD,IAAIA,OAAA,KAAYnD,IAAA,CAAKuD,SAAS,EAAE;cAC9BF,aAAA,GAAgBA,CAAA,KAAMzB,oBAAA;cACtBwB,QAAA,gBAAWrB,IAAA,CAAC3B,eAAA;gBAAgBa,SAAS;;YACvC;YAEA,oBACEc,IAAA,CAAC1B,cAAA;cAA6BmD,OAAA,EAASH,aAAA;wBACpCD;eADkBD,OAAA;UAIzB;WAfQD,IAAA,CAAKO,QAAQ;;;;AAsBnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}