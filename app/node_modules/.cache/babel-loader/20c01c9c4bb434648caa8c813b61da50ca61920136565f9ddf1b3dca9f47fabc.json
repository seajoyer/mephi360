{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { classNames } from \"../../../../../helpers/classNames\";\nimport { hasReactNode } from \"../../../../../helpers/react/node\";\nimport { usePlatform } from \"../../../../../hooks/usePlatform\";\nimport { Tappable } from \"../../../../Service/Tappable/Tappable\";\nimport { Subheadline } from \"../../../../Typography/Subheadline/Subheadline\";\nimport { Text } from \"../../../../Typography/Text/Text\";\n/**\n * Renders an interactive cell component with optional leading and trailing elements. Designed to be flexible,\n * supporting various content structures and interaction models within UI designs.\n */\nexport const ButtonCell = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      mode = 'default',\n      before,\n      after,\n      className,\n      children,\n      Component\n    } = _param,\n    restProps = _object_without_properties(_param, [\"mode\", \"before\", \"after\", \"className\", \"children\", \"Component\"]);\n  const platform = usePlatform();\n  const Typography = platform === 'ios' ? Subheadline : Text;\n  return /*#__PURE__*/_jsxs(Tappable, _object_spread_props(_object_spread({\n    ref: ref,\n    Component: Component || 'button',\n    className: classNames(\"tgui-a8ce18a8594cea9b\", mode === 'destructive' && \"tgui-6e7ca796043fe6ca\", platform === 'ios' && \"tgui-f464dba82cb8b46e\", className)\n  }, restProps), {\n    children: [hasReactNode(before) && before, hasReactNode(children) && /*#__PURE__*/_jsx(Typography, {\n      children: children\n    }), hasReactNode(after) && after]\n  }));\n});","map":{"version":3,"names":["forwardRef","classNames","hasReactNode","usePlatform","Tappable","Subheadline","Text","ButtonCell","_param","ref","mode","before","after","className","children","Component","restProps","_object_without_properties","platform","Typography","_jsxs","_object_spread_props","_object_spread","_jsx"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Blocks/Cell/components/ButtonCell/ButtonCell.tsx"],"sourcesContent":["'use client';\n\nimport { ElementType, forwardRef, ReactNode } from 'react';\nimport styles from './ButtonCell.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Tappable, TappableProps } from 'components/Service/Tappable/Tappable';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\nimport { Text } from 'components/Typography/Text/Text';\n\nexport interface ButtonCellProps extends Omit<TappableProps, 'Component'> {\n  /** Determines the button cell's visual theme, influencing color and style. */\n  mode?: 'default' | 'destructive';\n  /** Element or component displayed before the main content, adding visual context or functionality. */\n  before?: ReactNode;\n  /** Element or component displayed after the main content, typically indicating a possible action or outcome. */\n  after?: ReactNode;\n  /** Specifies the root element type for more semantic HTML structure or integration with navigation libraries. */\n  Component?: ElementType;\n  /** The content within the button cell, usually text. */\n  children?: ReactNode;\n}\n\n/**\n * Renders an interactive cell component with optional leading and trailing elements. Designed to be flexible,\n * supporting various content structures and interaction models within UI designs.\n */\nexport const ButtonCell = forwardRef(({\n  mode = 'default',\n  before,\n  after,\n  className,\n  children,\n  Component,\n  ...restProps\n}: ButtonCellProps, ref) => {\n  const platform = usePlatform();\n  const Typography = platform === 'ios' ? Subheadline : Text;\n\n  return (\n    <Tappable\n      ref={ref}\n      Component={Component || 'button'}\n      className={classNames(\n        styles.wrapper,\n        mode === 'destructive' && styles['wrapper--destructive'],\n        platform === 'ios' && styles['wrapper--ios'],\n        className,\n      )}\n      {...restProps}\n    >\n      {hasReactNode(before) && before}\n      {hasReactNode(children) && <Typography>{children}</Typography>}\n      {hasReactNode(after) && after}\n    </Tappable>\n  );\n});\n"],"mappings":"AAAA;;;;;;AAEA,SAAsBA,UAAU,QAAmB;AAGnD,SAASC,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAC7B,SAASC,WAAW,QAAQ;AAE5B,SAASC,QAAQ,QAAuB;AACxC,SAASC,WAAW,QAAQ;AAC5B,SAASC,IAAI,QAAQ;AAerB;;;;AAIA,OAAO,MAAMC,UAAA,gBAAaP,UAAA,CAAW,CAAAQ,MAAA,EAQjBC,GAAA;MARkB;MACpCC,IAAA,GAAO,SAAS;MAChBC,MAAM;MACNC,KAAK;MACLC,SAAS;MACTC,QAAQ;MACRC;IAAS,CAEO,GAAAP,MAAA;IADbQ,SAAA,GAAAC,0BAAA,CAAAT,MAAA,GANH,QACA,UACA,SACA,aACA,YACA,Y;EAGA,MAAMU,QAAA,GAAWf,WAAA;EACjB,MAAMgB,UAAA,GAAaD,QAAA,KAAa,QAAQb,WAAA,GAAcC,IAAA;EAEtD,oBACEc,KAAA,CAAChB,QAAA,EAAAiB,oBAAA,CAAAC,cAAA;IACCb,GAAA,EAAKA,GAAA;IACLM,SAAA,EAAWA,SAAA,IAAa;IACxBF,SAAA,EAAWZ,UAAA,0BAETS,IAAA,KAAS,0CACTQ,QAAA,KAAa,kCACbL,SAAA;KAEEG,SAAA;eAEHd,YAAA,CAAaS,MAAA,KAAWA,MAAA,EACxBT,YAAA,CAAaY,QAAA,kBAAaS,IAAA,CAACJ,UAAA;gBAAYL;QACvCZ,YAAA,CAAaU,KAAA,KAAUA,KAAA;;AAG9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}