{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useId, useRef } from \"react\";\nimport { Keys } from \"../../../helpers/accessibility\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { callMultiple } from \"../../../helpers/function\";\nimport { multipleRef } from \"../../../helpers/react/refs\";\nimport { useGlobalClicks } from \"../../../hooks/useGlobalClicks\";\nimport { Icon20ChevronDown } from \"../../../icons/20/chevron_down\";\nimport { FormInput } from \"../FormInput/FormInput\";\nimport { MultiselectBase } from \"./components/MultiselectBase/MultiselectBase\";\nimport { MultiselectDropdown } from \"./components/MultiselectDropdown/MultiselectDropdown\";\nimport { FOCUS_ACTION_NEXT, FOCUS_ACTION_PREV, isServicePreset } from \"./hooks/constants\";\nimport { useMultiselect } from \"./hooks/useMultiselect\";\n/**\n * A comprehensive component for rendering a multiselect input field with customizable options, dropdown behaviors, and chip display.\n * It integrates functionality for selecting multiple options, searching, and even creating new options based on user input.\n */\nexport const Multiselect = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      // FormInput options\n      header,\n      before,\n      status,\n      className,\n      children,\n      disabled,\n      // CustomSelectDropdownProps\n      options: optionsProp,\n      closeDropdownAfterSelect = false,\n      selectedBehavior,\n      emptyText,\n      creatable = false,\n      filterFn,\n      // MultiselectInputProps\n      value: valueProp = [],\n      defaultValue,\n      inputValue: inputValueProp,\n      renderChip,\n      renderOption,\n      onInputChange: onInputChangeProp,\n      onChange,\n      onFocus,\n      onBlur,\n      onKeyDown\n    } = _param,\n    restProps = _object_without_properties(_param, [\"header\", \"before\", \"status\", \"className\", \"children\", \"disabled\", \"options\", \"closeDropdownAfterSelect\", \"selectedBehavior\", \"emptyText\", \"creatable\", \"filterFn\", \"value\", \"defaultValue\", \"inputValue\", \"renderChip\", \"renderOption\", \"onInputChange\", \"onChange\", \"onFocus\", \"onBlur\", \"onKeyDown\"]);\n  const {\n    // Option props\n    value,\n    addOptionFromInput,\n    addOption,\n    removeOption,\n    // Input props\n    inputRef,\n    inputValue,\n    clearInput,\n    onInputChange,\n    // Dropdown props\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex\n  } = useMultiselect({\n    // Option props\n    value: valueProp,\n    defaultValue,\n    onChange,\n    // Input props\n    inputValue: inputValueProp,\n    onInputChange: onInputChangeProp,\n    // Dropdown props\n    options: optionsProp,\n    emptyText,\n    creatable,\n    filterFn,\n    selectedBehavior,\n    // Other props\n    disabled\n  });\n  const containerRef = useRef(null);\n  const rootRef = useRef(null);\n  const dropdownAriaId = useId();\n  const dropdownScrollBoxRef = useRef(null);\n  const handleFocus = () => {\n    setOpened(true);\n    setFocusedOptionIndex(null);\n  };\n  const handleBlur = event => {\n    if (!event.defaultPrevented && !creatable) {\n      event.preventDefault();\n    }\n  };\n  const optionsNodes = useRef([]).current;\n  const scrollToElement = (index, center = false) => {\n    const dropdown = dropdownScrollBoxRef.current;\n    const item = optionsNodes[index];\n    if (!item || !dropdown) {\n      return;\n    }\n    const dropdownHeight = dropdown.offsetHeight;\n    const {\n      scrollTop\n    } = dropdown;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  };\n  const focusOptionByIndex = (index, oldIndex) => {\n    let focusedIndex = index;\n    const {\n      length\n    } = options;\n    if (index < 0) {\n      focusedIndex = length - 1;\n    } else if (index >= length) {\n      focusedIndex = 0;\n    }\n    if (focusedIndex === oldIndex) {\n      return;\n    }\n    scrollToElement(focusedIndex);\n    setFocusedOptionIndex(focusedIndex);\n  };\n  const focusOption = (nextIndex, type) => {\n    let index = nextIndex === null ? -1 : nextIndex;\n    if (type === FOCUS_ACTION_NEXT) {\n      index += 1;\n    }\n    if (type === FOCUS_ACTION_PREV) {\n      index -= 1;\n    }\n    focusOptionByIndex(index, focusedOptionIndex);\n  };\n  const handleKeyDown = event => {\n    if (event.defaultPrevented) {\n      return;\n    }\n    switch (event.key) {\n      case Keys.ARROW_UP:\n      case Keys.ARROW_DOWN:\n        event.preventDefault();\n        if (opened) {\n          focusOption(focusedOptionIndex, event.key === Keys.ARROW_UP ? FOCUS_ACTION_PREV : FOCUS_ACTION_NEXT);\n          return;\n        }\n        setOpened(true);\n        setFocusedOptionIndex(0);\n        break;\n      case Keys.ENTER:\n        {\n          if (!opened) {\n            break;\n          }\n          if (!creatable) {\n            event.preventDefault();\n          }\n          if (focusedOptionIndex === null) {\n            break;\n          }\n          const foundOption = options[focusedOptionIndex];\n          if (!foundOption || isServicePreset(foundOption)) {\n            break;\n          }\n          event.preventDefault();\n          addOption(foundOption);\n          setFocusedOptionIndex(null);\n          clearInput();\n          closeDropdownAfterSelect && setOpened(false);\n          break;\n        }\n      case Keys.ESCAPE:\n      case Keys.TAB:\n        opened && setOpened(false);\n        break;\n      default:\n        break;\n    }\n  };\n  useEffect(() => {\n    if (focusedOptionIndex === null) {\n      setFocusedOption(null);\n      return;\n    }\n    const foundFocusedOptionIndex = options[focusedOptionIndex];\n    if (foundFocusedOptionIndex && !isServicePreset(foundFocusedOptionIndex)) {\n      setFocusedOption(foundFocusedOptionIndex);\n    }\n  }, [options, focusedOptionIndex, setFocusedOption]);\n  const onDropdownMouseLeave = useCallback(() => {\n    setFocusedOptionIndex(null);\n  }, [setFocusedOptionIndex]);\n  const toggleOpened = () => {\n    setOpened(prevOpened => !prevOpened);\n  };\n  const handleClickOutside = useCallback(() => {\n    setOpened(false);\n  }, [setOpened]);\n  const setOptionNode = (index, node) => {\n    optionsNodes[index] = node;\n  };\n  useGlobalClicks(handleClickOutside, opened ? rootRef : null, opened ? dropdownScrollBoxRef : null);\n  const controlledStatus = status || (opened ? 'focused' : 'default');\n  return /*#__PURE__*/_jsxs(FormInput, {\n    ref: multipleRef(ref, containerRef),\n    header: header,\n    before: before,\n    status: controlledStatus,\n    disabled: disabled,\n    className: classNames(\"tgui-6cca8a28a056cc34\", className),\n    children: [/*#__PURE__*/_jsx(MultiselectBase, _object_spread_props(_object_spread({}, restProps), {\n      // FormFieldProps\n      ref: rootRef,\n      className: \"tgui-1ed7193796bd9fff\",\n      // Option props\n      onAddChipOption: addOptionFromInput,\n      onRemoveChipOption: removeOption,\n      renderChip: renderChip,\n      chipsValue: value,\n      // Input props\n      value: inputValue,\n      inputRef: inputRef,\n      onChange: onInputChange,\n      onFocus: callMultiple(handleFocus, onFocus),\n      onBlur: callMultiple(handleBlur, onBlur),\n      onKeyDown: callMultiple(handleKeyDown, onKeyDown),\n      // a11y props\n      role: \"combobox\",\n      \"aria-expanded\": opened,\n      \"aria-controls\": dropdownAriaId,\n      \"aria-haspopup\": \"listbox\"\n    })), /*#__PURE__*/_jsx(Icon20ChevronDown, {\n      \"aria-hidden\": true,\n      onClick: toggleOpened,\n      className: \"tgui-e9b05eb8feaa0359\"\n    }), opened && /*#__PURE__*/_jsx(MultiselectDropdown, {\n      ref: dropdownScrollBoxRef,\n      dropdownAriaId: dropdownAriaId,\n      options: options,\n      onMouseLeave: onDropdownMouseLeave,\n      targetRef: rootRef,\n      addOptionFromInput: () => addOptionFromInput(inputValue),\n      setFocusedOptionIndex: setFocusedOptionIndex,\n      renderOption: renderOption,\n      focusedOption: focusedOption,\n      value: value,\n      setOptionNode: setOptionNode,\n      setOpened: setOpened,\n      closeDropdownAfterSelect: closeDropdownAfterSelect,\n      addOption: addOption,\n      clearInput: clearInput,\n      focusedOptionIndex: focusedOptionIndex\n    })]\n  });\n});","map":{"version":3,"names":["forwardRef","useCallback","useEffect","useId","useRef","Keys","classNames","callMultiple","multipleRef","useGlobalClicks","Icon20ChevronDown","FormInput","MultiselectBase","MultiselectDropdown","FOCUS_ACTION_NEXT","FOCUS_ACTION_PREV","isServicePreset","useMultiselect","Multiselect","_param","ref","header","before","status","className","children","disabled","options","optionsProp","closeDropdownAfterSelect","selectedBehavior","emptyText","creatable","filterFn","value","valueProp","defaultValue","inputValue","inputValueProp","renderChip","renderOption","onInputChange","onInputChangeProp","onChange","onFocus","onBlur","onKeyDown","restProps","_object_without_properties","addOptionFromInput","addOption","removeOption","inputRef","clearInput","opened","setOpened","focusedOption","focusedOptionIndex","setFocusedOption","setFocusedOptionIndex","containerRef","rootRef","dropdownAriaId","dropdownScrollBoxRef","handleFocus","handleBlur","event","defaultPrevented","preventDefault","optionsNodes","current","scrollToElement","index","center","dropdown","item","dropdownHeight","offsetHeight","scrollTop","itemTop","offsetTop","itemHeight","focusOptionByIndex","oldIndex","focusedIndex","length","focusOption","nextIndex","type","handleKeyDown","key","ARROW_UP","ARROW_DOWN","ENTER","foundOption","ESCAPE","TAB","foundFocusedOptionIndex","onDropdownMouseLeave","toggleOpened","prevOpened","handleClickOutside","setOptionNode","node","controlledStatus","_jsxs","_jsx","_object_spread_props","_object_spread","onAddChipOption","onRemoveChipOption","chipsValue","role","onClick","onMouseLeave","targetRef"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Form/Multiselect/Multiselect.tsx"],"sourcesContent":["'use client';\n\nimport { FocusEvent, forwardRef, InputHTMLAttributes, KeyboardEvent, useCallback, useEffect, useId, useRef } from 'react';\nimport styles from './Multiselect.module.css';\n\nimport { Keys } from 'helpers/accessibility';\nimport { classNames } from 'helpers/classNames';\nimport { callMultiple } from 'helpers/function';\nimport { multipleRef } from 'helpers/react/refs';\nimport { useGlobalClicks } from 'hooks/useGlobalClicks';\n\nimport { Icon20ChevronDown } from 'icons/20/chevron_down';\n\nimport { FormInput, FormPublicProps } from 'components/Form/FormInput/FormInput';\nimport { MultiselectBase, MultiselectBaseProps } from './components/MultiselectBase/MultiselectBase';\nimport { MultiselectDropdown, MultiselectDropdownProps } from './components/MultiselectDropdown/MultiselectDropdown';\nimport { FOCUS_ACTION_NEXT, FOCUS_ACTION_PREV, FocusActionType, isServicePreset } from './hooks/constants';\nimport { useMultiselect, UseMultiselectProps } from './hooks/useMultiselect';\nimport { MultiselectOption } from './types';\n\nexport interface MultiselectProps extends\n  Omit<InputHTMLAttributes<HTMLInputElement>, 'value' | 'defaultValue' | 'onChange'>,\n  Omit<FormPublicProps, 'after'>,\n  Pick<MultiselectDropdownProps, 'closeDropdownAfterSelect' | 'renderOption'>,\n  Pick<UseMultiselectProps, 'value' | 'defaultValue' | 'onChange' | 'filterFn' | 'onInputChange' | 'inputValue' | 'selectedBehavior' | 'emptyText' | 'creatable'>,\n  Pick<MultiselectBaseProps, 'renderChip'> {\n  /**\n   * The `options` property defines the available options within the multiselect dropdown.\n   * Each option is represented as an object conforming to the `MultiselectOption` structure,\n   * which typically includes properties like `value` (the option's value) and `label` (the human-readable text associated with the option).\n   */\n  options: MultiselectOption[];\n}\n\n/**\n * A comprehensive component for rendering a multiselect input field with customizable options, dropdown behaviors, and chip display.\n * It integrates functionality for selecting multiple options, searching, and even creating new options based on user input.\n */\nexport const Multiselect = forwardRef<HTMLDivElement, MultiselectProps>(({\n  // FormInput options\n  header,\n  before,\n  status,\n  className,\n  children,\n  disabled,\n\n  // CustomSelectDropdownProps\n  options: optionsProp,\n  closeDropdownAfterSelect = false,\n  selectedBehavior,\n  emptyText,\n  creatable = false,\n  filterFn,\n\n  // MultiselectInputProps\n  value: valueProp = [],\n  defaultValue,\n  inputValue: inputValueProp,\n  renderChip,\n  renderOption,\n  onInputChange: onInputChangeProp,\n  onChange,\n  onFocus,\n  onBlur,\n  onKeyDown,\n  ...restProps\n}, ref) => {\n  const {\n    // Option props\n    value,\n    addOptionFromInput,\n    addOption,\n    removeOption,\n\n    // Input props\n    inputRef,\n    inputValue,\n    clearInput,\n    onInputChange,\n\n    // Dropdown props\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex,\n  } = useMultiselect({\n    // Option props\n    value: valueProp,\n    defaultValue,\n    onChange,\n\n    // Input props\n    inputValue: inputValueProp,\n    onInputChange: onInputChangeProp,\n\n    // Dropdown props\n    options: optionsProp,\n    emptyText,\n    creatable,\n    filterFn,\n    selectedBehavior,\n\n    // Other props\n    disabled,\n  });\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const rootRef = useRef(null);\n\n  const dropdownAriaId = useId();\n  const dropdownScrollBoxRef = useRef<HTMLDivElement>(null);\n\n  const handleFocus = () => {\n    setOpened(true);\n    setFocusedOptionIndex(null);\n  };\n\n  const handleBlur = (event: FocusEvent<HTMLInputElement>) => {\n    if (!event.defaultPrevented && !creatable) {\n      event.preventDefault();\n    }\n  };\n\n  const optionsNodes = useRef<HTMLElement[]>([]).current;\n  const scrollToElement = (index: number, center = false) => {\n    const dropdown = dropdownScrollBoxRef.current;\n    const item = optionsNodes[index];\n\n    if (!item || !dropdown) {\n      return;\n    }\n\n    const dropdownHeight = dropdown.offsetHeight;\n    const { scrollTop } = dropdown;\n    const itemTop = item.offsetTop;\n    const itemHeight = item.offsetHeight;\n\n    if (center) {\n      dropdown.scrollTop = itemTop - dropdownHeight / 2 + itemHeight / 2;\n    } else if (itemTop + itemHeight > dropdownHeight + scrollTop) {\n      dropdown.scrollTop = itemTop - dropdownHeight + itemHeight;\n    } else if (itemTop < scrollTop) {\n      dropdown.scrollTop = itemTop;\n    }\n  };\n\n  const focusOptionByIndex = (index: number, oldIndex: number | null) => {\n    let focusedIndex = index;\n    const { length } = options;\n\n    if (index < 0) {\n      focusedIndex = length - 1;\n    } else if (index >= length) {\n      focusedIndex = 0;\n    }\n\n    if (focusedIndex === oldIndex) {\n      return;\n    }\n\n    scrollToElement(focusedIndex);\n    setFocusedOptionIndex(focusedIndex);\n  };\n\n  const focusOption = (nextIndex: number | null, type: FocusActionType) => {\n    let index = nextIndex === null ? -1 : nextIndex;\n\n    if (type === FOCUS_ACTION_NEXT) {\n      index += 1;\n    }\n\n    if (type === FOCUS_ACTION_PREV) {\n      index -= 1;\n    }\n\n    focusOptionByIndex(index, focusedOptionIndex);\n  };\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    switch (event.key) {\n      case Keys.ARROW_UP:\n      case Keys.ARROW_DOWN:\n        event.preventDefault();\n\n        if (opened) {\n          focusOption(focusedOptionIndex, event.key === Keys.ARROW_UP ? FOCUS_ACTION_PREV : FOCUS_ACTION_NEXT);\n          return;\n        }\n\n        setOpened(true);\n        setFocusedOptionIndex(0);\n        break;\n\n      case Keys.ENTER: {\n        if (!opened) {\n          break;\n        }\n\n        if (!creatable) {\n          event.preventDefault();\n        }\n\n        if (focusedOptionIndex === null) {\n          break;\n        }\n\n        const foundOption = options[focusedOptionIndex];\n        if (!foundOption || isServicePreset(foundOption)) {\n          break;\n        }\n\n        event.preventDefault();\n        addOption(foundOption);\n        setFocusedOptionIndex(null);\n        clearInput();\n\n        closeDropdownAfterSelect && setOpened(false);\n        break;\n      }\n\n      case Keys.ESCAPE:\n      case Keys.TAB:\n        opened && setOpened(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (focusedOptionIndex === null) {\n      setFocusedOption(null);\n      return;\n    }\n\n    const foundFocusedOptionIndex = options[focusedOptionIndex];\n    if (foundFocusedOptionIndex && !isServicePreset(foundFocusedOptionIndex)) {\n      setFocusedOption(foundFocusedOptionIndex);\n    }\n  }, [options, focusedOptionIndex, setFocusedOption]);\n\n  const onDropdownMouseLeave = useCallback(() => {\n    setFocusedOptionIndex(null);\n  }, [setFocusedOptionIndex]);\n\n  const toggleOpened = () => {\n    setOpened((prevOpened) => !prevOpened);\n  };\n\n  const handleClickOutside = useCallback(() => {\n    setOpened(false);\n  }, [setOpened]);\n\n  const setOptionNode = (index: number, node: HTMLElement) => {\n    optionsNodes[index] = node;\n  };\n\n  useGlobalClicks(\n    handleClickOutside,\n    opened ? rootRef : null,\n    opened ? dropdownScrollBoxRef : null,\n  );\n\n  const controlledStatus = status || (opened ? 'focused' : 'default');\n  return (\n    <FormInput\n      ref={multipleRef(ref, containerRef)}\n      header={header}\n      before={before}\n      status={controlledStatus}\n      disabled={disabled}\n      className={classNames(styles.wrapper, className)}\n    >\n      <MultiselectBase\n        {...restProps}\n        // FormFieldProps\n        ref={rootRef}\n        className={styles.base}\n        // Option props\n        onAddChipOption={addOptionFromInput}\n        onRemoveChipOption={removeOption}\n        renderChip={renderChip}\n        chipsValue={value}\n        // Input props\n        value={inputValue}\n        inputRef={inputRef}\n        onChange={onInputChange}\n        onFocus={callMultiple(handleFocus, onFocus)}\n        onBlur={callMultiple(handleBlur, onBlur)}\n        onKeyDown={callMultiple(handleKeyDown, onKeyDown)}\n        // a11y props\n        role=\"combobox\"\n        aria-expanded={opened}\n        aria-controls={dropdownAriaId}\n        aria-haspopup=\"listbox\"\n      />\n      <Icon20ChevronDown aria-hidden onClick={toggleOpened} className={styles.chevron} />\n      {opened && (\n        <MultiselectDropdown\n          ref={dropdownScrollBoxRef}\n          dropdownAriaId={dropdownAriaId}\n          options={options}\n          onMouseLeave={onDropdownMouseLeave}\n          targetRef={rootRef}\n          addOptionFromInput={() => addOptionFromInput(inputValue)}\n          setFocusedOptionIndex={setFocusedOptionIndex}\n          renderOption={renderOption}\n          focusedOption={focusedOption}\n          value={value}\n          setOptionNode={setOptionNode}\n          setOpened={setOpened}\n          closeDropdownAfterSelect={closeDropdownAfterSelect}\n          addOption={addOption}\n          clearInput={clearInput}\n          focusedOptionIndex={focusedOptionIndex}\n        />\n      )}\n    </FormInput>\n  );\n});\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}