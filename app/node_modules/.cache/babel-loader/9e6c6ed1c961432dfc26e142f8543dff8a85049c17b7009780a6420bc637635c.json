{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { hasReactNode } from \"../../../helpers/react/node\";\nimport { usePlatform } from \"../../../hooks/usePlatform\";\nimport { Tappable } from \"../../Service/Tappable/Tappable\";\nimport { Subheadline } from \"../../Typography/Subheadline/Subheadline\";\nconst modeStyles = {\n  elevated: \"tgui-b8b077d7e3491b30\",\n  mono: \"tgui-ccc3e4a302799418\",\n  outline: \"tgui-fdfccf8f92c11530\"\n};\n/**\n * Renders a compact element representing an input, attribute, or action. Chips can include icons, text, or both,\n * and are used to trigger actions, input information, or represent a complex piece of information in a compact form.\n */\nexport const Chip = _param => {\n  var {\n      mode = 'elevated',\n      before,\n      after,\n      className,\n      children,\n      Component = 'div'\n    } = _param,\n    restProps = _object_without_properties(_param, [\"mode\", \"before\", \"after\", \"className\", \"children\", \"Component\"]);\n  const platform = usePlatform();\n  return /*#__PURE__*/_jsxs(Tappable, _object_spread_props(_object_spread({\n    Component: Component,\n    interactiveAnimation: \"opacity\",\n    className: classNames(\"tgui-6372c64c79ad2959\", modeStyles[mode], className)\n  }, restProps), {\n    children: [hasReactNode(before) && /*#__PURE__*/_jsx(\"div\", {\n      className: \"tgui-0d7ce20ebc0fc7aa\",\n      children: before\n    }), /*#__PURE__*/_jsx(Subheadline, {\n      className: \"tgui-9c7ff8cd23a6ea9a\",\n      level: platform === 'ios' ? '2' : '1',\n      weight: \"2\",\n      children: children\n    }), hasReactNode(after) && /*#__PURE__*/_jsx(\"div\", {\n      className: \"tgui-67f596882eb2b6ab\",\n      children: after\n    })]\n  }));\n};","map":{"version":3,"names":["classNames","hasReactNode","usePlatform","Tappable","Subheadline","modeStyles","elevated","mono","outline","Chip","_param","mode","before","after","className","children","Component","restProps","_object_without_properties","platform","_jsxs","_object_spread_props","_object_spread","interactiveAnimation","_jsx","level","weight"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Form/Chip/Chip.tsx"],"sourcesContent":["'use client';\n\nimport { AllHTMLAttributes, ElementType, ReactNode } from 'react';\nimport styles from './Chip.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Tappable } from 'components/Service/Tappable/Tappable';\nimport { Subheadline } from 'components/Typography/Subheadline/Subheadline';\n\nexport interface ChipProps extends AllHTMLAttributes<HTMLDivElement> {\n  /** Defines the visual style of the chip, affecting its background, border, and shadow. */\n  mode?: 'elevated' | 'mono' | 'outline';\n  /** Content or component to be placed before the main text, typically an icon or avatar. */\n  before?: ReactNode;\n  /** Content or component to be placed after the main text, such as an icon indicating an action. */\n  after?: ReactNode;\n  /** The main text content of the chip. */\n  children?: ReactNode;\n  /** Specifies the HTML tag or React component used to render the Chip, defaulting to `div`. */\n  Component?: ElementType;\n}\n\nconst modeStyles = {\n  elevated: styles['wrapper--elevated'],\n  mono: styles['wrapper--mono'],\n  outline: styles['wrapper--outline'],\n};\n\n/**\n * Renders a compact element representing an input, attribute, or action. Chips can include icons, text, or both,\n * and are used to trigger actions, input information, or represent a complex piece of information in a compact form.\n */\nexport const Chip = ({\n  mode = 'elevated',\n  before,\n  after,\n  className,\n  children,\n  Component = 'div',\n  ...restProps\n}: ChipProps) => {\n  const platform = usePlatform();\n\n  return (\n    <Tappable\n      Component={Component}\n      interactiveAnimation=\"opacity\"\n      className={classNames(styles.wrapper, modeStyles[mode], className)}\n      {...restProps}\n    >\n      {hasReactNode(before) && <div className={styles.before}>{before}</div>}\n      <Subheadline\n        className={styles.text}\n        level={platform === 'ios' ? '2' : '1'}\n        weight=\"2\"\n      >\n        {children}\n      </Subheadline>\n      {hasReactNode(after) && <div className={styles.after}>{after}</div>}\n    </Tappable>\n  );\n};\n"],"mappings":"AAAA;;;;;;AAKA,SAASA,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAC7B,SAASC,WAAW,QAAQ;AAE5B,SAASC,QAAQ,QAAQ;AACzB,SAASC,WAAW,QAAQ;AAe5B,MAAMC,UAAA,GAAa;EACjBC,QAAQ;EACRC,IAAI;EACJC,OAAO;AACT;AAEA;;;;AAIA,OAAO,MAAMC,IAAA,GAAOC,MAAA;MAAC;MACnBC,IAAA,GAAO,UAAU;MACjBC,MAAM;MACNC,KAAK;MACLC,SAAS;MACTC,QAAQ;MACRC,SAAA,GAAY;IAAK,CAEP,GAAAN,MAAA;IADPO,SAAA,GAAAC,0BAAA,CAAAR,MAAA,GANH,QACA,UACA,SACA,aACA,YACA,Y;EAGA,MAAMS,QAAA,GAAWjB,WAAA;EAEjB,oBACEkB,KAAA,CAACjB,QAAA,EAAAkB,oBAAA,CAAAC,cAAA;IACCN,SAAA,EAAWA,SAAA;IACXO,oBAAA,EAAqB;IACrBT,SAAA,EAAWd,UAAA,0BAA2BK,UAAU,CAACM,IAAA,CAAK,EAAEG,SAAA;KACpDG,SAAA;eAEHhB,YAAA,CAAaW,MAAA,kBAAWY,IAAA,CAAC;MAAIV,SAAS;gBAAkBF;qBACzDY,IAAA,CAACpB,WAAA;MACCU,SAAS;MACTW,KAAA,EAAON,QAAA,KAAa,QAAQ,MAAM;MAClCO,MAAA,EAAO;gBAENX;QAEFd,YAAA,CAAaY,KAAA,kBAAUW,IAAA,CAAC;MAAIV,SAAS;gBAAiBD;;;AAG7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}