{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Children, isValidElement } from \"react\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { usePlatform } from \"../../../hooks/usePlatform\";\nimport { SegmentedControlItem } from \"./components/SegmentedControlItem/SegmentedControlItem\";\n/**\n * The SegmentedControl component renders a set of options as a segmented control, commonly used for toggling between views or filtering content.\n * It is designed to adapt its appearance based on the platform, offering a native look and feel.\n * This component supports interactivity through selection, visually indicating the currently active option.\n */\nexport const SegmentedControl = _param => {\n  var {\n      className,\n      children\n    } = _param,\n    restProps = _object_without_properties(_param, [\"className\", \"children\"]);\n  const platform = usePlatform();\n  const childrenAsArray = Children.toArray(children);\n  const checkedIndex = childrenAsArray.findIndex(option => {\n    return /*#__PURE__*/isValidElement(option) && option.props.selected;\n  });\n  const translateX = `translateX(${100 * checkedIndex}%)`;\n  return /*#__PURE__*/_jsx(\"div\", _object_spread_props(_object_spread({\n    role: \"tablist\",\n    className: classNames(\"tgui-71259e3311d7116e\", platform === 'ios' && \"tgui-16c6b1986a48e2b5\", className)\n  }, restProps), {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"tgui-b0a9057ab5d33005\",\n      children: [checkedIndex > -1 && /*#__PURE__*/_jsx(\"div\", {\n        \"aria-hidden\": true,\n        className: \"tgui-31f461ccfea23ec3\",\n        style: {\n          width: `${100 / childrenAsArray.length}%`,\n          transform: translateX\n        }\n      }), children]\n    })\n  }));\n};\nSegmentedControl.Item = SegmentedControlItem;","map":{"version":3,"names":["Children","isValidElement","classNames","usePlatform","SegmentedControlItem","SegmentedControl","_param","className","children","restProps","_object_without_properties","platform","childrenAsArray","toArray","checkedIndex","findIndex","option","props","selected","translateX","_jsx","_object_spread_props","_object_spread","role","_jsxs","style","width","length","transform","Item"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Navigation/SegmentedControl/SegmentedControl.tsx"],"sourcesContent":["import { Children, HTMLAttributes, isValidElement, ReactElement } from 'react';\nimport styles from './SegmentedControl.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { SegmentedControlItem, SegmentedControlItemProps } from './components/SegmentedControlItem/SegmentedControlItem';\n\nexport interface SegmentedControlProps extends HTMLAttributes<HTMLDivElement> {\n  /** Children should be SegmentedControl.Item components to render within the control. */\n  children: ReactElement<SegmentedControlItemProps>[];\n}\n\n/**\n * The SegmentedControl component renders a set of options as a segmented control, commonly used for toggling between views or filtering content.\n * It is designed to adapt its appearance based on the platform, offering a native look and feel.\n * This component supports interactivity through selection, visually indicating the currently active option.\n */\nexport const SegmentedControl = ({\n  className,\n  children,\n  ...restProps\n}: SegmentedControlProps) => {\n  const platform = usePlatform();\n\n  const childrenAsArray = Children.toArray(children);\n  const checkedIndex = childrenAsArray.findIndex((option) => {\n    return isValidElement(option) && option.props.selected;\n  });\n\n  const translateX = `translateX(${100 * checkedIndex}%)`;\n  return (\n    <div\n      role=\"tablist\"\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        className,\n      )}\n      {...restProps}\n    >\n      <div className={styles.body}>\n        {checkedIndex > -1 && (\n          <div\n            aria-hidden\n            className={styles.slider}\n            style={{\n              width: `${100 / childrenAsArray.length}%`,\n              transform: translateX,\n            }}\n          />\n        )}\n        {children}\n      </div>\n    </div>\n  );\n};\n\nSegmentedControl.Item = SegmentedControlItem;\n"],"mappings":";;;;AAAA,SAASA,QAAQ,EAAkBC,cAAc,QAAsB;AAGvE,SAASC,UAAU,QAAQ;AAC3B,SAASC,WAAW,QAAQ;AAE5B,SAASC,oBAAoB,QAAmC;AAOhE;;;;;AAKA,OAAO,MAAMC,gBAAA,GAAmBC,MAAA;MAAC;MAC/BC,SAAS;MACTC;IAAQ,CAEc,GAAAF,MAAA;IADnBG,SAAA,GAAAC,0BAAA,CAAAJ,MAAA,GAFH,aACA,W;EAGA,MAAMK,QAAA,GAAWR,WAAA;EAEjB,MAAMS,eAAA,GAAkBZ,QAAA,CAASa,OAAO,CAACL,QAAA;EACzC,MAAMM,YAAA,GAAeF,eAAA,CAAgBG,SAAS,CAAEC,MAAA;IAC9C,oBAAOf,cAAA,CAAee,MAAA,KAAWA,MAAA,CAAOC,KAAK,CAACC,QAAQ;EACxD;EAEA,MAAMC,UAAA,GAAa,cAAc,MAAML,YAAA,IAAgB;EACvD,oBACEM,IAAA,CAAC,OAAAC,oBAAA,CAAAC,cAAA;IACCC,IAAA,EAAK;IACLhB,SAAA,EAAWL,UAAA,0BAETS,QAAA,KAAa,kCACbJ,SAAA;KAEEE,SAAA;cAEJ,aAAAe,KAAA,CAAC;MAAIjB,SAAS;iBACXO,YAAA,GAAe,CAAC,kBACfM,IAAA,CAAC;QACC,aAAW;QACXb,SAAS;QACTkB,KAAA,EAAO;UACLC,KAAA,EAAO,GAAG,MAAMd,eAAA,CAAgBe,MAAM,GAAG;UACzCC,SAAA,EAAWT;QACb;UAGHX,QAAA;;;AAIT;AAEAH,gBAAA,CAAiBwB,IAAI,GAAGzB,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}