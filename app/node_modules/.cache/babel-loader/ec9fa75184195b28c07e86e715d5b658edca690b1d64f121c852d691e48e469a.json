{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { useObjectMemo } from \"../../../hooks/useObjectMemo\";\nimport { usePlatform } from \"../../../hooks/usePlatform\";\nimport { InlineButtonsItem } from \"./components/InlineButtonsItem/InlineButtonsItem\";\nimport { InlineButtonsContext } from \"./InlineButtonsContext\";\n/**\n * `InlineButtons` acts as a container for `InlineButtons.Item` components. This component\n * provides a unified context for styling and interaction, leveraging the `mode` to apply\n * consistent styling across all child components. It ensures visual consistency across different\n * platforms and supports custom styling modes.\n */\nexport const InlineButtons = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      mode,\n      className,\n      children\n    } = _param,\n    restProps = _object_without_properties(_param, [\"mode\", \"className\", \"children\"]);\n  const platform = usePlatform();\n  const contextValue = useObjectMemo({\n    mode\n  });\n  return /*#__PURE__*/_jsx(\"div\", _object_spread_props(_object_spread({\n    ref: ref,\n    className: classNames(\"tgui-39e9f02ce4b4b950\", platform === 'ios' && \"tgui-b3d7f75461a64b76\", className)\n  }, restProps), {\n    children: /*#__PURE__*/_jsx(InlineButtonsContext.Provider, {\n      value: contextValue,\n      children: children\n    })\n  }));\n});\nInlineButtons.Item = InlineButtonsItem;","map":{"version":3,"names":["forwardRef","classNames","useObjectMemo","usePlatform","InlineButtonsItem","InlineButtonsContext","InlineButtons","_param","ref","mode","className","children","restProps","_object_without_properties","platform","contextValue","_jsx","_object_spread_props","_object_spread","Provider","value","Item"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Blocks/InlineButtons/InlineButtons.tsx"],"sourcesContent":["'use client';\n\nimport { forwardRef, ForwardRefExoticComponent, HTMLAttributes, ReactElement, RefAttributes } from 'react';\nimport styles from './InlineButtons.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { useObjectMemo } from 'hooks/useObjectMemo';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { InlineButtonsItem, InlineButtonsItemProps } from './components/InlineButtonsItem/InlineButtonsItem';\nimport { InlineButtonsContext, InlineButtonsContextProps } from './InlineButtonsContext';\n\nexport interface InlineButtonsProps extends HTMLAttributes<HTMLDivElement> {\n  /** Dictates the styling mode for the inline buttons, affecting color and background. */\n  mode?: InlineButtonsContextProps['mode'];\n  /**\n   * Children should be `InlineButtons.Item` components. Each child will inherit the `mode`\n   * from this parent, ensuring consistent styling across all items.\n   */\n  children: ReactElement<InlineButtonsItemProps>[];\n}\n\ntype InlineButtonsWithComponents = ForwardRefExoticComponent<InlineButtonsProps & RefAttributes<HTMLDivElement>> & {\n  Item: typeof InlineButtonsItem;\n};\n\n/**\n * `InlineButtons` acts as a container for `InlineButtons.Item` components. This component\n * provides a unified context for styling and interaction, leveraging the `mode` to apply\n * consistent styling across all child components. It ensures visual consistency across different\n * platforms and supports custom styling modes.\n */\nexport const InlineButtons = forwardRef(({\n  mode,\n  className,\n  children,\n  ...restProps\n}: InlineButtonsProps, ref) => {\n  const platform = usePlatform();\n  const contextValue = useObjectMemo({ mode });\n\n  return (\n    <div\n      ref={ref}\n      className={classNames(\n        styles.wrapper,\n        platform === 'ios' && styles['wrapper--ios'],\n        className,\n      )}\n      {...restProps}\n    >\n      <InlineButtonsContext.Provider value={contextValue}>\n        {children}\n      </InlineButtonsContext.Provider>\n    </div>\n  );\n}) as InlineButtonsWithComponents;\n\nInlineButtons.Item = InlineButtonsItem;\n"],"mappings":"AAAA;;;;;;AAEA,SAASA,UAAU,QAAgF;AAGnG,SAASC,UAAU,QAAQ;AAC3B,SAASC,aAAa,QAAQ;AAC9B,SAASC,WAAW,QAAQ;AAE5B,SAASC,iBAAiB,QAAgC;AAC1D,SAASC,oBAAoB,QAAmC;AAgBhE;;;;;;AAMA,OAAO,MAAMC,aAAA,gBAAgBN,UAAA,CAAW,CAAAO,MAAA,EAKjBC,GAAA;MALkB;MACvCC,IAAI;MACJC,SAAS;MACTC;IAAQ,CAEW,GAAAJ,MAAA;IADhBK,SAAA,GAAAC,0BAAA,CAAAN,MAAA,GAHH,QACA,aACA,W;EAGA,MAAMO,QAAA,GAAWX,WAAA;EACjB,MAAMY,YAAA,GAAeb,aAAA,CAAc;IAAEO;EAAK;EAE1C,oBACEO,IAAA,CAAC,OAAAC,oBAAA,CAAAC,cAAA;IACCV,GAAA,EAAKA,GAAA;IACLE,SAAA,EAAWT,UAAA,0BAETa,QAAA,KAAa,kCACbJ,SAAA;KAEEE,SAAA;cAEJ,aAAAI,IAAA,CAACX,oBAAA,CAAqBc,QAAQ;MAACC,KAAA,EAAOL,YAAA;gBACnCJ;;;AAIT;AAEAL,aAAA,CAAce,IAAI,GAAGjB,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}