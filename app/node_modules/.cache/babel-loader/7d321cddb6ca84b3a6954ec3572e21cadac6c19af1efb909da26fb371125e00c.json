{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { useCallback, useState } from \"react\";\nimport { isEqual } from \"../../../../helpers/equal\";\nimport { useEnhancedEffect } from \"../../../../hooks/useEnhancedEffect\";\nimport { defaultFilterFn } from \"./helpers/filter\";\nimport { transformOptions } from \"./helpers/transformOptions\";\nimport { DEFAULT_EMPTY_TEXT, DEFAULT_SELECTED_BEHAVIOR } from \"./constants\";\nimport { useMultiselectInput } from \"./useMultiselectInput\";\n/**\n * Hook to manage the state and interactions of a multiselect component.\n * It encapsulates logic for option selection, input change handling, dropdown visibility, and focused option management.\n */\nexport const useMultiselect = ({\n  // Common props\n  disabled,\n  // Options props\n  value: valueProp,\n  defaultValue,\n  onChange,\n  // Input props\n  inputValue: inputValueProp = '',\n  onInputChange: onInputChangeProp,\n  // Dropdown props\n  creatable = false,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  filterFn = defaultFilterFn,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n  options: optionsProp = []\n}) => {\n  const _useMultiselectInput = useMultiselectInput({\n      // Option props\n      value: valueProp,\n      defaultValue,\n      onChange,\n      // Input Props\n      inputValue: inputValueProp,\n      onInputChange: onInputChangeProp,\n      // Other Props\n      disabled\n    }),\n    {\n      value,\n      inputValue,\n      onInputChange\n    } = _useMultiselectInput,\n    restMultiselectProps = _object_without_properties(_useMultiselectInput, [\"value\", \"inputValue\", \"onInputChange\"]);\n  const [opened, setOpened] = useState(false);\n  const [options, setOptions] = useState(() => opened ? transformOptions({\n    value,\n    inputValue,\n    emptyText,\n    creatable,\n    filterFn,\n    options: optionsProp,\n    selectedBehavior\n  }) : []);\n  const [focusedOptionIndex, setFocusedOptionIndex] = useState(0);\n  const [focusedOption, setFocusedOption] = useState(null);\n  const handleInputChange = useCallback(event => {\n    onInputChange(event);\n    if (!opened) {\n      return;\n    }\n    setOpened(true);\n    setFocusedOptionIndex(0);\n  }, [onInputChange, opened]);\n  useEnhancedEffect(() => {\n    if (!opened) {\n      return;\n    }\n    setOptions(prevOptions => {\n      const nextOptions = transformOptions({\n        value,\n        inputValue,\n        emptyText,\n        creatable,\n        filterFn,\n        options: optionsProp,\n        selectedBehavior\n      });\n      if (isEqual(prevOptions, nextOptions)) {\n        return prevOptions;\n      }\n      return nextOptions;\n    });\n  }, [opened, value, inputValue, optionsProp, creatable, selectedBehavior, filterFn]);\n  return _object_spread_props(_object_spread({}, restMultiselectProps), {\n    // Options props\n    value,\n    // Input props\n    inputValue,\n    onInputChange: handleInputChange,\n    // States for dropdown\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex\n  });\n};","map":{"version":3,"names":["useCallback","useState","isEqual","useEnhancedEffect","defaultFilterFn","transformOptions","DEFAULT_EMPTY_TEXT","DEFAULT_SELECTED_BEHAVIOR","useMultiselectInput","useMultiselect","disabled","value","valueProp","defaultValue","onChange","inputValue","inputValueProp","onInputChange","onInputChangeProp","creatable","emptyText","filterFn","selectedBehavior","options","optionsProp","_useMultiselectInput","restMultiselectProps","_object_without_properties","opened","setOpened","setOptions","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","handleInputChange","event","prevOptions","nextOptions","_object_spread_props","_object_spread"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Form/Multiselect/hooks/useMultiselect.ts"],"sourcesContent":["'use client';\n\nimport { ChangeEvent, useCallback, useState } from 'react';\n\nimport { isEqual } from 'helpers/equal';\nimport { useEnhancedEffect } from 'hooks/useEnhancedEffect';\n\nimport { MultiselectOption } from 'components/Form/Multiselect/types';\nimport { defaultFilterFn, FilterFn } from './helpers/filter';\nimport { transformOptions } from './helpers/transformOptions';\nimport { DEFAULT_EMPTY_TEXT, DEFAULT_SELECTED_BEHAVIOR } from './constants';\nimport { useMultiselectInput, type UseMultiselectInputProps } from './useMultiselectInput';\n\nexport interface UseMultiselectProps extends UseMultiselectInputProps {\n  /** Array of options available for selection. */\n  options?: MultiselectOption[];\n  /**\n   * Enables the creation of new options that are not in the initial list.\n   * - `true` allows adding by pressing Enter.\n   * - A `string` value also adds a button with the provided text to the dropdown for creating options.\n   */\n  creatable?: boolean | string;\n  /** Text displayed when no options are available or match the filter criteria. */\n  emptyText?: string;\n  /** Determines how selected options are treated: either hidden from the list or highlighted within it. */\n  selectedBehavior?: 'hide' | 'highlight';\n  /** Custom function to filter options based on the input value. */\n  filterFn?: false | FilterFn;\n}\n\n/**\n * Hook to manage the state and interactions of a multiselect component.\n * It encapsulates logic for option selection, input change handling, dropdown visibility, and focused option management.\n */\nexport const useMultiselect = ({\n  // Common props\n  disabled,\n\n  // Options props\n  value: valueProp,\n  defaultValue,\n  onChange,\n\n  // Input props\n  inputValue: inputValueProp = '',\n  onInputChange: onInputChangeProp,\n\n  // Dropdown props\n  creatable = false,\n  emptyText = DEFAULT_EMPTY_TEXT,\n  filterFn = defaultFilterFn,\n  selectedBehavior = DEFAULT_SELECTED_BEHAVIOR,\n  options: optionsProp = [],\n}: UseMultiselectProps) => {\n  const { value, inputValue, onInputChange, ...restMultiselectProps } = useMultiselectInput({\n    // Option props\n    value: valueProp,\n    defaultValue,\n    onChange,\n\n    // Input Props\n    inputValue: inputValueProp,\n    onInputChange: onInputChangeProp,\n\n    // Other Props\n    disabled,\n  });\n\n  const [opened, setOpened] = useState(false);\n  const [options, setOptions] = useState<MultiselectOption[]>(() =>\n    opened\n      ? transformOptions({\n        value,\n        inputValue,\n        emptyText,\n        creatable,\n        filterFn,\n        options: optionsProp,\n        selectedBehavior,\n      })\n      : [],\n  );\n\n  const [focusedOptionIndex, setFocusedOptionIndex] = useState<number | null>(0);\n  const [focusedOption, setFocusedOption] = useState<MultiselectOption | null>(null);\n\n  const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onInputChange(event);\n\n    if (!opened) {\n      return;\n    }\n\n    setOpened(true);\n    setFocusedOptionIndex(0);\n  }, [onInputChange, opened]);\n\n  useEnhancedEffect(() => {\n    if (!opened) {\n      return;\n    }\n\n    setOptions((prevOptions) => {\n      const nextOptions = transformOptions({\n        value,\n        inputValue,\n        emptyText,\n        creatable,\n        filterFn,\n        options: optionsProp,\n        selectedBehavior,\n      });\n\n      if (isEqual(prevOptions, nextOptions)) {\n        return prevOptions;\n      }\n\n      return nextOptions;\n    });\n  }, [\n    opened,\n    value,\n    inputValue,\n    optionsProp,\n    creatable,\n    selectedBehavior,\n    filterFn,\n  ]);\n\n  return {\n    ...restMultiselectProps,\n\n    // Options props\n    value,\n\n    // Input props\n    inputValue,\n    onInputChange: handleInputChange,\n\n    // States for dropdown\n    options,\n    opened,\n    setOpened,\n    focusedOption,\n    focusedOptionIndex,\n    setFocusedOption,\n    setFocusedOptionIndex,\n  };\n};\n"],"mappings":"AAAA;;;;;AAEA,SAAsBA,WAAW,EAAEC,QAAQ,QAAQ;AAEnD,SAASC,OAAO,QAAQ;AACxB,SAASC,iBAAiB,QAAQ;AAGlC,SAASC,eAAe,QAAkB;AAC1C,SAASC,gBAAgB,QAAQ;AACjC,SAASC,kBAAkB,EAAEC,yBAAyB,QAAQ;AAC9D,SAASC,mBAAmB,QAAuC;AAmBnE;;;;AAIA,OAAO,MAAMC,cAAA,GAAiBA,CAAC;EAC7B;EACAC,QAAQ;EAER;EACAC,KAAA,EAAOC,SAAS;EAChBC,YAAY;EACZC,QAAQ;EAER;EACAC,UAAA,EAAYC,cAAA,GAAiB,EAAE;EAC/BC,aAAA,EAAeC,iBAAiB;EAEhC;EACAC,SAAA,GAAY,KAAK;EACjBC,SAAA,GAAYd,kBAAkB;EAC9Be,QAAA,GAAWjB,eAAe;EAC1BkB,gBAAA,GAAmBf,yBAAyB;EAC5CgB,OAAA,EAASC,WAAA,GAAc;AAAE,CACL;EACpB,MAAsEC,oBAAA,GAAAjB,mBAAA,CAAoB;MACxF;MACAG,KAAA,EAAOC,SAAA;MACPC,YAAA;MACAC,QAAA;MAEA;MACAC,UAAA,EAAYC,cAAA;MACZC,aAAA,EAAeC,iBAAA;MAEf;MACAR;IACF;IAZM;MAAEC,KAAK;MAAEI,UAAU;MAAEE;IAAa,CAA2B,GAAGQ,oBAAA;IAAzBC,oBAAA,GAAAC,0BAAA,CAAyBF,oBAAA,GAA9D,SAAO,cAAY,gB;EAc3B,MAAM,CAACG,MAAA,EAAQC,SAAA,CAAU,GAAG5B,QAAA,CAAS;EACrC,MAAM,CAACsB,OAAA,EAASO,UAAA,CAAW,GAAG7B,QAAA,CAA8B,MAC1D2B,MAAA,GACIvB,gBAAA,CAAiB;IACjBM,KAAA;IACAI,UAAA;IACAK,SAAA;IACAD,SAAA;IACAE,QAAA;IACAE,OAAA,EAASC,WAAA;IACTF;EACF,KACE,EAAE;EAGR,MAAM,CAACS,kBAAA,EAAoBC,qBAAA,CAAsB,GAAG/B,QAAA,CAAwB;EAC5E,MAAM,CAACgC,aAAA,EAAeC,gBAAA,CAAiB,GAAGjC,QAAA,CAAmC;EAE7E,MAAMkC,iBAAA,GAAoBnC,WAAA,CAAaoC,KAAA;IACrCnB,aAAA,CAAcmB,KAAA;IAEd,IAAI,CAACR,MAAA,EAAQ;MACX;IACF;IAEAC,SAAA,CAAU;IACVG,qBAAA,CAAsB;EACxB,GAAG,CAACf,aAAA,EAAeW,MAAA,CAAO;EAE1BzB,iBAAA,CAAkB;IAChB,IAAI,CAACyB,MAAA,EAAQ;MACX;IACF;IAEAE,UAAA,CAAYO,WAAA;MACV,MAAMC,WAAA,GAAcjC,gBAAA,CAAiB;QACnCM,KAAA;QACAI,UAAA;QACAK,SAAA;QACAD,SAAA;QACAE,QAAA;QACAE,OAAA,EAASC,WAAA;QACTF;MACF;MAEA,IAAIpB,OAAA,CAAQmC,WAAA,EAAaC,WAAA,GAAc;QACrC,OAAOD,WAAA;MACT;MAEA,OAAOC,WAAA;IACT;EACF,GAAG,CACDV,MAAA,EACAjB,KAAA,EACAI,UAAA,EACAS,WAAA,EACAL,SAAA,EACAG,gBAAA,EACAD,QAAA,CACD;EAED,OAAOkB,oBAAA,CAAAC,cAAA,KACFd,oBAAA;IAEH;IACAf,KAAA;IAEA;IACAI,UAAA;IACAE,aAAA,EAAekB,iBAAA;IAEf;IACAZ,OAAA;IACAK,MAAA;IACAC,SAAA;IACAI,aAAA;IACAF,kBAAA;IACAG,gBAAA;IACAF;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}