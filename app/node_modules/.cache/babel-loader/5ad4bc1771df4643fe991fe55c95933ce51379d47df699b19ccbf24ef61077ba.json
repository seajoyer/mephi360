{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useCustomEnsuredControl } from \"../../../../hooks/useEnsureControl\";\nimport { getNewOptionData } from \"./helpers/getNewOptionData\";\nimport { isValueLikeOption } from \"./helpers/isValueLikeOption\";\nimport { simulateReactInput } from \"./helpers/simulateReactInput\";\n/**\n * Hook for managing the state and interactions of a multiselect input component.\n * It handles adding and removing options, input changes, and input clearing functionalities.\n */\nexport const useMultiselectInput = ({\n  disabled,\n  value: valueProp,\n  onChange,\n  defaultValue = [],\n  inputValue: inputValueProp = '',\n  onInputChange\n}) => {\n  const [value, setValue] = useCustomEnsuredControl({\n    value: valueProp,\n    disabled,\n    defaultValue,\n    onChange\n  });\n  const inputRef = useRef(null);\n  const [inputValue, setInputValue] = useState(inputValueProp);\n  const toggleOption = useCallback((nextValueProp, isNewValue) => {\n    let valueForChange = valueProp;\n    setValue(prevValue => {\n      const isLikeOption = isValueLikeOption(nextValueProp);\n      const resolvedOption = isLikeOption ? getNewOptionData(nextValueProp.value, nextValueProp.label) : getNewOptionData(nextValueProp, typeof nextValueProp === 'string' ? nextValueProp : '');\n      const nextValue = prevValue.filter(option => resolvedOption.value !== option.value);\n      if (isNewValue) {\n        nextValue.push(isLikeOption ? _object_spread({}, nextValueProp, resolvedOption) : resolvedOption);\n      }\n      valueForChange = nextValue;\n      return nextValue;\n    });\n    onChange === null || onChange === void 0 ? void 0 : onChange(valueForChange);\n  }, [setValue]);\n  const clearInput = useCallback(() => {\n    simulateReactInput(inputRef.current, '');\n  }, [inputRef]);\n  const addOption = useCallback(newValue => toggleOption(newValue, true), [toggleOption]);\n  const removeOption = useCallback(newValue => {\n    toggleOption(newValue, false);\n  }, [toggleOption]);\n  const addOptionFromInput = useCallback(inputValueToAdd => {\n    const label = inputValueToAdd.trim();\n    if (!label) {\n      return;\n    }\n    addOption(label);\n    clearInput();\n  }, [addOption, clearInput]);\n  const inputChange = useCallback(event => {\n    setInputValue(event.currentTarget.value);\n    onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(event);\n  }, [onInputChange]);\n  return {\n    value,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n    inputRef,\n    inputValue,\n    onInputChange: inputChange,\n    clearInput\n  };\n};","map":{"version":3,"names":["useCallback","useRef","useState","useCustomEnsuredControl","getNewOptionData","isValueLikeOption","simulateReactInput","useMultiselectInput","disabled","value","valueProp","onChange","defaultValue","inputValue","inputValueProp","onInputChange","setValue","inputRef","setInputValue","toggleOption","nextValueProp","isNewValue","valueForChange","prevValue","isLikeOption","resolvedOption","label","nextValue","filter","option","push","_object_spread","clearInput","current","addOption","newValue","removeOption","addOptionFromInput","inputValueToAdd","trim","inputChange","event","currentTarget"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Form/Multiselect/hooks/useMultiselectInput.ts"],"sourcesContent":["'use client';\n\nimport { ChangeEvent, useCallback, useRef, useState } from 'react';\n\nimport { useCustomEnsuredControl } from 'hooks/useEnsureControl';\n\nimport { MultiselectOption, MultiselectOptionValue } from '../types';\nimport { getNewOptionData } from './helpers/getNewOptionData';\nimport { isValueLikeOption } from './helpers/isValueLikeOption';\nimport { simulateReactInput } from './helpers/simulateReactInput';\n\nexport interface UseMultiselectInputProps {\n  /** If true, the multiselect is considered disabled and cannot be interacted with. */\n  disabled?: boolean;\n  /** The currently selected options. */\n  value: MultiselectOption[];\n  /** The default value(s) for the multiselect if `value` is uncontrolled. */\n  defaultValue?: MultiselectOption[];\n  /** Callback fired when the selected options change. */\n  onChange?: (options: MultiselectOption[]) => void;\n  /** The current value of the input field, for controlling component behavior. */\n  inputValue?: string;\n  /** Callback fired when the input value changes. */\n  onInputChange?: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\n/**\n * Hook for managing the state and interactions of a multiselect input component.\n * It handles adding and removing options, input changes, and input clearing functionalities.\n */\nexport const useMultiselectInput = ({\n  disabled,\n  value: valueProp,\n  onChange,\n  defaultValue = [],\n  inputValue: inputValueProp = '',\n  onInputChange,\n}: UseMultiselectInputProps) => {\n  const [value, setValue] = useCustomEnsuredControl({\n    value: valueProp,\n    disabled,\n    defaultValue,\n    onChange,\n  });\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [inputValue, setInputValue] = useState(inputValueProp);\n\n  const toggleOption = useCallback((nextValueProp: MultiselectOption | MultiselectOptionValue, isNewValue: boolean) => {\n    let valueForChange = valueProp;\n\n    setValue((prevValue) => {\n      const isLikeOption = isValueLikeOption(nextValueProp);\n      const resolvedOption = isLikeOption\n        ? getNewOptionData(nextValueProp.value, nextValueProp.label)\n        : getNewOptionData(nextValueProp, typeof nextValueProp === 'string' ? nextValueProp : '');\n      const nextValue = prevValue.filter((option) => resolvedOption.value !== option.value);\n\n      if (isNewValue) {\n        nextValue.push(isLikeOption ? {\n          ...nextValueProp,\n          ...resolvedOption,\n        } : resolvedOption);\n      }\n\n      valueForChange = nextValue;\n      return nextValue;\n    });\n\n    onChange?.(valueForChange);\n  }, [setValue]);\n\n  const clearInput = useCallback(() => {\n    simulateReactInput(inputRef.current!, '');\n  }, [inputRef]);\n\n  const addOption = useCallback(\n    (newValue: MultiselectOption | MultiselectOptionValue) => toggleOption(newValue, true),\n    [toggleOption],\n  );\n\n  const removeOption = useCallback((newValue: MultiselectOption | MultiselectOptionValue) => {\n    toggleOption(newValue, false);\n  }, [toggleOption]);\n\n  const addOptionFromInput = useCallback((inputValueToAdd: string) => {\n    const label = inputValueToAdd.trim();\n\n    if (!label) {\n      return;\n    }\n\n    addOption(label);\n    clearInput();\n  }, [addOption, clearInput]);\n\n  const inputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.currentTarget.value);\n    onInputChange?.(event);\n  }, [onInputChange]);\n\n  return {\n    value,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n\n    inputRef,\n    inputValue,\n    onInputChange: inputChange,\n    clearInput,\n  };\n};\n"],"mappings":"AAAA;;;AAEA,SAAsBA,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAQ;AAE3D,SAASC,uBAAuB,QAAQ;AAGxC,SAASC,gBAAgB,QAAQ;AACjC,SAASC,iBAAiB,QAAQ;AAClC,SAASC,kBAAkB,QAAQ;AAiBnC;;;;AAIA,OAAO,MAAMC,mBAAA,GAAsBA,CAAC;EAClCC,QAAQ;EACRC,KAAA,EAAOC,SAAS;EAChBC,QAAQ;EACRC,YAAA,GAAe,EAAE;EACjBC,UAAA,EAAYC,cAAA,GAAiB,EAAE;EAC/BC;AAAa,CACY;EACzB,MAAM,CAACN,KAAA,EAAOO,QAAA,CAAS,GAAGb,uBAAA,CAAwB;IAChDM,KAAA,EAAOC,SAAA;IACPF,QAAA;IACAI,YAAA;IACAD;EACF;EAEA,MAAMM,QAAA,GAAWhB,MAAA,CAAyB;EAC1C,MAAM,CAACY,UAAA,EAAYK,aAAA,CAAc,GAAGhB,QAAA,CAASY,cAAA;EAE7C,MAAMK,YAAA,GAAenB,WAAA,CAAY,CAACoB,aAAA,EAA2DC,UAAA;IAC3F,IAAIC,cAAA,GAAiBZ,SAAA;IAErBM,QAAA,CAAUO,SAAA;MACR,MAAMC,YAAA,GAAenB,iBAAA,CAAkBe,aAAA;MACvC,MAAMK,cAAA,GAAiBD,YAAA,GACnBpB,gBAAA,CAAiBgB,aAAA,CAAcX,KAAK,EAAEW,aAAA,CAAcM,KAAK,IACzDtB,gBAAA,CAAiBgB,aAAA,EAAe,OAAOA,aAAA,KAAkB,WAAWA,aAAA,GAAgB;MACxF,MAAMO,SAAA,GAAYJ,SAAA,CAAUK,MAAM,CAAEC,MAAA,IAAWJ,cAAA,CAAehB,KAAK,KAAKoB,MAAA,CAAOpB,KAAK;MAEpF,IAAIY,UAAA,EAAY;QACdM,SAAA,CAAUG,IAAI,CAACN,YAAA,GAAeO,cAAA,KACzBX,aAAA,EACAK,cAAA,IACDA,cAAA;MACN;MAEAH,cAAA,GAAiBK,SAAA;MACjB,OAAOA,SAAA;IACT;IAEAhB,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAWW,cAAA;EACb,GAAG,CAACN,QAAA,CAAS;EAEb,MAAMgB,UAAA,GAAahC,WAAA,CAAY;IAC7BM,kBAAA,CAAmBW,QAAA,CAASgB,OAAO,EAAG;EACxC,GAAG,CAAChB,QAAA,CAAS;EAEb,MAAMiB,SAAA,GAAYlC,WAAA,CACfmC,QAAA,IAAyDhB,YAAA,CAAagB,QAAA,EAAU,OACjF,CAAChB,YAAA,CAAa;EAGhB,MAAMiB,YAAA,GAAepC,WAAA,CAAamC,QAAA;IAChChB,YAAA,CAAagB,QAAA,EAAU;EACzB,GAAG,CAAChB,YAAA,CAAa;EAEjB,MAAMkB,kBAAA,GAAqBrC,WAAA,CAAasC,eAAA;IACtC,MAAMZ,KAAA,GAAQY,eAAA,CAAgBC,IAAI;IAElC,IAAI,CAACb,KAAA,EAAO;MACV;IACF;IAEAQ,SAAA,CAAUR,KAAA;IACVM,UAAA;EACF,GAAG,CAACE,SAAA,EAAWF,UAAA,CAAW;EAE1B,MAAMQ,WAAA,GAAcxC,WAAA,CAAayC,KAAA;IAC/BvB,aAAA,CAAcuB,KAAA,CAAMC,aAAa,CAACjC,KAAK;IACvCM,aAAA,aAAAA,aAAA,uBAAAA,aAAA,CAAgB0B,KAAA;EAClB,GAAG,CAAC1B,aAAA,CAAc;EAElB,OAAO;IACLN,KAAA;IACAyB,SAAA;IACAG,kBAAA;IACAD,YAAA;IAEAnB,QAAA;IACAJ,UAAA;IACAE,aAAA,EAAeyB,WAAA;IACfR;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}