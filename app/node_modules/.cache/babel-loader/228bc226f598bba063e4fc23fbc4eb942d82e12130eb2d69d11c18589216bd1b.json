{"ast":null,"code":"'use client';\n\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { classNames } from \"../../../../../helpers/classNames\";\nimport { hasReactNode } from \"../../../../../helpers/react/node\";\nimport { usePlatform } from \"../../../../../hooks/usePlatform\";\nimport { Icon16Chevron } from \"../../../../../icons/16/chevron\";\nimport { Text } from \"../../../../Typography/Text/Text\";\n/**\n * Renders a navigation element with optional text content and an icon. The presence of the icon is\n * dependent on the content and the platform, providing flexibility for different UI scenarios.\n */\nexport const Navigation = ({\n  className,\n  children\n}) => {\n  const platform = usePlatform();\n  const hasChildren = hasReactNode(children);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classNames(\"tgui-97dd747d03e9d3e0\", className),\n    children: [hasChildren && /*#__PURE__*/_jsx(Text, {\n      className: \"tgui-64a5a0dc5509605e\",\n      children: children\n    }), (!hasChildren || platform === 'ios') && /*#__PURE__*/_jsx(Icon16Chevron, {\n      className: \"tgui-3b026a2674eb3f4c\"\n    })]\n  });\n};","map":{"version":3,"names":["classNames","hasReactNode","usePlatform","Icon16Chevron","Text","Navigation","className","children","platform","hasChildren","_jsxs","_jsx"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/components/Blocks/Cell/components/Navigation/Navigation.tsx"],"sourcesContent":["'use client';\n\nimport { HTMLAttributes } from 'react';\nimport styles from './Navigation.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Icon16Chevron } from 'icons/16/chevron';\n\nimport { Text } from 'components/Typography/Text/Text';\n\nexport type NavigationProps = HTMLAttributes<HTMLDivElement>;\n\n/**\n * Renders a navigation element with optional text content and an icon. The presence of the icon is\n * dependent on the content and the platform, providing flexibility for different UI scenarios.\n */\nexport const Navigation = ({ className, children }: NavigationProps) => {\n  const platform = usePlatform();\n  const hasChildren = hasReactNode(children);\n\n  return (\n    <div className={classNames(styles.wrapper, className)}>\n      {hasChildren && <Text className={styles.text}>{children}</Text>}\n      {(!hasChildren || platform === 'ios') && <Icon16Chevron className={styles.icon} />}\n    </div>\n  );\n};\n"],"mappings":"AAAA;;;AAKA,SAASA,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAC7B,SAASC,WAAW,QAAQ;AAE5B,SAASC,aAAa,QAAQ;AAE9B,SAASC,IAAI,QAAQ;AAIrB;;;;AAIA,OAAO,MAAMC,UAAA,GAAaA,CAAC;EAAEC,SAAS;EAAEC;AAAQ,CAAmB;EACjE,MAAMC,QAAA,GAAWN,WAAA;EACjB,MAAMO,WAAA,GAAcR,YAAA,CAAaM,QAAA;EAEjC,oBACEG,KAAA,CAAC;IAAIJ,SAAA,EAAWN,UAAA,0BAA2BM,SAAA;eACxCG,WAAA,iBAAeE,IAAA,CAACP,IAAA;MAAKE,SAAS;gBAAgBC;QAC7C,EAACE,WAAA,IAAeD,QAAA,KAAa,KAAI,kBAAMG,IAAA,CAACR,aAAA;MAAcG,SAAS;;;AAGvE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}