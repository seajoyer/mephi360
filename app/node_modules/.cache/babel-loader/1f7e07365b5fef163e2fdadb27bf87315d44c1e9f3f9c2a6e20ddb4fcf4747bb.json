{"ast":null,"code":"'use client';\n\nimport { useCallback, useRef } from \"react\";\nimport { Keys } from \"../../../../helpers/accessibility\";\nimport { clamp } from \"../../../../helpers/math\";\nimport { useCustomEnsuredControl } from \"../../../../hooks/useEnsureControl\";\nexport const AVAILABLE_PINS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, Keys.BACKSPACE];\nexport const usePinInput = ({\n  pinCount,\n  value: valueProp = [],\n  onChange\n}) => {\n  const inputRefs = useRef([]).current;\n  const [value, setValue] = useCustomEnsuredControl({\n    defaultValue: valueProp,\n    onChange\n  });\n  const focusByIndex = index => {\n    requestAnimationFrame(() => {\n      var _inputRefs_index;\n      return (_inputRefs_index = inputRefs[index]) === null || _inputRefs_index === void 0 ? void 0 : _inputRefs_index.focus();\n    });\n  };\n  const setValueByIndex = (index, newValue) => {\n    setValue(prev => {\n      const nextValue = [...prev];\n      nextValue[index] = newValue;\n      return nextValue;\n    });\n  };\n  const removeLastValue = currentIndex => {\n    setValue(prev => prev.slice(0, -1));\n    focusByIndex(currentIndex - 1);\n  };\n  const handleClickValue = useCallback(enteredValue => {\n    const lastIndex = clamp(value.length, 0, pinCount - 1);\n    setValueByIndex(lastIndex, enteredValue);\n    focusByIndex(lastIndex + 1);\n  }, [value, pinCount]);\n  const handleClickBackspace = useCallback(() => {\n    removeLastValue(value.length - 1);\n  }, [value]);\n  const handleButton = useCallback((index, button) => {\n    if (AVAILABLE_PINS.includes(Number(button))) {\n      setValueByIndex(index, Number(button));\n      focusByIndex(index + 1);\n    }\n    switch (button) {\n      case Keys.BACKSPACE:\n        removeLastValue(index);\n        break;\n      case Keys.ARROW_LEFT:\n        focusByIndex(index - 1);\n        break;\n      case Keys.ARROW_RIGHT:\n        focusByIndex(index + 1);\n        break;\n      default:\n        break;\n    }\n  }, []);\n  const setInputRefByIndex = useCallback((index, ref) => {\n    if (!ref) {\n      return;\n    }\n    inputRefs[index] = ref;\n  }, []);\n  return {\n    value,\n    setInputRefByIndex,\n    handleClickValue,\n    handleClickBackspace,\n    handleButton\n  };\n};","map":{"version":3,"names":["useCallback","useRef","Keys","clamp","useCustomEnsuredControl","AVAILABLE_PINS","BACKSPACE","usePinInput","pinCount","value","valueProp","onChange","inputRefs","current","setValue","defaultValue","focusByIndex","index","requestAnimationFrame","_inputRefs_index","focus","setValueByIndex","newValue","prev","nextValue","removeLastValue","currentIndex","slice","handleClickValue","enteredValue","lastIndex","length","handleClickBackspace","handleButton","button","includes","Number","ARROW_LEFT","ARROW_RIGHT","setInputRefByIndex","ref"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Form/PinInput/hooks/usePinInput.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useRef } from 'react';\n\nimport { Keys } from 'helpers/accessibility';\nimport { clamp } from 'helpers/math';\nimport { useCustomEnsuredControl } from 'hooks/useEnsureControl';\n\ninterface UsePinInputProps {\n  pinCount: number;\n  value?: number[];\n  onChange?(value: number[]): void;\n}\n\nexport const AVAILABLE_PINS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, Keys.BACKSPACE];\n\nexport const usePinInput = ({\n  pinCount,\n  value: valueProp = [],\n  onChange,\n}: UsePinInputProps) => {\n  const inputRefs = useRef<HTMLLabelElement[]>([]).current;\n  const [value, setValue] = useCustomEnsuredControl({\n    defaultValue: valueProp,\n    onChange,\n  });\n\n  const focusByIndex = (index: number) => {\n    requestAnimationFrame(() => inputRefs[index]?.focus());\n  };\n\n  const setValueByIndex = (index: number, newValue: number) => {\n    setValue((prev) => {\n      const nextValue = [...prev];\n      nextValue[index] = newValue;\n      return nextValue;\n    });\n  };\n\n  const removeLastValue = (currentIndex: number) => {\n    setValue((prev) => prev.slice(0, -1));\n    focusByIndex(currentIndex - 1);\n  };\n\n  const handleClickValue = useCallback((enteredValue: number) => {\n    const lastIndex = clamp(value.length, 0, pinCount - 1);\n    setValueByIndex(lastIndex, enteredValue);\n    focusByIndex(lastIndex + 1);\n  }, [value, pinCount]);\n\n  const handleClickBackspace = useCallback(() => {\n    removeLastValue(value.length - 1);\n  }, [value]);\n\n  const handleButton = useCallback((index: number, button: string) => {\n    if (AVAILABLE_PINS.includes(Number(button))) {\n      setValueByIndex(index, Number(button));\n      focusByIndex(index + 1);\n    }\n\n    switch (button) {\n      case Keys.BACKSPACE:\n        removeLastValue(index);\n        break;\n\n      case Keys.ARROW_LEFT:\n        focusByIndex(index - 1);\n        break;\n\n      case Keys.ARROW_RIGHT:\n        focusByIndex(index + 1);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  const setInputRefByIndex = useCallback((index: number, ref: HTMLLabelElement | null) => {\n    if (!ref) {\n      return;\n    }\n\n    inputRefs[index] = ref;\n  }, []);\n\n  return {\n    value,\n    setInputRefByIndex,\n    handleClickValue,\n    handleClickBackspace,\n    handleButton,\n  };\n};\n"],"mappings":"AAAA;;AAEA,SAASA,WAAW,EAAEC,MAAM,QAAQ;AAEpC,SAASC,IAAI,QAAQ;AACrB,SAASC,KAAK,QAAQ;AACtB,SAASC,uBAAuB,QAAQ;AAQxC,OAAO,MAAMC,cAAA,GAAiB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAGH,IAAA,CAAKI,SAAS,CAAC;AAE5E,OAAO,MAAMC,WAAA,GAAcA,CAAC;EAC1BC,QAAQ;EACRC,KAAA,EAAOC,SAAA,GAAY,EAAE;EACrBC;AAAQ,CACS;EACjB,MAAMC,SAAA,GAAYX,MAAA,CAA2B,EAAE,EAAEY,OAAO;EACxD,MAAM,CAACJ,KAAA,EAAOK,QAAA,CAAS,GAAGV,uBAAA,CAAwB;IAChDW,YAAA,EAAcL,SAAA;IACdC;EACF;EAEA,MAAMK,YAAA,GAAgBC,KAAA;IACpBC,qBAAA,CAAsB;UAAMC,gBAAA;cAAAA,gBAAA,GAAAP,SAAS,CAACK,KAAA,CAAM,cAAhBE,gBAAA,uBAAAA,gBAAA,CAAkBC,KAAK;;EACrD;EAEA,MAAMC,eAAA,GAAkBA,CAACJ,KAAA,EAAeK,QAAA;IACtCR,QAAA,CAAUS,IAAA;MACR,MAAMC,SAAA,GAAY,C,GAAID,IAAA,CAAK;MAC3BC,SAAS,CAACP,KAAA,CAAM,GAAGK,QAAA;MACnB,OAAOE,SAAA;IACT;EACF;EAEA,MAAMC,eAAA,GAAmBC,YAAA;IACvBZ,QAAA,CAAUS,IAAA,IAASA,IAAA,CAAKI,KAAK,CAAC,GAAG,CAAC;IAClCX,YAAA,CAAaU,YAAA,GAAe;EAC9B;EAEA,MAAME,gBAAA,GAAmB5B,WAAA,CAAa6B,YAAA;IACpC,MAAMC,SAAA,GAAY3B,KAAA,CAAMM,KAAA,CAAMsB,MAAM,EAAE,GAAGvB,QAAA,GAAW;IACpDa,eAAA,CAAgBS,SAAA,EAAWD,YAAA;IAC3Bb,YAAA,CAAac,SAAA,GAAY;EAC3B,GAAG,CAACrB,KAAA,EAAOD,QAAA,CAAS;EAEpB,MAAMwB,oBAAA,GAAuBhC,WAAA,CAAY;IACvCyB,eAAA,CAAgBhB,KAAA,CAAMsB,MAAM,GAAG;EACjC,GAAG,CAACtB,KAAA,CAAM;EAEV,MAAMwB,YAAA,GAAejC,WAAA,CAAY,CAACiB,KAAA,EAAeiB,MAAA;IAC/C,IAAI7B,cAAA,CAAe8B,QAAQ,CAACC,MAAA,CAAOF,MAAA,IAAU;MAC3Cb,eAAA,CAAgBJ,KAAA,EAAOmB,MAAA,CAAOF,MAAA;MAC9BlB,YAAA,CAAaC,KAAA,GAAQ;IACvB;IAEA,QAAQiB,MAAA;MACN,KAAKhC,IAAA,CAAKI,SAAS;QACjBmB,eAAA,CAAgBR,KAAA;QAChB;MAEF,KAAKf,IAAA,CAAKmC,UAAU;QAClBrB,YAAA,CAAaC,KAAA,GAAQ;QACrB;MAEF,KAAKf,IAAA,CAAKoC,WAAW;QACnBtB,YAAA,CAAaC,KAAA,GAAQ;QACrB;MAEF;QACE;IACJ;EACF,GAAG,EAAE;EAEL,MAAMsB,kBAAA,GAAqBvC,WAAA,CAAY,CAACiB,KAAA,EAAeuB,GAAA;IACrD,IAAI,CAACA,GAAA,EAAK;MACR;IACF;IAEA5B,SAAS,CAACK,KAAA,CAAM,GAAGuB,GAAA;EACrB,GAAG,EAAE;EAEL,OAAO;IACL/B,KAAA;IACA8B,kBAAA;IACAX,gBAAA;IACAI,oBAAA;IACAC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}