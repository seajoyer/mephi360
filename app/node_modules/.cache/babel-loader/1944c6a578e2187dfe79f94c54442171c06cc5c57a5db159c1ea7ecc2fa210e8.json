{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { canUseDOM } from \"../helpers/dom\";\nimport { useEnhancedEffect } from \"./useEnhancedEffect\";\n/**\n * Custom React hook for handling event listeners in a declarative way.\n * Copied from https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/hooks/useEventListener.ts\n * */\nexport function useEventListener(event, _cb, _options) {\n  const cbRef = useRef(_cb);\n  useEnhancedEffect(() => {\n    cbRef.current = _cb;\n  }, [_cb]);\n  // Callback function to be executed when the event occurs\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  const cb = useCallback(e => cbRef.current && cbRef.current(e), []);\n  // Refs to store the detach and remove functions\n  const detach = useRef(() => {});\n  const remove = useCallback(() => {\n    detach.current();\n    detach.current = () => {};\n  }, []);\n  const add = useCallback(el => {\n    if (!canUseDOM) {\n      return;\n    }\n    remove();\n    if (!el) {\n      return;\n    }\n    const options = _object_spread({}, _options);\n    el.addEventListener(event, cb, options);\n    detach.current = () => el.removeEventListener(event, cb, options);\n  }, [_options, cb, event, remove]);\n  useEffect(() => remove, [remove]);\n  return useMemo(() => ({\n    add,\n    remove\n  }), [add, remove]);\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","canUseDOM","useEnhancedEffect","useEventListener","event","_cb","_options","cbRef","current","cb","e","detach","remove","add","el","options","_object_spread","addEventListener","removeEventListener"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/TGUI-Example/node_modules/@telegram-apps/telegram-ui/src/hooks/useEventListener.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport { canUseDOM } from 'helpers/dom';\n\nimport { useEnhancedEffect } from './useEnhancedEffect';\n\ninterface EventListenerHandle {\n  add: (el: HTMLElement | Document | Window) => void;\n  remove: () => void;\n}\n\nexport function useEventListener<K extends keyof GlobalEventHandlersEventMap>(\n  event: K,\n  _cb: false | null | undefined | ((ev: GlobalEventHandlersEventMap[K]) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle;\n\nexport function useEventListener<E extends Event>(\n  event: string,\n  _cb: false | null | undefined | ((ev: E) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle;\n/**\n * Custom React hook for handling event listeners in a declarative way.\n * Copied from https://github.com/VKCOM/VKUI/blob/master/packages/vkui/src/hooks/useEventListener.ts\n * */\nexport function useEventListener<E extends Event, K extends keyof GlobalEventHandlersEventMap>(\n  event: string | K,\n  _cb: false | null | undefined | ((ev: E) => void),\n  _options?: AddEventListenerOptions,\n): EventListenerHandle {\n  const cbRef = useRef(_cb);\n\n  useEnhancedEffect(() => {\n    cbRef.current = _cb;\n  }, [_cb]);\n\n  // Callback function to be executed when the event occurs\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  const cb = useCallback((e: any) => cbRef.current && cbRef.current(e), []);\n\n  // Refs to store the detach and remove functions\n  const detach = useRef(() => {});\n  const remove = useCallback(() => {\n    detach.current();\n    detach.current = () => {};\n  }, []);\n\n  const add = useCallback(\n    (el: HTMLElement | Document | Window) => {\n      if (!canUseDOM) {\n        return;\n      }\n\n      remove();\n      if (!el) {\n        return;\n      }\n\n      const options = { ..._options };\n      el.addEventListener(event, cb, options);\n      detach.current = () => el.removeEventListener(event, cb, options);\n    },\n    [_options, cb, event, remove],\n  );\n\n  useEffect(() => remove, [remove]);\n  return useMemo(() => ({ add, remove }), [add, remove]);\n}\n"],"mappings":"AAAA;;;AAEA,SAASA,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,QAAQ;AAExD,SAASC,SAAS,QAAQ;AAE1B,SAASC,iBAAiB,QAAQ;AAkBlC;;;;AAIA,OAAO,SAASC,iBACdC,KAAiB,EACjBC,GAAiD,EACjDC,QAAkC;EAElC,MAAMC,KAAA,GAAQP,MAAA,CAAOK,GAAA;EAErBH,iBAAA,CAAkB;IAChBK,KAAA,CAAMC,OAAO,GAAGH,GAAA;EAClB,GAAG,CAACA,GAAA,CAAI;EAER;EACA;EACA,MAAMI,EAAA,GAAKZ,WAAA,CAAaa,CAAA,IAAWH,KAAA,CAAMC,OAAO,IAAID,KAAA,CAAMC,OAAO,CAACE,CAAA,GAAI,EAAE;EAExE;EACA,MAAMC,MAAA,GAASX,MAAA,CAAO,OAAO;EAC7B,MAAMY,MAAA,GAASf,WAAA,CAAY;IACzBc,MAAA,CAAOH,OAAO;IACdG,MAAA,CAAOH,OAAO,GAAG,OAAO;EAC1B,GAAG,EAAE;EAEL,MAAMK,GAAA,GAAMhB,WAAA,CACTiB,EAAA;IACC,IAAI,CAACb,SAAA,EAAW;MACd;IACF;IAEAW,MAAA;IACA,IAAI,CAACE,EAAA,EAAI;MACP;IACF;IAEA,MAAMC,OAAA,GAAUC,cAAA,KAAKV,QAAA;IACrBQ,EAAA,CAAGG,gBAAgB,CAACb,KAAA,EAAOK,EAAA,EAAIM,OAAA;IAC/BJ,MAAA,CAAOH,OAAO,GAAG,MAAMM,EAAA,CAAGI,mBAAmB,CAACd,KAAA,EAAOK,EAAA,EAAIM,OAAA;EAC3D,GACA,CAACT,QAAA,EAAUG,EAAA,EAAIL,KAAA,EAAOQ,MAAA,CAAO;EAG/Bd,SAAA,CAAU,MAAMc,MAAA,EAAQ,CAACA,MAAA,CAAO;EAChC,OAAOb,OAAA,CAAQ,OAAO;IAAEc,GAAA;IAAKD;EAAO,IAAI,CAACC,GAAA,EAAKD,MAAA,CAAO;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}