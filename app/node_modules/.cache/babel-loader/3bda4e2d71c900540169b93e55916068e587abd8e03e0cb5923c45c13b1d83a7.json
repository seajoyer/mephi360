{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { classNames } from \"../../../helpers/classNames\";\n/**\n * Used as a placeholder during the loading state of a component or page. It can visually mimic\n * the layout that will be replaced by the actual content once loaded, improving user experience by reducing perceived loading times.\n */\nexport const Skeleton = _param => {\n  var {\n      withoutAnimation,\n      visible,\n      className,\n      children\n    } = _param,\n    restProps = _object_without_properties(_param, [\"withoutAnimation\", \"visible\", \"className\", \"children\"]);\n  return /*#__PURE__*/_jsx(\"div\", _object_spread_props(_object_spread({\n    className: classNames(\"tgui-97f2df57786b02dc\", visible && \"tgui-3eb6091f664c15d6\", withoutAnimation && \"tgui-ecf101b3117a96c8\", className)\n  }, restProps), {\n    children: children\n  }));\n};","map":{"version":3,"names":["classNames","Skeleton","_param","withoutAnimation","visible","className","children","restProps","_object_without_properties","_jsx","_object_spread_props","_object_spread"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Feedback/Skeleton/Skeleton.tsx"],"sourcesContent":["import { HTMLAttributes } from 'react';\nimport styles from './Skeleton.module.css';\n\nimport { classNames } from 'helpers/classNames';\n\nexport interface SkeletonProps extends HTMLAttributes<HTMLDivElement> {\n  /** If true, disables the shimmering animation of the skeleton. */\n  withoutAnimation?: boolean;\n  /** If true, the skeleton overlay is shown above the content. When false, the skeleton is hidden, showing any underlying content. */\n  visible?: boolean;\n}\n\n/**\n * Used as a placeholder during the loading state of a component or page. It can visually mimic\n * the layout that will be replaced by the actual content once loaded, improving user experience by reducing perceived loading times.\n */\nexport const Skeleton = ({\n  withoutAnimation,\n  visible,\n  className,\n  children,\n  ...restProps\n}: SkeletonProps) => (\n  <div\n    className={classNames(\n      styles.wrapper,\n      visible && styles['wrapper--visible'],\n      withoutAnimation && styles['wrapper--noAnimation'],\n      className,\n    )}\n    {...restProps}\n  >\n    {children}\n  </div>\n);\n"],"mappings":";;;;AAGA,SAASA,UAAU,QAAQ;AAS3B;;;;AAIA,OAAO,MAAMC,QAAA,GAAWC,MAAA;MAAC;MACvBC,gBAAgB;MAChBC,OAAO;MACPC,SAAS;MACTC;IAAQ,CAEM,GAAAJ,MAAA;IADXK,SAAA,GAAAC,0BAAA,CAAAN,MAAA,GAJH,oBACA,WACA,aACA,W;sBAGAO,IAAA,CAAC,OAAAC,oBAAA,CAAAC,cAAA;IACCN,SAAA,EAAWL,UAAA,0BAETI,OAAA,6BACAD,gBAAA,6BACAE,SAAA;KAEEE,SAAA;cAEHD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}