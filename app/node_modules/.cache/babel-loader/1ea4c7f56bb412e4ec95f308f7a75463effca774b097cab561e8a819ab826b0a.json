{"ast":null,"code":"'use client';\n\nimport { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from \"react\";\nimport { classNames } from \"../../../helpers/classNames\";\nimport { hasReactNode } from \"../../../helpers/react/node\";\nimport { usePlatform } from \"../../../hooks/usePlatform\";\nimport { Spinner } from \"../../Feedback/Spinner/Spinner\";\nimport { Tappable } from \"../../Service/Tappable/Tappable\";\nimport { ButtonTypography } from \"./components/ButtonTypography/ButtonTypography\";\nconst modeStyles = {\n  filled: \"tgui-8a1ca9efa24f4809\",\n  bezeled: \"tgui-91bda9a36246a33c\",\n  plain: \"tgui-48956537c34690db\",\n  gray: \"tgui-93106efd6b6d66ee\",\n  outline: \"tgui-e884e36ff1faa596\",\n  white: \"tgui-ba6d30cc81e39ae5\"\n};\nconst sizeStyles = {\n  s: \"tgui-13f23a224303ddaa\",\n  m: \"tgui-1a16a49d89076ff4\",\n  l: \"tgui-9cef742a22f195c9\"\n};\n/**\n * Renders a button or a button-like element with customizable properties, such as size, mode, and loading state. Supports adding icons or other elements before and after the text.\n */\nexport const Button = /*#__PURE__*/forwardRef((_param, ref) => {\n  var {\n      type,\n      size = 'm',\n      before,\n      after,\n      stretched,\n      children,\n      className,\n      mode = 'filled',\n      loading,\n      Component = 'button'\n    } = _param,\n    restProps = _object_without_properties(_param, [\"type\", \"size\", \"before\", \"after\", \"stretched\", \"children\", \"className\", \"mode\", \"loading\", \"Component\"]);\n  const platform = usePlatform();\n  return /*#__PURE__*/_jsxs(Tappable, _object_spread_props(_object_spread({\n    ref: ref,\n    type: type || 'button',\n    Component: Component,\n    className: classNames(\"tgui-117e77cd385a9c8d\", mode && modeStyles[mode], size && sizeStyles[size], platform === 'ios' && \"tgui-55e8aa7f5cea2280\", stretched && \"tgui-726846958fe7f4a0\", loading && \"tgui-490cb0f5ec4998f3\", className)\n  }, restProps), {\n    children: [loading && /*#__PURE__*/_jsx(Spinner, {\n      className: \"tgui-014f2b7d196b090d\",\n      size: \"s\"\n    }), hasReactNode(before) && /*#__PURE__*/_jsx(\"div\", {\n      className: \"tgui-06cc94d03a7c4dd7\",\n      children: before\n    }), /*#__PURE__*/_jsx(ButtonTypography, {\n      className: \"tgui-5f6014c0f063b6de\",\n      size: size,\n      children: children\n    }), hasReactNode(after) && /*#__PURE__*/_jsx(\"div\", {\n      className: \"tgui-8310172a5320ab71\",\n      children: after\n    })]\n  }));\n});","map":{"version":3,"names":["forwardRef","classNames","hasReactNode","usePlatform","Spinner","Tappable","ButtonTypography","modeStyles","filled","bezeled","plain","gray","outline","white","sizeStyles","s","m","l","Button","_param","ref","type","size","before","after","stretched","children","className","mode","loading","Component","restProps","_object_without_properties","platform","_jsxs","_object_spread_props","_object_spread","_jsx"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Blocks/Button/Button.tsx"],"sourcesContent":["'use client';\n\nimport { AllHTMLAttributes, ElementType, forwardRef, ReactNode } from 'react';\nimport styles from './Button.module.css';\n\nimport { classNames } from 'helpers/classNames';\nimport { hasReactNode } from 'helpers/react/node';\nimport { usePlatform } from 'hooks/usePlatform';\n\nimport { Spinner } from 'components/Feedback/Spinner/Spinner';\nimport { Tappable } from 'components/Service/Tappable/Tappable';\nimport { ButtonTypography } from './components/ButtonTypography/ButtonTypography';\n\nexport interface ButtonProps extends Omit<AllHTMLAttributes<HTMLButtonElement>, 'size'> {\n  /** Inserts a component before the button text, typically an icon. */\n  before?: ReactNode;\n  /** Inserts a component after the button text, such as a badge or indicator. */\n  after?: ReactNode;\n  /** Controls the size of the button, influencing padding and font size. */\n  size?: 's' | 'm' | 'l';\n  /** If true, stretches the button to fill the width with its container. */\n  stretched?: boolean;\n  /** Defines the button's visual style, affecting its background and text color. */\n  mode?: 'filled' | 'bezeled' | 'plain' | 'gray' | 'outline' | 'white';\n  /** Displays a loading indicator in place of the button content when true. */\n  loading?: boolean;\n  /** Disables the button, preventing user interactions, when true. */\n  disabled?: boolean;\n  /** Specifies the root element type for the button, allowing for semantic customization or integration with routing libraries. */\n  Component?: ElementType;\n}\n\nconst modeStyles = {\n  filled: styles['wrapper--filled'],\n  bezeled: styles['wrapper--bezeled'],\n  plain: styles['wrapper--plain'],\n  gray: styles['wrapper--gray'],\n  outline: styles['wrapper--outline'],\n  white: styles['wrapper--white'],\n};\n\nconst sizeStyles = {\n  s: styles['wrapper--s'],\n  m: styles['wrapper--m'],\n  l: styles['wrapper--l'],\n};\n\n/**\n * Renders a button or a button-like element with customizable properties, such as size, mode, and loading state. Supports adding icons or other elements before and after the text.\n */\nexport const Button = forwardRef(({\n  type,\n  size = 'm',\n  before,\n  after,\n  stretched,\n  children,\n  className,\n  mode = 'filled',\n  loading,\n  Component = 'button',\n  ...restProps\n}: ButtonProps, ref) => {\n  const platform = usePlatform();\n\n  return (\n    <Tappable\n      ref={ref}\n      type={type || 'button'}\n      Component={Component}\n      className={classNames(\n        styles.wrapper,\n        mode && modeStyles[mode],\n        size && sizeStyles[size],\n        platform === 'ios' && styles['wrapper--ios'],\n        stretched && styles['wrapper--stretched'],\n        loading && styles['wrapper--loading'],\n        className,\n      )}\n      {...restProps}\n    >\n      {loading && <Spinner className={styles.spinner} size=\"s\" />}\n      {hasReactNode(before) && (\n        <div className={styles.before}>\n          {before}\n        </div>\n      )}\n      <ButtonTypography className={styles.content} size={size}>{children}</ButtonTypography>\n      {hasReactNode(after) && (\n        <div className={styles.after}>\n          {after}\n        </div>\n      )}\n    </Tappable>\n  );\n});\n"],"mappings":"AAAA;;;;;;AAEA,SAAyCA,UAAU,QAAmB;AAGtE,SAASC,UAAU,QAAQ;AAC3B,SAASC,YAAY,QAAQ;AAC7B,SAASC,WAAW,QAAQ;AAE5B,SAASC,OAAO,QAAQ;AACxB,SAASC,QAAQ,QAAQ;AACzB,SAASC,gBAAgB,QAAQ;AAqBjC,MAAMC,UAAA,GAAa;EACjBC,MAAM;EACNC,OAAO;EACPC,KAAK;EACLC,IAAI;EACJC,OAAO;EACPC,KAAK;AACP;AAEA,MAAMC,UAAA,GAAa;EACjBC,CAAC;EACDC,CAAC;EACDC,CAAC;AACH;AAEA;;;AAGA,OAAO,MAAMC,MAAA,gBAASlB,UAAA,CAAW,CAAAmB,MAAA,EAYjBC,GAAA;MAZkB;MAChCC,IAAI;MACJC,IAAA,GAAO,GAAG;MACVC,MAAM;MACNC,KAAK;MACLC,SAAS;MACTC,QAAQ;MACRC,SAAS;MACTC,IAAA,GAAO,QAAQ;MACfC,OAAO;MACPC,SAAA,GAAY;IAAQ,CAER,GAAAX,MAAA;IADTY,SAAA,GAAAC,0BAAA,CAAAb,MAAA,GAVH,QACA,QACA,UACA,SACA,aACA,YACA,aACA,QACA,WACA,Y;EAGA,MAAMc,QAAA,GAAW9B,WAAA;EAEjB,oBACE+B,KAAA,CAAC7B,QAAA,EAAA8B,oBAAA,CAAAC,cAAA;IACChB,GAAA,EAAKA,GAAA;IACLC,IAAA,EAAMA,IAAA,IAAQ;IACdS,SAAA,EAAWA,SAAA;IACXH,SAAA,EAAW1B,UAAA,0BAET2B,IAAA,IAAQrB,UAAU,CAACqB,IAAA,CAAK,EACxBN,IAAA,IAAQR,UAAU,CAACQ,IAAA,CAAK,EACxBW,QAAA,KAAa,kCACbR,SAAA,6BACAI,OAAA,6BACAF,SAAA;KAEEI,SAAA;eAEHF,OAAA,iBAAWQ,IAAA,CAACjC,OAAA;MAAQuB,SAAS;MAAkBL,IAAA,EAAK;QACpDpB,YAAA,CAAaqB,MAAA,kBACZc,IAAA,CAAC;MAAIV,SAAS;gBACXJ;qBAGLc,IAAA,CAAC/B,gBAAA;MAAiBqB,SAAS;MAAkBL,IAAA,EAAMA,IAAA;gBAAOI;QACzDxB,YAAA,CAAasB,KAAA,kBACZa,IAAA,CAAC;MAAIV,SAAS;gBACXH;;;AAKX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}