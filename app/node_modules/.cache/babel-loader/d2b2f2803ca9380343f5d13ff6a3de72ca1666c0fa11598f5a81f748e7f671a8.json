{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, Fragment } from \"react\";\nimport { Cell } from \"../../../../Blocks/Cell/Cell\";\nimport { Popper } from \"../../../../Overlays/Popper/Popper\";\nimport { isCreateNewOptionPreset, isEmptyOptionPreset } from \"../../hooks/constants\";\nimport { renderOptionDefault } from \"./constants\";\n/**\n * Renders the dropdown menu for the multiselect input, including all options and managing interactions such as selection, focus, and mouse events.\n * Utilizes the `Popper` component for positioning relative to the input field.\n */\nexport const MultiselectDropdown = /*#__PURE__*/forwardRef(({\n  dropdownAriaId,\n  options,\n  onMouseLeave,\n  targetRef,\n  addOptionFromInput,\n  setFocusedOptionIndex,\n  renderOption = renderOptionDefault,\n  focusedOption,\n  value,\n  setOptionNode,\n  setOpened,\n  closeDropdownAfterSelect,\n  addOption,\n  focusedOptionIndex,\n  clearInput\n}, ref) => {\n  return /*#__PURE__*/_jsx(Popper, {\n    id: dropdownAriaId,\n    ref: ref,\n    targetRef: targetRef,\n    onMouseLeave: onMouseLeave,\n    autoUpdateOnTargetResize: true,\n    role: \"listbox\",\n    placement: \"bottom\",\n    sameWidth: true,\n    className: \"tgui-70d34454bcf3c3e4\",\n    children: options.map((option, index) => {\n      if (isEmptyOptionPreset(option)) {\n        return /*#__PURE__*/_jsx(Cell, {\n          readOnly: true,\n          className: \"tgui-6a25d2bd42bb932c\",\n          children: option.placeholder\n        }, \"empty\");\n      }\n      if (isCreateNewOptionPreset(option)) {\n        return /*#__PURE__*/_jsx(Cell, {\n          hovered: focusedOptionIndex === index,\n          onMouseDown: addOptionFromInput,\n          onMouseEnter: () => setFocusedOptionIndex(index),\n          children: option.actionText\n        }, \"new-options\");\n      }\n      return /*#__PURE__*/_jsx(Fragment, {\n        children: renderOption({\n          className: \"tgui-15f9ec3c119467a6\",\n          hovered: focusedOption ? option.value === focusedOption.value : false,\n          children: option.label,\n          selected: value.findIndex(selectedOption => selectedOption.value === option.value) !== -1,\n          ref: node => setOptionNode(index, node),\n          onMouseDown: event => {\n            if (event.defaultPrevented) {\n              return;\n            }\n            closeDropdownAfterSelect && setOpened(false);\n            addOption(option);\n            clearInput();\n          },\n          onMouseEnter: () => setFocusedOptionIndex(index)\n        })\n      }, `${typeof option.value}-${option.label}`);\n    })\n  });\n});","map":{"version":3,"names":["forwardRef","Fragment","Cell","Popper","isCreateNewOptionPreset","isEmptyOptionPreset","renderOptionDefault","MultiselectDropdown","dropdownAriaId","options","onMouseLeave","targetRef","addOptionFromInput","setFocusedOptionIndex","renderOption","focusedOption","value","setOptionNode","setOpened","closeDropdownAfterSelect","addOption","focusedOptionIndex","clearInput","ref","_jsx","id","autoUpdateOnTargetResize","role","placement","sameWidth","className","map","option","index","readOnly","placeholder","hovered","onMouseDown","onMouseEnter","actionText","children","label","selected","findIndex","selectedOption","node","event","defaultPrevented"],"sources":["/home/dmitry/Projects/MEPhI/MEPhI360/app/node_modules/@telegram-apps/telegram-ui/src/components/Form/Multiselect/components/MultiselectDropdown/MultiselectDropdown.tsx"],"sourcesContent":["import { forwardRef, ForwardRefExoticComponent, Fragment, MouseEvent, RefAttributes, RefObject } from 'react';\nimport styles from './MultiselectDropdown.module.css';\n\nimport { Cell, CellProps } from 'components/Blocks/Cell/Cell';\nimport { MultiselectOption } from 'components/Form/Multiselect/types';\nimport { Popper } from 'components/Overlays/Popper/Popper';\nimport { isCreateNewOptionPreset, isEmptyOptionPreset } from '../../hooks/constants';\nimport { UseMultiselectProps } from '../../hooks/useMultiselect';\nimport { renderOptionDefault } from './constants';\n\nexport interface MultiselectDropdownProps extends Required<Pick<UseMultiselectProps, 'options' | 'value'>> {\n  /** Array of selected options. */\n  value: MultiselectOption[];\n  /** Reference to the target element the dropdown is associated with. */\n  targetRef: RefObject<HTMLElement>;\n  /** Accessibility ID for the dropdown. */\n  dropdownAriaId: string;\n  /** Currently focused option within the dropdown. */\n  focusedOption: MultiselectOption | null;\n  /** Function to register a DOM node with an option index. */\n  setOptionNode: (index: number, node: HTMLElement) => void;\n  /** Function to control the open state of the dropdown. */\n  setOpened: (opened: boolean) => void;\n  /** Index of the currently focused option. */\n  focusedOptionIndex: number | null;\n  /** Function to update the index of the focused option. */\n  setFocusedOptionIndex: (index: number) => void;\n  /** Function to add an option derived from the input value. */\n  addOptionFromInput: () => void;\n  /** Mouse leave event handler for the dropdown. */\n  onMouseLeave: (event: MouseEvent<HTMLDivElement>) => void;\n  /** Function to add a selected option. */\n  addOption: (option: MultiselectOption) => void;\n  /** Function to clear the input value. */\n  clearInput: () => void;\n  /** Custom render function for each option. Defaults to a basic implementation. */\n  renderOption?: ForwardRefExoticComponent<CellProps & RefAttributes<unknown>>;\n  /** Whether to close the dropdown after selecting an option. */\n  closeDropdownAfterSelect?: boolean;\n}\n\n/**\n * Renders the dropdown menu for the multiselect input, including all options and managing interactions such as selection, focus, and mouse events.\n * Utilizes the `Popper` component for positioning relative to the input field.\n */\nexport const MultiselectDropdown = forwardRef<HTMLDivElement, MultiselectDropdownProps>(({\n  dropdownAriaId,\n  options,\n  onMouseLeave,\n  targetRef,\n  addOptionFromInput,\n  setFocusedOptionIndex,\n  renderOption = renderOptionDefault,\n  focusedOption,\n  value,\n  setOptionNode,\n  setOpened,\n  closeDropdownAfterSelect,\n  addOption,\n  focusedOptionIndex,\n  clearInput,\n}, ref) => {\n\n  return (\n    <Popper\n      id={dropdownAriaId}\n      ref={ref}\n      targetRef={targetRef}\n      onMouseLeave={onMouseLeave}\n      autoUpdateOnTargetResize\n      role=\"listbox\"\n      placement=\"bottom\"\n      sameWidth\n      className={styles.wrapper}\n    >\n      {options.map((option, index) => {\n        if (isEmptyOptionPreset(option)) {\n          return (\n            <Cell key=\"empty\" readOnly className={styles.empty}>\n              {option.placeholder}\n            </Cell>\n          );\n        }\n\n        if (isCreateNewOptionPreset(option)) {\n          return (\n            <Cell\n              key=\"new-options\"\n              hovered={focusedOptionIndex === index}\n              onMouseDown={addOptionFromInput}\n              onMouseEnter={() => setFocusedOptionIndex(index)}\n            >\n              {option.actionText}\n            </Cell>\n          );\n        }\n\n        return (\n          <Fragment key={`${typeof option.value}-${option.label}`}>\n            {renderOption(\n              {\n                className: styles.option,\n                hovered: focusedOption\n                  ? option.value === focusedOption.value\n                  : false,\n                children: option.label,\n                selected: value.findIndex((selectedOption) => selectedOption.value === option.value) !== -1,\n                ref: (node: HTMLElement) => setOptionNode(index, node),\n                onMouseDown: (event: MouseEvent<HTMLDivElement>) => {\n                  if (event.defaultPrevented) {\n                    return;\n                  }\n\n                  closeDropdownAfterSelect && setOpened(false);\n                  addOption(option);\n                  clearInput();\n                },\n                onMouseEnter: () => setFocusedOptionIndex(index),\n              },\n            )}\n          </Fragment>\n        );\n      })}\n    </Popper>\n  );\n});\n"],"mappings":";AAAA,SAASA,UAAU,EAA6BC,QAAQ,QAA8C;AAGtG,SAASC,IAAI,QAAmB;AAEhC,SAASC,MAAM,QAAQ;AACvB,SAASC,uBAAuB,EAAEC,mBAAmB,QAAQ;AAE7D,SAASC,mBAAmB,QAAQ;AAiCpC;;;;AAIA,OAAO,MAAMC,mBAAA,gBAAsBP,UAAA,CAAqD,CAAC;EACvFQ,cAAc;EACdC,OAAO;EACPC,YAAY;EACZC,SAAS;EACTC,kBAAkB;EAClBC,qBAAqB;EACrBC,YAAA,GAAeR,mBAAmB;EAClCS,aAAa;EACbC,KAAK;EACLC,aAAa;EACbC,SAAS;EACTC,wBAAwB;EACxBC,SAAS;EACTC,kBAAkB;EAClBC;AAAU,CACX,EAAEC,GAAA;EAED,oBACEC,IAAA,CAACrB,MAAA;IACCsB,EAAA,EAAIjB,cAAA;IACJe,GAAA,EAAKA,GAAA;IACLZ,SAAA,EAAWA,SAAA;IACXD,YAAA,EAAcA,YAAA;IACdgB,wBAAwB;IACxBC,IAAA,EAAK;IACLC,SAAA,EAAU;IACVC,SAAS;IACTC,SAAS;cAERrB,OAAA,CAAQsB,GAAG,CAAC,CAACC,MAAA,EAAQC,KAAA;MACpB,IAAI5B,mBAAA,CAAoB2B,MAAA,GAAS;QAC/B,oBACER,IAAA,CAACtB,IAAA;UAAiBgC,QAAQ;UAACJ,SAAS;oBACjCE,MAAA,CAAOG;WADA;MAId;MAEA,IAAI/B,uBAAA,CAAwB4B,MAAA,GAAS;QACnC,oBACER,IAAA,CAACtB,IAAA;UAECkC,OAAA,EAASf,kBAAA,KAAuBY,KAAA;UAChCI,WAAA,EAAazB,kBAAA;UACb0B,YAAA,EAAcA,CAAA,KAAMzB,qBAAA,CAAsBoB,KAAA;oBAEzCD,MAAA,CAAOO;WALJ;MAQV;MAEA,oBACEf,IAAA,CAACvB,QAAA;kBACEa,YAAA,CACC;UACEgB,SAAS;UACTM,OAAA,EAASrB,aAAA,GACLiB,MAAA,CAAOhB,KAAK,KAAKD,aAAA,CAAcC,KAAK,GACpC;UACJwB,QAAA,EAAUR,MAAA,CAAOS,KAAK;UACtBC,QAAA,EAAU1B,KAAA,CAAM2B,SAAS,CAAEC,cAAA,IAAmBA,cAAA,CAAe5B,KAAK,KAAKgB,MAAA,CAAOhB,KAAK,MAAM,CAAC;UAC1FO,GAAA,EAAMsB,IAAA,IAAsB5B,aAAA,CAAcgB,KAAA,EAAOY,IAAA;UACjDR,WAAA,EAAcS,KAAA;YACZ,IAAIA,KAAA,CAAMC,gBAAgB,EAAE;cAC1B;YACF;YAEA5B,wBAAA,IAA4BD,SAAA,CAAU;YACtCE,SAAA,CAAUY,MAAA;YACVV,UAAA;UACF;UACAgB,YAAA,EAAcA,CAAA,KAAMzB,qBAAA,CAAsBoB,KAAA;QAC5C;SApBW,GAAG,OAAOD,MAAA,CAAOhB,KAAK,IAAIgB,MAAA,CAAOS,KAAK,EAAE;IAwB3D;;AAGN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}